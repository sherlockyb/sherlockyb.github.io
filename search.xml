<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spark读取elasticsearch数据指南</title>
      <link href="/2022/06/03/Spark-reading-elasticsearch-guide/"/>
      <url>/2022/06/03/Spark-reading-elasticsearch-guide/</url>
      
        <content type="html"><![CDATA[<p>最近要在 Spark job 中通过 Spark SQL 的方式读取 Elasticsearch 数据，踩了一些坑，总结于此。</p><a id="more"></a><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul><li><p>Spark job 的编写语言为 Scala，scala-library 的版本为 2.11.8。</p></li><li><p>Spark 相关依赖包的版本为 2.3.2，如 spark-core、spark-sql。</p></li><li><p>Elasticsearch 数据</p><p><strong>schema</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"label"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"docId"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"labels"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"nested"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"label"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"itemId"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sample data</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">141</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">17370929</span>,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"aen-label-v1"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"label"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"123_ITEM"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"docId"</span> : <span class="string">"123_ITEM"</span>,</span><br><span class="line">          <span class="attr">"labels"</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"id"</span> : <span class="number">7378</span>,</span><br><span class="line">              <span class="attr">"label"</span> : <span class="string">"1kg"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"itemId"</span> : <span class="number">123</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"aen-label-v1"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"label"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"456_ITEM"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"docId"</span> : <span class="string">"456_ITEM"</span>,</span><br><span class="line">          <span class="attr">"labels"</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"id"</span> : <span class="number">7378</span>,</span><br><span class="line">              <span class="attr">"label"</span> : <span class="string">"2kg"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"itemId"</span> : <span class="number">456</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>既然要用 Spark SQL，当然少不了其对应的依赖，</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.apache.spark:spark-core_2.11:2.3.2'</span></span><br><span class="line">  implementation <span class="string">'org.apache.spark:spark-sql_2.11:2.3.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ES 的相关库，如同 <a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html" target="_blank" rel="noopener">官网</a> 所说，要在 Spark 中访问 ES，需要将 <code>elasticsearch-hadoop</code> 依赖包加入到 Spark job 运行的类路径中，具体而言就是添加到 Spark job 工程的依赖中，公司的 nexus 中当前最新的版本为 7.15.0，且目前我们是使用 gradle 管理依赖，故添加依赖的代码如下，</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.elasticsearch:elasticsearch-hadoop:7.15.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>对于 Spark，基于资源管理器的不同，可以在两种模式下运行：本地模式和集群模式，可通过 <code>--master</code> 参数来指定资源管理器的方式。本地模式时，不依赖额外的 Spark 集群，Spark 将在同一台机器上运行所有内容，非常方便用于本地测试，对于 Spark SQL，只需要在创建 SparkSession 时采用 local 的模式即可，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUtils</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">esHost</span></span>() = <span class="string">s"es.sherlockyb.club"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// local mode</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getLocalSparkSession</span></span>: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder()</span><br><span class="line">    .master(<span class="string">"local"</span>)</span><br><span class="line">    .getOrCreate()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// cluster mode</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getSparkSession</span></span>: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder()</span><br><span class="line">    .enableHiveSupport()</span><br><span class="line">    .config(<span class="string">"spark.sql.broadcastTimeout"</span>, <span class="string">"3600"</span>)</span><br><span class="line">    .getOrCreate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">LocalTest</span> <span class="keyword">extends</span> <span class="title">LazyLogging</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">LocalTest</span>().run()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> myUtils = <span class="keyword">new</span> <span class="type">MyUtils</span></span><br><span class="line">    <span class="keyword">val</span> spark = myUtils.getLocalSparkSession</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> attributeId = <span class="number">7378</span>L</span><br><span class="line">    <span class="keyword">val</span> labelNames = <span class="type">Array</span>(<span class="string">"aen-label-retail"</span>, <span class="string">"aen-label-seller"</span>)</span><br><span class="line">    spark.read</span><br><span class="line">      .format(<span class="string">"es"</span>)</span><br><span class="line">      .option(<span class="string">"es.nodes"</span>, myUtils.esHost())</span><br><span class="line">      .option(<span class="string">"es.port"</span>, <span class="string">"9200"</span>)</span><br><span class="line">      .option(<span class="string">"es.nodes.wan.only"</span>, value = <span class="literal">true</span>)</span><br><span class="line">      .option(<span class="string">"es.resource"</span>, <span class="type">Joiner</span>.on(<span class="string">","</span>).join(java.util.<span class="type">Arrays</span>.asList(labelNames:_*)) + <span class="string">"/label"</span>)</span><br><span class="line">      .option(<span class="string">"es.scroll.size"</span>, <span class="number">2000</span>)</span><br><span class="line">      .load()</span><br><span class="line">      .createOrReplaceTempView(<span class="string">"temp_labels"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> sqlDf = spark.sql(<span class="string">"select itemId, labels from temp_labels where itemId in (123, 456)"</span>)</span><br><span class="line">    <span class="keyword">val</span> newDf = sqlDf</span><br><span class="line">      .map(row =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> labels = row.getAs[<span class="type">Seq</span>[<span class="type">Row</span>]](<span class="string">"labels"</span>)</span><br><span class="line">        <span class="keyword">val</span> labelValue = labels.find(p =&gt; p.getAs[<span class="type">Long</span>](<span class="string">"id"</span>) == attributeId).map(p =&gt; p.getAs[<span class="type">String</span>](<span class="string">"label"</span>))</span><br><span class="line"></span><br><span class="line">        (row.getAs[<span class="type">Long</span>](<span class="string">"itemId"</span>), attributeId, labelValue.orNull)</span><br><span class="line">      &#125;)</span><br><span class="line">      .withColumn(<span class="string">"final_result"</span>, lit(<span class="string">"PASS"</span>))</span><br><span class="line">      .toDF(<span class="string">"itemId"</span>, <span class="string">"attributeId"</span>, <span class="string">"label"</span>, <span class="string">"final_result"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> finalDf = newDf.toDF(<span class="string">"itemId"</span>, <span class="string">"attributeId"</span>, <span class="string">"label"</span>, <span class="string">"result"</span>)</span><br><span class="line">    finalDf.printSchema()</span><br><span class="line">    finalDf.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> emptyDf = newDf</span><br><span class="line">      .filter(col(<span class="string">"label"</span>).isNotNull)</span><br><span class="line">      .toDF(<span class="string">"itemId"</span>, <span class="string">"attributeId"</span>, <span class="string">"label"</span>, <span class="string">"result"</span>)</span><br><span class="line">    emptyDf = emptyDf.union(finalDf)</span><br><span class="line">    emptyDf.printSchema()</span><br><span class="line">    emptyDf.show()</span><br><span class="line"></span><br><span class="line">    emptyDf.filter(col(<span class="string">"itemId"</span>) === <span class="number">6238081929</span>L and col(<span class="string">"label"</span>).notEqual(col(<span class="string">"result"</span>)))</span><br><span class="line">      .show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> attributeTypeIds = <span class="type">Array</span>.fill(<span class="number">3</span>)(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">val</span> attributeTypeIdsStr = <span class="type">Joiner</span>.on(<span class="string">","</span>).join(java.util.<span class="type">Arrays</span>.asList(attributeTypeIds:_*))</span><br><span class="line">    println(attributeTypeIdsStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> scala.collection.<span class="type">JavaConverters</span>._</span><br><span class="line">    emptyDf = emptyDf.filter(!col(<span class="string">"itemId"</span>).isin(trainItemIds.asScala.map(<span class="type">Long2long</span>).toList:_*))</span><br><span class="line">    emptyDf.show(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Spark-SQL-Data-Sources"><a href="#Spark-SQL-Data-Sources" class="headerlink" title="Spark SQL Data Sources"></a>Spark SQL Data Sources</h3><p>Spark SQL 通过 <code>DataFrameReader</code>  类支持读取各种类型的数据源，比如  Parquet、ORC、JSON、CSV 等格式的文件，Hive table，以及其他 database。而 Elasticsearch 只不过是众多数据源中的一种，<code>DataFrameReader</code> 通过 <code>format(...)</code> 指定数据源格式，通过 <code>option(...)</code> 定制对应数据源下的配置，最后通过 <code>load()</code> 加载生成 <code>DataFrame</code>，也就是 <code>Dataset[Row]</code> 的类型别名。有了 <code>DataFrame</code>，就可以创建一个临时表，然后就能以 SQL 的方式读取数据。</p><p>在 Spark 1.5 以前，Elasticsearch 在 <code>format(...)</code> 中对应的 source 名需要是全包名 <code>org.elasticsearch.spark.sql</code>，而在 Spark 1.5 以及之后的版本，source 名称简化为 <code>es</code>。</p><h3 id="Spark-SQL-中-DataFrame-常用-API"><a href="#Spark-SQL-中-DataFrame-常用-API" class="headerlink" title="Spark SQL 中 DataFrame 常用 API"></a>Spark SQL 中 DataFrame 常用 API</h3><ul><li>df.printSchema()，打印 schema</li><li>df.show()，查看数据列表，默认是 truncate 前 20 条，传 false 时列出全部数据。</li><li>df.createOrReplaceTempView(“view_name”)，构建临时表视图，方便后续 SQL 操作。</li><li>df.withColumn()，添加新列或替换现有列。<ul><li>df.withColumn(“final_result”, lit(“PASS”)) ，通过 <code>lit</code> 添加常量列。</li></ul></li><li>df.filter(col(“label”).isNotNull)，用指定的条件过滤行。</li><li>df.dropDuplicates(“itemId”,”attributeId”)，按指定列对行去重，返回新的数据集。</li><li>df.union(otherDf)，将两个 DataFrame 的记录合并且不去重，相当于 union all。</li><li>df.toDF(“itemId”, “attributeId”, “label”, “final_result”)，为 df 各列指定一个有意义的名称。</li></ul><h3 id="Scala-与-Java-类型映射"><a href="#Scala-与-Java-类型映射" class="headerlink" title="Scala 与 Java 类型映射"></a>Scala 与 Java 类型映射</h3><ul><li>scala.Long -&gt; long</li><li>Array[T] -&gt; T[]</li></ul><h3 id="Scala-与-Java-类型转换"><a href="#Scala-与-Java-类型转换" class="headerlink" title="Scala 与 Java 类型转换"></a>Scala 与 Java 类型转换</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConverters</span>._</span><br><span class="line">newDf = df.filter(!col(<span class="string">"itemId"</span>).isin(trainItemIds.asScala.map(<span class="type">Long2long</span>).toList:_*))</span><br></pre></td></tr></table></figure><h3 id="Scala-中的"><a href="#Scala-中的" class="headerlink" title="Scala 中的 : _*"></a>Scala 中的 <code>: _*</code></h3><p><code>:_*</code> 是 <strong>type ascription</strong> 的一个特例，它会告诉编译器将序列类型的单个参数视为变参数序列，即 varargs。应用例子，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> indices = <span class="type">Array</span>(<span class="string">"aen-label"</span>, <span class="string">"aen-label-seller"</span>)</span><br><span class="line"><span class="type">Joiner</span>.on(<span class="string">","</span>).join(java.util.<span class="type">Arrays</span>.asList(indices:_*))</span><br></pre></td></tr></table></figure><h2 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h2><h3 id="es-nodes-wan-only"><a href="#es-nodes-wan-only" class="headerlink" title="es.nodes.wan.only"></a>es.nodes.wan.only</h3><p>该配置项表示连接器是否用于 WAN 上的云或受限环境如 AWS 中的 Elasticsearch 实例，默认为 false，而公司的 Elasticsearch 集群是在 AWS 上的，endpoint 只能在内网访问，因而刚开始测试时，遇到如下报错，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread "main" org.elasticsearch.hadoop.EsHadoopIllegalArgumentException: No data nodes with HTTP-enabled available</span><br><span class="line">at org.elasticsearch.hadoop.rest.InitializationUtils.filterNonDataNodesIfNeeded(InitializationUtils.java:159)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestService.findPartitions(RestService.java:223)</span><br><span class="line">at org.elasticsearch.spark.rdd.AbstractEsRDD.esPartitions$lzycompute(AbstractEsRDD.scala:73)</span><br><span class="line">at org.elasticsearch.spark.rdd.AbstractEsRDD.esPartitions(AbstractEsRDD.scala:72)</span><br><span class="line">at org.elasticsearch.spark.rdd.AbstractEsRDD.getPartitions(AbstractEsRDD.scala:44)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:253)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:251)</span><br><span class="line">at scala.Option.getOrElse(Option.scala:121)</span><br><span class="line">at org.apache.spark.rdd.RDD.partitions(RDD.scala:251)</span><br><span class="line">at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:46)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:253)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:251)</span><br><span class="line">at scala.Option.getOrElse(Option.scala:121)</span><br><span class="line">at org.apache.spark.rdd.RDD.partitions(RDD.scala:251)</span><br><span class="line">at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:46)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:253)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:251)</span><br><span class="line">at scala.Option.getOrElse(Option.scala:121)</span><br><span class="line">at org.apache.spark.rdd.RDD.partitions(RDD.scala:251)</span><br><span class="line">at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:46)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:253)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:251)</span><br><span class="line">at scala.Option.getOrElse(Option.scala:121)</span><br><span class="line">at org.apache.spark.rdd.RDD.partitions(RDD.scala:251)</span><br><span class="line">at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:46)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:253)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:251)</span><br><span class="line">at scala.Option.getOrElse(Option.scala:121)</span><br><span class="line">at org.apache.spark.rdd.RDD.partitions(RDD.scala:251)</span><br><span class="line">at org.apache.spark.sql.execution.SparkPlan.executeTake(SparkPlan.scala:340)</span><br><span class="line">at org.apache.spark.sql.execution.CollectLimitExec.executeCollect(limit.scala:38)</span><br><span class="line">at org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$collectFromPlan(Dataset.scala:3278)</span><br><span class="line">at org.apache.spark.sql.Dataset$$anonfun$head$1.apply(Dataset.scala:2489)</span><br><span class="line">at org.apache.spark.sql.Dataset$$anonfun$head$1.apply(Dataset.scala:2489)</span><br><span class="line">at org.apache.spark.sql.Dataset$$anonfun$52.apply(Dataset.scala:3259)</span><br><span class="line">at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:77)</span><br><span class="line">at org.apache.spark.sql.Dataset.withAction(Dataset.scala:3258)</span><br><span class="line">at org.apache.spark.sql.Dataset.head(Dataset.scala:2489)</span><br><span class="line">at org.apache.spark.sql.Dataset.take(Dataset.scala:2703)</span><br><span class="line">at org.apache.spark.sql.Dataset.showString(Dataset.scala:254)</span><br><span class="line">at org.apache.spark.sql.Dataset.show(Dataset.scala:723)</span><br></pre></td></tr></table></figure><p>通过 <code>option(&quot;es.nodes.wan.only&quot;, value = true)</code> 将配置项设置为 true 后恢复正常。</p><h3 id="importing-spark-implicits"><a href="#importing-spark-implicits" class="headerlink" title="importing spark.implicits._"></a>importing spark.implicits._</h3><p>在遍历 DataFrame 时遇到如下编译错误，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to find encoder for type stored in a Dataset.  Primitive types (Int, String, etc) and Product types (case classes) are supported by importing spark.implicits._</span><br></pre></td></tr></table></figure><p>在处理 DataFrame 之前需要加上 <code>importing spark.implicits._</code>，用于将常见的 Scala 对象转换为 DataFrame，通常在获取 SparkSession 后立马 import。</p><h3 id="Spark-SQL-读取-hive-表中-array-类型时，对于-Scala-语言，得到的类型是-WrappedArray-而不是-Array"><a href="#Spark-SQL-读取-hive-表中-array-类型时，对于-Scala-语言，得到的类型是-WrappedArray-而不是-Array" class="headerlink" title="Spark SQL 读取 hive 表中 array 类型时，对于 Scala 语言，得到的类型是 WrappedArray 而不是 Array"></a>Spark SQL 读取 hive 表中 array 类型时，对于 Scala 语言，得到的类型是 <code>WrappedArray</code> 而不是 <code>Array</code></h3><p>当我们通过 <code>createOrReplaceTempView(&quot;temp_labels&quot;)</code> 构建一个临时表视图后，就可以通过 SQL 像操作 hive 表那样读取数据。例如读取指定的列，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sqlDf = spark.sql(<span class="string">"select itemId, labels from temp_labels where itemId in (123, 456)"</span>)</span><br></pre></td></tr></table></figure><p>通过 <code>sqlDf.printSchema()</code> 可以看到 sqlDf 的 schema 长这样，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- itemId: long (nullable = true)</span><br><span class="line"> |-- labels: array (nullable = true)</span><br><span class="line"> |    |-- element: struct (containsNull = true)</span><br><span class="line"> |    |    |-- id: long (nullable = true)</span><br><span class="line"> |    |    |-- label: string (nullable = true)</span><br></pre></td></tr></table></figure><p><code>labels</code> 是包含 struct 的数组，于是从 row 中将 <code>labels</code> 列读出时想尝试转换为 Array，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> newDf = sqlDf.map(</span><br><span class="line">  row =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> labels = row.getAs[<span class="type">Array</span>[<span class="type">Row</span>]](<span class="string">"labels"</span>)</span><br><span class="line">    <span class="keyword">val</span> labelValue = labels.find(p =&gt; p.getAs[<span class="type">Long</span>](<span class="string">"id"</span>) == attributeId).map(p =&gt; p.getAs[<span class="type">String</span>](<span class="string">"label"</span>))</span><br><span class="line"></span><br><span class="line">    (row.getAs[<span class="type">Long</span>](<span class="string">"itemId"</span>), attributeId, labelValue.orNull)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>结果报错如下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: scala.collection.mutable.WrappedArray$ofRef cannot be cast to [Lorg.apache.spark.sql.Row;</span><br></pre></td></tr></table></figure><p>可以看到 Spark SQL 在读取表中数组列时，是用的 <code>scala.collection.mutable.WrappedArray</code> 来存储结果的，看其类定义可知，它是间接实现 Seq 接口的，所以也可用 <code>row.getAs[Seq[Row]](&quot;labels&quot;)</code> 来读取。**这里需要注意的是，Array[T] 虽然在 Scala 源码定义中是 class，但其对标的 Java 类型是原生数组 T[]**。</p><h3 id="判断-Column-是否为-null-时，需要用-is-null-或-is-not-null，而不是-或"><a href="#判断-Column-是否为-null-时，需要用-is-null-或-is-not-null，而不是-或" class="headerlink" title="判断 Column 是否为 null 时，需要用 is null 或 is not null，而不是 === 或  !=="></a>判断 Column 是否为 null 时，需要用 <code>is null</code> 或 <code>is not null</code>，而不是 <code>===</code> 或 <code> !==</code></h3><p>对于错误的用法，filter 并不会生效，就像下面这样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newDf.filter(col(<span class="string">"label"</span>) !== <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>这一点和 hive 表以及 MySQL 表判断字段是否为 null，是保持一致的，应该像下面这样，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newDf.filter(col(&quot;label&quot;).isNotNull)</span><br></pre></td></tr></table></figure><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.<span class="type">Joiner</span></span><br><span class="line"><span class="keyword">import</span> com.typesafe.scalalogging.<span class="type">LazyLogging</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Row</span>, <span class="type">SaveMode</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestMain</span> <span class="keyword">extends</span> <span class="title">LazyLogging</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> myUtils = <span class="keyword">new</span> <span class="type">MyUtils</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">TestApp</span>(myUtils).run()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApp</span>(<span class="params">myUtils: <span class="type">MyUtils</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> <span class="keyword">with</span> <span class="title">LazyLogging</span> </span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">esDf</span></span>(spark: <span class="type">SparkSession</span>, indices: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">DataFrame</span> = &#123;</span><br><span class="line">    spark.read</span><br><span class="line">      .format(<span class="string">"es"</span>)</span><br><span class="line">      .option(<span class="string">"es.nodes"</span>, myUtils.esHost())</span><br><span class="line">      .option(<span class="string">"es.port"</span>, <span class="string">"9200"</span>)</span><br><span class="line">      .option(<span class="string">"es.nodes.wan.only"</span>, value = <span class="literal">true</span>)</span><br><span class="line">      .option(<span class="string">"es.resource"</span>, <span class="type">Joiner</span>.on(<span class="string">","</span>).join(java.util.<span class="type">Arrays</span>.asList(indices:_*)) + <span class="string">"/label"</span>)</span><br><span class="line">      .option(<span class="string">"es.scroll.size"</span>, <span class="number">2000</span>)</span><br><span class="line">      .load()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = myUtils.getSparkSession</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> esTempView = <span class="string">"es_label"</span></span><br><span class="line">    <span class="keyword">val</span> labelNames = <span class="type">Array</span>(<span class="string">"aen-label-retail"</span>, <span class="string">"aen-label-seller"</span>)</span><br><span class="line">    esDf(spark, labelNames).createOrReplaceTempView(esTempView)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> labelDf = getLabelDf(spark, itemIdsStr, attributeTypeIds, esTempView)</span><br><span class="line">    println(<span class="string">"debug log"</span>)</span><br><span class="line">    labelDf.printSchema()</span><br><span class="line">    labelDf.show()</span><br><span class="line">    labelDf.createOrReplaceTempView(<span class="string">"final_labels"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> data = spark.sql(</span><br><span class="line">      <span class="string">s""</span><span class="string">"</span></span><br><span class="line"><span class="string">      |select cc.*, pp.final_result, pp.label, null as remark</span></span><br><span class="line"><span class="string">      |from temp_request cc</span></span><br><span class="line"><span class="string">      |left join final_labels pp</span></span><br><span class="line"><span class="string">      |on cc.itemid = pp.itemId</span></span><br><span class="line"><span class="string">      |and cc.attributetypeid = pp.attributeId</span></span><br><span class="line"><span class="string">      |where cc.profile = '$jobId'</span></span><br><span class="line"><span class="string">      |"</span><span class="string">""</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    data.distinct().write.mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>)</span><br><span class="line">    .option(<span class="string">"compression"</span>, <span class="string">"gzip"</span>)</span><br><span class="line">    .json(<span class="string">s"s3://sherlockyb-test/check-precision/job_id=<span class="subst">$jobId</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getLabelDf</span></span>(spark: <span class="type">SparkSession</span>, itemIdsStr: <span class="type">String</span>, attributeTypeIds: <span class="type">Array</span>[<span class="type">String</span>], esTempView: <span class="type">String</span>): <span class="type">DataFrame</span> = &#123;</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sqlDf = spark.sql(<span class="string">s"select itemId, labels from <span class="subst">$esTempView</span> where itemId in (<span class="subst">$itemIdsStr</span>)"</span>)</span><br><span class="line">    <span class="keyword">val</span> emptyDf = spark.emptyDataFrame</span><br><span class="line">    <span class="keyword">var</span> labelDf = emptyDf</span><br><span class="line">    attributeTypeIds.foreach(attributeTypeId =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> attributeDf = sqlDf</span><br><span class="line">        .map(row =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> labels = row.getAs[<span class="type">Seq</span>[<span class="type">Row</span>]](<span class="string">"labels"</span>)</span><br><span class="line">          <span class="keyword">val</span> labelValue = labels.find(p =&gt; p.getAs[<span class="type">Long</span>](<span class="string">"id"</span>) == attributeTypeId.toLong).map(p =&gt; p.getAs[<span class="type">String</span>](<span class="string">"label"</span>))</span><br><span class="line"></span><br><span class="line">          (row.getAs[<span class="type">Long</span>](<span class="string">"itemId"</span>), attributeTypeId.toLong, labelValue.orNull)</span><br><span class="line">        &#125;)</span><br><span class="line">        .withColumn(<span class="string">"final_result"</span>, lit(<span class="string">"PASS"</span>))</span><br><span class="line">        .toDF(<span class="string">"itemId"</span>, <span class="string">"attributeId"</span>, <span class="string">"label"</span>, <span class="string">"final_result"</span>)</span><br><span class="line">        .filter(col(<span class="string">"label"</span>).isNotNull)</span><br><span class="line">      <span class="keyword">if</span> (labelDf == emptyDf) &#123;</span><br><span class="line">        labelDf = attributeDf</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        labelDf = labelDf.union(attributeDf)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    labelDf.dropDuplicates(<span class="string">"itemId"</span>,<span class="string">"attributeId"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="补充：提交-spark-job"><a href="#补充：提交-spark-job" class="headerlink" title="补充：提交 spark job"></a>补充：提交 spark job</h1><p>将 job 工程打包为 Jar，上传到 AWS 的 s3，比如 <code>s3://sherlockyb-test/1.0.0/artifacts/spark/</code> 目录下，然后通过 Genie 提交 spark job 到 Spark 集群运行。Genie 是 Netflix 研发的联合作业执行引擎，提供 REST-full API 来运行各种大数据作业，如 Hadoop、Pig、Hive、Spark、Presto、Sqoop 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_spark</span><span class="params">(job_name, spark_jar_name, spark_class_name, arg_str, spark_param=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> pygenie</span><br><span class="line"></span><br><span class="line">    pygenie.conf.DEFAULT_GENIE_URL = <span class="string">"genie.sherlockyb.club"</span></span><br><span class="line"></span><br><span class="line">    job = pygenie.jobs.GenieJob() \</span><br><span class="line">        .genie_username(<span class="string">'sherlockyb'</span>) \</span><br><span class="line">        .job_name(job_name) \</span><br><span class="line">        .job_version(<span class="string">'0.0.1'</span>) \</span><br><span class="line">        .metadata(teamId=<span class="string">'team_account'</span>) \</span><br><span class="line">        .metadata(teamCredential=<span class="string">'team_password'</span>)</span><br><span class="line"></span><br><span class="line">    job.cluster_tags([<span class="string">'type:yarn-kerberos'</span>, <span class="string">'sched:default'</span>])</span><br><span class="line">    job.command_tags([<span class="string">'type:spark-submit-kerberos'</span>, <span class="string">'ver:2.3.2'</span>])</span><br><span class="line">    job.command_arguments(</span><br><span class="line">        <span class="string">f"--class <span class="subst">&#123;spark_class_name&#125;</span> <span class="subst">&#123;spark_param&#125;</span> "</span></span><br><span class="line">        <span class="string">f"s3a://sherlockyb-test/1.0.0/artifacts/spark/<span class="subst">&#123;spark_jar_name&#125;</span> "</span></span><br><span class="line">        <span class="string">f"<span class="subst">&#123;arg_str&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Submit the job to Genie</span></span><br><span class="line">    running_job = job.execute()</span><br><span class="line">    running_job.wait()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> running_job.status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近关于工作的几点思考</title>
      <link href="/2022/05/31/Some-thoughts-on-work-recently/"/>
      <url>/2022/05/31/Some-thoughts-on-work-recently/</url>
      
        <content type="html"><![CDATA[<p>吾日三省吾身，记录一下近期关于工作的几点思考。</p><blockquote><ol><li>好记性不如烂笔头，随手记录的习惯永不过时。</li></ol></blockquote><a id="more"></a><p>举几个例子。</p><ul><li>在项目管理时，通过 Microsoft Excel 或 Google Sheet 制作完整的进度表。表的内容主要涵盖关键目标，对应的 owner 以及指标，可采取总分的方式；可以日或周为单位定期更新，更新频率取决于项目的不同阶段。比如在前期，以日为单位可更及时地暴露问题并解决，到中后期，项目已趋于稳定，调整为以周为单位降低频次，也有助于提高效率，毕竟频繁的同步会也是需要时间成本的。</li><li>在用 Jira 的 story&#x2F;task 追踪任务时，可利用其 comment 功能，每一个阶段性的进展都可以通过追加 comment 的方式来记录，这样，通过 comment 列表就可以一目了然的看出任务的完整进展情况。</li><li>当长期处理一个问题时，如 dive deep API 的 spike issue、接入 SEAuth 等，用 wiki 等阶段性地及时记录遇到的问题或新发现是个不错的习惯，也便于后续总结时有信手拈来的素材。</li></ul><blockquote><ol start="2"><li>以目标为导向，Try any way。</li></ol></blockquote><p>上栗子，</p><ul><li>在做属性抽取时，抽取方法不停地迭代，先后经历了 Dictionary、OCR、NumberType、Machine Learning、Kencyclo、Regex 等，其最终目的都是为了提高抽取的 coverage 和 precision。</li><li>还是属性抽取，有 A 和 B 两个表示长度的属性，仅仅是单位类型不同，但 A 的 coverage 要远大于 B，此时借助单位转换，用 A 抽取的结果，通过单位转换来抽取 B，最终将 B 的coverage 提升 50%，这是在原有的属性抽取框架下很难做到的。这个方法也衍生出后来的通过 metric 比较好的属性来抽取其他属性的新思路。</li></ul><blockquote><ol start="3"><li>在项目初期，定期的小组内部 dive deep 会议，及时交换想法，同步发现的问题并讨论如何解决，不仅能规避重走弯路，也能提高生产效率，集思广益，最大化团队力量。</li></ol></blockquote><p>比如最近在做的 AWS cost saving，每周一次的 dive deep 会议，除了更新进展，更多的是交流分享各自在做的过程中产生的困难、启发、最佳实践等，提升整体的效率。</p><blockquote><ol start="4"><li>切勿眼高手低，要有匠心精神，即便是小的功能点，也是可以做到极致。</li></ol></blockquote><p>很欣赏组里的一位前辈，很小的功能点，也能站在使用者角度仔细打磨，最终实现的版本堪称 perfect。</p><blockquote><ol start="5"><li>多从用户角度出发，简单易用，磨炼产品思维。</li></ol></blockquote><p>例如系统中 offline job 的UI，经组里一同事优化后，排版紧凑明了，体验感一下就上来了。</p><blockquote><ol start="6"><li>自测很重要，盲目的自信是危险的，即便是很小的改动，也需要测试验证，往往能发现意想不到的问题。</li></ol></blockquote><p>这个道理人人都懂，可是能严格执行的少之又少，真的毫不夸张，工作中遇到的各种盲目自信的人太多了，包括笔者自己，偶尔也会犯这样的错误，又该反省了……</p><blockquote><ol start="7"><li>对已有代码的改动时，修改和 review 都要谨慎，核心代码更不用说了，即便是一行代码也存在风险。</li></ol></blockquote><p>对已有的老逻辑要抱有敬畏之心，在吐槽写的如何如何烂的同时，也要思考当初为何会这样写，有什么特殊考量的地方。</p><blockquote><ol start="8"><li>效率的提升应该是一直在路上，没有最快，只有更快。用系统自动化代替一切费时费力的重复性人工操作。</li></ol></blockquote><p>比如我们做属性抽取时需要定期追踪 metric，最初都是每周由 owner 手动更新一次，后来用自动化的 job 来定期生成 metric 并在系统中可视化展示，省事多了。</p><blockquote><ol start="9"><li>当遇到比较耗时的或重试多次都不行的问题时，不要继续重复忍受或直接放弃，而是换个思路，积极想新的办法解决。</li></ol></blockquote><p>比如最近遇到的一个问题，使用 GitHub 时，网页访问正常，但通过 ssh 合并代码时，要么就很慢，要么就因为 <code>SSL_ERROR_SYSCALL</code> 错误而部署失败，重试了不下 20 次，最后还是通过 Google 找到答案，大概率是域名遭到 DNS 污染，可以通过修改 host，将 GitHub 域名指向真实的 IP（从 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">ipaddress</a> 获取），并刷新本地 DNS 缓存，一下就顺畅了。</p><blockquote><ol start="10"><li>对未知或不熟悉的事物有畏惧感是人之常情，总觉得挺复杂，很难。其实接触后就会发现并不难，再进一步了解后会发现还是你所熟悉的配方，所以要勇于迈出第一步！</li></ol></blockquote><p>工作中难免会不停地接触新的东西，对于一项对你来说新的技术，先从它的官网 user guide 开始，是一个不错的选择。其实生活中也是一样的，敢于尝试新的事物，跳出舒适区，能让你收获新的东西。</p><blockquote><ol start="11"><li>写文档对于程序员来说是最大的挑战。越是不想写，越拖延，恶性循环中。俗话说，万事开头难，先把标题搞定，然后再把大纲搞定，确定要写哪些内容，整体框架出来了，然后再逐个往里填就是了。</li></ol></blockquote><p>说写文档这个事儿是最大挑战一点也不夸张，有时候可能憋一上午都挤不出几个字儿，比写代码难多了……</p><blockquote><ol start="12"><li>个人优秀是一回事儿，如果能激发队友潜能，让整个 team 更高效，才是更牛逼的。</li></ol></blockquote><p>放手，鼓励并相信队友。举个栗子，系统在本地启动时遇到 https 服务无法访问的问题，让小伙伴自己尝试解决，并给出相关的参考链接，最终他成功解决问题并还整理出简洁明了的 guide wiki，挺好的。</p>]]></content>
      
      
      <categories>
          
          <category> Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka消息的压缩机制</title>
      <link href="/2022/04/30/compression-mechanism-of-the-Kafka-message/"/>
      <url>/2022/04/30/compression-mechanism-of-the-Kafka-message/</url>
      
        <content type="html"><![CDATA[<p>最近在做 AWS cost saving 的事情，对于 Kafka 消息集群，计划通过压缩消息来减少消息存储所占空间，从而达到减少 cost 的目的。本文将结合源码从 Kafka 支持的消息压缩类型、何时需要压缩、如何开启压缩、何处进行解压缩以及压缩原理来总结 Kafka 整个消息压缩机制。文中所涉及源码部分均来自于 Kafka 当前最新的 3.3.0-SNAPSHOT 版本。</p><a id="more"></a><h1 id="Kafka支持的消息压缩类型"><a href="#Kafka支持的消息压缩类型" class="headerlink" title="Kafka支持的消息压缩类型"></a>Kafka支持的消息压缩类型</h1><h2 id="什么是-Kafka-的消息压缩"><a href="#什么是-Kafka-的消息压缩" class="headerlink" title="什么是 Kafka 的消息压缩"></a>什么是 Kafka 的消息压缩</h2><p>在谈消息压缩类型之前，我们先看下 Kafka 中关于消息压缩的定义是什么。</p><p>Kafka <a href="https://cwiki.apache.org/confluence/display/KAFKA/Compression" target="_blank" rel="noopener">官网</a> 有这样一段解释：</p><blockquote><p>此为 Kafka 中端到端的块压缩功能。如果启用，数据将由 producer 压缩，以压缩格式写入服务器，并由 consumer 解压缩。压缩将提高 consumer 的吞吐量，但需付出一定的解压成本。这在跨数据中心镜像数据时尤其有用。</p></blockquote><p>也就是说，Kafka 的消息压缩是指将消息本身采用特定的压缩算法进行压缩并存储，待消费时再解压。</p><p>我们知道压缩就是用时间换空间，其基本理念是基于重复，将重复的片段编码为字典，字典的 key 为重复片段，value 为更短的代码，比如序列号，然后将原始内容中的片段用代码表示，达到缩短内容的效果，压缩后的内容则由字典和代码序列两部分组成。解压时根据字典和代码序列可无损地还原为原始内容。注：有损压缩不在此次讨论范围。</p><p>通常来讲，重复越多，压缩效果越好。比如 JSON 是 Kafka 消息中常用的序列化格式，单条消息内可能并没有多少重复片段，但如果是批量消息，则会有大量重复的字段名，批量中消息越多，则重复越多，这也是为什么 Kafka 更偏向块压缩，而不是单条消息压缩。</p><h2 id="消息压缩类型"><a href="#消息压缩类型" class="headerlink" title="消息压缩类型"></a>消息压缩类型</h2><p>目前 Kafka 共支持四种主要的压缩类型：Gzip、Snappy、Lz4 和 Zstd。关于这几种压缩的特性，</p><table><thead><tr><th>压缩类型</th><th>压缩比率</th><th>CPU 使用率</th><th>压缩速度</th><th>带宽使用率</th></tr></thead><tbody><tr><td>Gzip</td><td>Highest</td><td>Highest</td><td>Slowest</td><td>Lowest</td></tr><tr><td>Snappy</td><td>Medium</td><td>Moderate</td><td>Moderate</td><td>Medium</td></tr><tr><td>Lz4</td><td>Low</td><td>Lowest</td><td>Fastest</td><td>Highest</td></tr><tr><td>Zstd</td><td>Medium</td><td>Moderate</td><td>Moderate</td><td>Medium</td></tr></tbody></table><p>从上表可知，Snappy 在 CPU 使用率、压缩比、压缩速度和网络带宽使用率之间实现良好的平衡，我们最终也是采用的该类型进行压缩试点。这里值得一提的是，Zstd 是 Facebook 于 2016 年开源的新压缩算法，压缩率和压缩性能都不错，具有与 Snappy（Google 杰作）相似的特性，直到 Kafka 的 2.1.0 版本才引入支持。</p><p>针对这几种压缩本身的性能，Zstd <a href="https://github.com/facebook/zstd" target="_blank" rel="noopener">GitHub 官方</a> 公布了压测对比结果如下，</p><table><thead><tr><th>Compressor name</th><th>Ratio</th><th>Compression</th><th>Decompress.</th></tr></thead><tbody><tr><td><strong>zstd 1.5.1 -1</strong></td><td>2.887</td><td>530 MB&#x2F;s</td><td>1700 MB&#x2F;s</td></tr><tr><td><a href="http://www.zlib.net/" target="_blank" rel="noopener">zlib</a> 1.2.11 -1</td><td>2.743</td><td>95 MB&#x2F;s</td><td>400 MB&#x2F;s</td></tr><tr><td>brotli 1.0.9 -0</td><td>2.702</td><td>395 MB&#x2F;s</td><td>450 MB&#x2F;s</td></tr><tr><td><strong>zstd 1.5.1 –fast&#x3D;1</strong></td><td>2.437</td><td>600 MB&#x2F;s</td><td>2150 MB&#x2F;s</td></tr><tr><td><strong>zstd 1.5.1 –fast&#x3D;3</strong></td><td>2.239</td><td>670 MB&#x2F;s</td><td>2250 MB&#x2F;s</td></tr><tr><td>quicklz 1.5.0 -1</td><td>2.238</td><td>540 MB&#x2F;s</td><td>760 MB&#x2F;s</td></tr><tr><td><strong>zstd 1.5.1 –fast&#x3D;4</strong></td><td>2.148</td><td>710 MB&#x2F;s</td><td>2300 MB&#x2F;s</td></tr><tr><td>lzo1x 2.10 -1</td><td>2.106</td><td>660 MB&#x2F;s</td><td>845 MB&#x2F;s</td></tr><tr><td><a href="http://www.lz4.org/" target="_blank" rel="noopener">lz4</a> 1.9.3</td><td>2.101</td><td>740 MB&#x2F;s</td><td>4500 MB&#x2F;s</td></tr><tr><td>lzf 3.6 -1</td><td>2.077</td><td>410 MB&#x2F;s</td><td>830 MB&#x2F;s</td></tr><tr><td>snappy 1.1.9</td><td>2.073</td><td>550 MB&#x2F;s</td><td>1750 MB&#x2F;s</td></tr></tbody></table><p>可以看到 Zstd 可以通过压缩速度为代价获得更高的压缩比，二者之间的权衡可通过 <code>--fast</code> 参数灵活配置。</p><h1 id="何时需要压缩"><a href="#何时需要压缩" class="headerlink" title="何时需要压缩"></a>何时需要压缩</h1><p>压缩是需要额外的 CPU 代价的，并且会带来一定的消息分发延迟，因而在压缩前要慎重考虑是否有必要。笔者认为需考虑以下几方面：</p><ul><li>压缩带来的磁盘空间和带宽节省远大于额外的 CPU 代价，这样的压缩是值得的。</li><li>数据量足够大且具重复性。消息压缩是批量的，低频的数据流可能都无法填满一个批量，会影响压缩比。数据重复性越高，往往压缩效果越好，例如 JSON、XML 等结构化数据；但若数据不具重复性，例如文本都是唯一的 md5 或 UUID 之类，违背了压缩的重复性前提，压缩效果可能不会理想。</li><li>系统对消息分发的延迟没有严苛要求，可容忍轻微的延迟增长。</li></ul><h1 id="如何开启压缩"><a href="#如何开启压缩" class="headerlink" title="如何开启压缩"></a>如何开启压缩</h1><p>Kafka 通过配置属性 <code>compression.type</code> 控制是否压缩。该属性在 producer 端和 broker 端各自都有一份，也就是说，我们可以选择在 producer 或 broker 端开启压缩，对应的应用场景各有不同。</p><h2 id="在-Broker-端开启压缩"><a href="#在-Broker-端开启压缩" class="headerlink" title="在 Broker 端开启压缩"></a>在 Broker 端开启压缩</h2><h3 id="compression-type-属性"><a href="#compression-type-属性" class="headerlink" title="compression.type 属性"></a>compression.type 属性</h3><p>Broker 端的 <code>compression.type</code> 属性默认值为 <code>producer</code>，即直接继承 producer 端所发来消息的压缩方式，无论消息采用何种压缩或者不压缩，broker 都原样存储，这一点可以从如下代码片段看出：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnifiedLog</span>(<span class="params">...</span>) <span class="keyword">extends</span> <span class="title">Logging</span> <span class="keyword">with</span> <span class="title">KafkaMetricsGroup</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">analyzeAndValidateRecords</span></span>(records: <span class="type">MemoryRecords</span>,</span><br><span class="line">                                        origin: <span class="type">AppendOrigin</span>,</span><br><span class="line">                                        ignoreRecordSize: <span class="type">Boolean</span>,</span><br><span class="line">                                        leaderEpoch: <span class="type">Int</span>): <span class="type">LogAppendInfo</span> = &#123;</span><br><span class="line">    records.batches.forEach &#123; batch =&gt;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">val</span> messageCodec = <span class="type">CompressionCodec</span>.getCompressionCodec(batch.compressionType.id)</span><br><span class="line">      <span class="keyword">if</span> (messageCodec != <span class="type">NoCompressionCodec</span>)</span><br><span class="line">        sourceCodec = messageCodec</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Apply broker-side compression if any</span></span><br><span class="line">    <span class="keyword">val</span> targetCodec = <span class="type">BrokerCompressionCodec</span>.getTargetCompressionCodec(config.compressionType, sourceCodec);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> brokerCompressionCodecs = <span class="type">List</span>(<span class="type">UncompressedCodec</span>, <span class="type">ZStdCompressionCodec</span>, <span class="type">LZ4CompressionCodec</span>, <span class="type">SnappyCompressionCodec</span>, <span class="type">GZIPCompressionCodec</span>, <span class="type">ProducerCompressionCodec</span>)</span><br><span class="line">  <span class="keyword">val</span> brokerCompressionOptions: <span class="type">List</span>[<span class="type">String</span>] = brokerCompressionCodecs.map(codec =&gt; codec.name)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValid</span></span>(compressionType: <span class="type">String</span>): <span class="type">Boolean</span> = brokerCompressionOptions.contains(compressionType.toLowerCase(<span class="type">Locale</span>.<span class="type">ROOT</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getCompressionCodec</span></span>(compressionType: <span class="type">String</span>): <span class="type">CompressionCodec</span> = &#123;</span><br><span class="line">    compressionType.toLowerCase(<span class="type">Locale</span>.<span class="type">ROOT</span>) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">UncompressedCodec</span>.name =&gt; <span class="type">NoCompressionCodec</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">CompressionCodec</span>.getCompressionCodec(compressionType)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getTargetCompressionCodec</span></span>(compressionType: <span class="type">String</span>, producerCompression: <span class="type">CompressionCodec</span>): <span class="type">CompressionCodec</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="type">ProducerCompressionCodec</span>.name.equals(compressionType))</span><br><span class="line">      producerCompression</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      getCompressionCodec(compressionType)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sourceCodec</code> 为 <code>recordBatch</code> 上的编码，即表示从 producer 端发来的这批消息的编码。 <code>targetCodec</code> 为 broker 端配置的压缩编码，从函数 <code>getTargetCompressionCodec</code> 可以看出最终存储消息的目标编码是结合 broker 端的 <code>compressionType</code> 和 producer 端的 <code>producerCompression</code> 综合判断的：当 <code>compressionType</code> 为 <code>producer</code> 时直接采用 producer 端的 <code>producerCompression</code>，否则就采用 broker 端自身的编码设置 <code>compressionType</code>。从 <code>brokerCompressionCodecs</code> 的取值可看出，<code>compression.type</code> 的可选值为 <code>[uncompressed, zstd, lz4, snappy, gzip, producer]</code>。其中 <code>uncompressed</code> 与 <code>none</code> 是等价的，<code>producer</code> 不用多说，其余四个则是标准的压缩类型。</p><h3 id="broker-和-topic-两个级别"><a href="#broker-和-topic-两个级别" class="headerlink" title="broker 和 topic 两个级别"></a>broker 和 topic 两个级别</h3><p>在 broker 端的压缩配置分为两个级别：全局的 broker 级别 和 局部的 topic 级别。顾名思义，如果配置的是 broker 级别，则对于该 Kafka 集群中所有的 topic 都是生效的。但如果 topic 级别配置了自己的压缩类型，则会覆盖 broker 全局的配置，以 topic 自己配置的为准。 </p><h4 id="broker-级别"><a href="#broker-级别" class="headerlink" title="broker 级别"></a>broker 级别</h4><p>要配置 broker 级别的压缩类型，可通过 <code>configs</code> 命令修改 <code>compression.type</code> 配置项取值。此处要使修改生效，是否需要重启 broker 取决于 Kafak 的版本，在 1.1.0 之前，任何配置项的改动都需要重启 broker 才生效，而从 1.1.0 版本开始，Kafka 引入了动态 broker 参数，将配置项分为三类：<code>read-only</code>、<code>per-broker</code> 和 <code>cluster-wide</code>，第一类跟原来一样需重启才生效，而后面两类都是动态生效的，只是影响范围不同，关于 Kafka 动态参数，以后单开博文介绍。从 <a href="https://kafka.apache.org/documentation/#brokerconfigs_compression.type" target="_blank" rel="noopener">官网</a> 可以看到，<code>compression.type</code> 是属于 <code>cluster-wide</code> 的，如果是 1.1.0 及之后的版本，则无需重启 broker。</p><h4 id="topic-级别"><a href="#topic-级别" class="headerlink" title="topic 级别"></a>topic 级别</h4><p>topic 的配置分为两部分，一部分是 topic 特有的，如 partitions 等，另一部分则是默认采用 broker 配置，但也可以覆盖。如果要定义 topic 级别的压缩，可以在 topic 创建时通过 –config 选项覆盖配置项 <code>compression.type</code> 的取值，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --create --topic my-topic --replication-factor 1 --partitions 1 --config compression.type=snappy</span><br></pre></td></tr></table></figure><p>当然也可以通过 <code>configs</code> 命令修改 topic 的 <code>compression.type</code> 取值，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-configs.sh --entity-type topics --entity-name my-topic --alter --add-config compression.type=snappy</span><br></pre></td></tr></table></figure><h2 id="在-Producer-端压缩"><a href="#在-Producer-端压缩" class="headerlink" title="在 Producer 端压缩"></a>在 Producer 端压缩</h2><h3 id="compression-type-属性-1"><a href="#compression-type-属性-1" class="headerlink" title="compression.type 属性"></a>compression.type 属性</h3><p>跟 broker 端一样，producer 端的压缩配置属性依然是 <code>compression.type</code>，只不过默认值和可选值有所不同。默认值为 <code>none</code>，表示不压缩，可选值为枚举类 <code>CompressionType</code> 中所有实例对应 <code>name</code> 的列表。</p><h3 id="开启压缩的方式"><a href="#开启压缩的方式" class="headerlink" title="开启压缩的方式"></a>开启压缩的方式</h3><p>直接在代码层面更改 producer 的 config，示例如下。但需要注意的是，改完 config 之后，需要重启 producer 端的应用程序，压缩才会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaTemplate&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; kafkaTemplate() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; config = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerServer);</span><br><span class="line">        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, keySerializer);</span><br><span class="line">        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer);</span><br><span class="line">        config.put(ProducerConfig.ACKS_CONFIG, <span class="string">"all"</span>);</span><br><span class="line">        config.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, <span class="string">"1"</span>);</span><br><span class="line">        config.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="string">"16384"</span>);</span><br><span class="line">        config.put(ProducerConfig.RETRIES_CONFIG, Integer.MAX_VALUE);</span><br><span class="line">        config.put(ProducerConfig.RETRY_BACKOFF_MS_CONFIG, <span class="string">"3000"</span>);</span><br><span class="line">        config.put(ProducerConfig.LINGER_MS_CONFIG, <span class="string">"1"</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 开启 Snappy 压缩</span></span><br><span class="line">        config.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, CompressionType.SNAPPY.name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaTemplate&lt;&gt;(<span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(config));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压缩和解压的位置"><a href="#压缩和解压的位置" class="headerlink" title="压缩和解压的位置"></a>压缩和解压的位置</h1><h2 id="何处会压缩"><a href="#何处会压缩" class="headerlink" title="何处会压缩"></a>何处会压缩</h2><p>可能产生压缩的地方有两处：producer 端和 broker 端。</p><h3 id="producer-端"><a href="#producer-端" class="headerlink" title="producer 端"></a>producer 端</h3><p>producer 端发生压缩的唯一条件就是在 producer 端为属性 <code>compression.type</code> 配置了除 <code>none</code> 之外有效的压缩类型。此时，producer 在向所负责的所有 topics 发消息之前，都会将消息压缩处理。</p><h3 id="broker-端"><a href="#broker-端" class="headerlink" title="broker 端"></a>broker 端</h3><p>对于 broker 端，产生压缩的情况就复杂得多，这不仅取决于 broker 端自身的压缩编码 <code>targetCodec</code> 是否是需要压缩的类型，还取决于 <code>targetCodec</code> 跟 producer 端的 <code>sourceCodec</code> 是否相同，除此之外，还跟消息格式的 <code>magic</code> 版本有关。直接看代码，broker 端的消息读写是由 <code>UnifiedLog</code> 负责的，消息持久化的核心入口是 <code>append</code> 方法，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnifiedLog</span>(<span class="params">...</span>) <span class="keyword">extends</span> <span class="title">Logging</span> <span class="keyword">with</span> <span class="title">KafkaMetricsGroup</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">append</span></span>(records: <span class="type">MemoryRecords</span>,</span><br><span class="line">                     origin: <span class="type">AppendOrigin</span>,</span><br><span class="line">                     interBrokerProtocolVersion: <span class="type">ApiVersion</span>,</span><br><span class="line">                     validateAndAssignOffsets: <span class="type">Boolean</span>,</span><br><span class="line">                     leaderEpoch: <span class="type">Int</span>,</span><br><span class="line">                     requestLocal: <span class="type">Option</span>[<span class="type">RequestLocal</span>],</span><br><span class="line">                     ignoreRecordSize: <span class="type">Boolean</span>): <span class="type">LogAppendInfo</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">val</span> appendInfo = analyzeAndValidateRecords(records, origin, ignoreRecordSize, leaderEpoch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return if we have no valid messages or if this is a duplicate of the last appended entry</span></span><br><span class="line">    <span class="keyword">if</span> (appendInfo.shallowCount == <span class="number">0</span>) appendInfo</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// trim any invalid bytes or partial messages before appending it to the on-disk log</span></span><br><span class="line">      <span class="keyword">var</span> validRecords = trimInvalidBytes(records, appendInfo)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// they are valid, insert them in the log</span></span><br><span class="line">      lock synchronized &#123;</span><br><span class="line">        maybeHandleIOException(<span class="string">s"Error while appending records to <span class="subst">$topicPartition</span> in dir <span class="subst">$&#123;dir.getParent&#125;</span>"</span>) &#123;</span><br><span class="line">          localLog.checkIfMemoryMappedBufferClosed()</span><br><span class="line">          <span class="keyword">if</span> (validateAndAssignOffsets) &#123;</span><br><span class="line">            <span class="comment">// assign offsets to the message set</span></span><br><span class="line">            <span class="keyword">val</span> offset = <span class="keyword">new</span> <span class="type">LongRef</span>(localLog.logEndOffset)</span><br><span class="line">            appendInfo.firstOffset = <span class="type">Some</span>(<span class="type">LogOffsetMetadata</span>(offset.value))</span><br><span class="line">            <span class="keyword">val</span> now = time.milliseconds</span><br><span class="line">            <span class="keyword">val</span> validateAndOffsetAssignResult = <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">LogValidator</span>.validateMessagesAndAssignOffsets(validRecords,</span><br><span class="line">                topicPartition,</span><br><span class="line">                offset,</span><br><span class="line">                time,</span><br><span class="line">                now,</span><br><span class="line">                appendInfo.sourceCodec,</span><br><span class="line">                appendInfo.targetCodec,</span><br><span class="line">                config.compact,</span><br><span class="line">                config.recordVersion.value,</span><br><span class="line">                config.messageTimestampType,</span><br><span class="line">                config.messageTimestampDifferenceMaxMs,</span><br><span class="line">                leaderEpoch,</span><br><span class="line">                origin,</span><br><span class="line">                interBrokerProtocolVersion,</span><br><span class="line">                brokerTopicStats,</span><br><span class="line">                requestLocal.getOrElse(<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(</span><br><span class="line">                  <span class="string">"requestLocal should be defined if assignOffsets is true"</span>)))</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">              <span class="keyword">case</span> e: <span class="type">IOException</span> =&gt;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">KafkaException</span>(<span class="string">s"Error validating messages while appending to log <span class="subst">$name</span>"</span>, e)</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we are taking the offsets we are given</span></span><br><span class="line">            ...</span><br><span class="line">          &#125;</span><br><span class="line">          ...</span><br><span class="line">          maybeDuplicate <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Some</span>(duplicate) =&gt;</span><br><span class="line">              ...</span><br><span class="line">              localLog.append(appendInfo.lastOffset, appendInfo.maxTimestamp, appendInfo.offsetOfMaxTimestamp, validRecords)</span><br><span class="line">              updateHighWatermarkWithLogEndOffset()</span><br><span class="line">              ...</span><br><span class="line">              trace(<span class="string">s"Appended message set with last offset: <span class="subst">$&#123;appendInfo.lastOffset&#125;</span>, "</span> +</span><br><span class="line">                <span class="string">s"first offset: <span class="subst">$&#123;appendInfo.firstOffset&#125;</span>, "</span> +</span><br><span class="line">                <span class="string">s"next offset: <span class="subst">$&#123;localLog.logEndOffset&#125;</span>, "</span> +</span><br><span class="line">                <span class="string">s"and messages: <span class="subst">$validRecords</span>"</span>)</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (localLog.unflushedMessages &gt;= config.flushInterval) flush(<span class="literal">false</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          appendInfo</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，先是采用 <code>analyzeAndValidateRecords</code> 在 <code>recordBatch</code> 的维度对批量消息整体做校验，比如 CRC、size 等，不会细化到单条消息，所以这里不会涉及解压。这一步通过之后，会采用 <code>LogValidator.validateMessagesAndAssignOffsets</code> 对 <code>recordBatch</code>以及单条消息做进一步验证并为消息分配 <code>offset</code>，<strong>该过程可能涉及解压</strong>。完成这一步之后，调用 <code>localLog.append</code> 方法将消息追加到本地日志，这一步才是真正的落盘。我们继续关注可能发生解压的 <code>LogValidator</code> 部分，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[log] <span class="class"><span class="keyword">object</span> <span class="title">LogValidator</span> <span class="keyword">extends</span> <span class="title">Logging</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span>[log] <span class="function"><span class="keyword">def</span> <span class="title">validateMessagesAndAssignOffsets</span></span>(records: <span class="type">MemoryRecords</span>,</span><br><span class="line">                                                    topicPartition: <span class="type">TopicPartition</span>,</span><br><span class="line">                                                    offsetCounter: <span class="type">LongRef</span>,</span><br><span class="line">                                                    time: <span class="type">Time</span>,</span><br><span class="line">                                                    now: <span class="type">Long</span>,</span><br><span class="line">                                                    sourceCodec: <span class="type">CompressionCodec</span>,</span><br><span class="line">                                                    targetCodec: <span class="type">CompressionCodec</span>,</span><br><span class="line">                                                    compactedTopic: <span class="type">Boolean</span>,</span><br><span class="line">                                                    magic: <span class="type">Byte</span>,</span><br><span class="line">                                                    timestampType: <span class="type">TimestampType</span>,</span><br><span class="line">                                                    timestampDiffMaxMs: <span class="type">Long</span>,</span><br><span class="line">                                                    partitionLeaderEpoch: <span class="type">Int</span>,</span><br><span class="line">                                                    origin: <span class="type">AppendOrigin</span>,</span><br><span class="line">                                                    interBrokerProtocolVersion: <span class="type">ApiVersion</span>,</span><br><span class="line">                                                    brokerTopicStats: <span class="type">BrokerTopicStats</span>,</span><br><span class="line">                                                    requestLocal: <span class="type">RequestLocal</span>): <span class="type">ValidationAndOffsetAssignResult</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (sourceCodec == <span class="type">NoCompressionCodec</span> &amp;&amp; targetCodec == <span class="type">NoCompressionCodec</span>) &#123;</span><br><span class="line">      <span class="comment">// check the magic value</span></span><br><span class="line">      <span class="keyword">if</span> (!records.hasMatchingMagic(magic))</span><br><span class="line">        convertAndAssignOffsetsNonCompressed(records, topicPartition, offsetCounter, compactedTopic, time, now, timestampType,</span><br><span class="line">          timestampDiffMaxMs, magic, partitionLeaderEpoch, origin, brokerTopicStats)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// Do in-place validation, offset assignment and maybe set timestamp</span></span><br><span class="line">        assignOffsetsNonCompressed(records, topicPartition, offsetCounter, now, compactedTopic, timestampType, timestampDiffMaxMs,</span><br><span class="line">          partitionLeaderEpoch, origin, magic, brokerTopicStats)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      validateMessagesAndAssignOffsetsCompressed(records, topicPartition, offsetCounter, time, now, sourceCodec,</span><br><span class="line">        targetCodec, compactedTopic, magic, timestampType, timestampDiffMaxMs, partitionLeaderEpoch, origin,</span><br><span class="line">        interBrokerProtocolVersion, brokerTopicStats, requestLocal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上可知，当 broker 端配置的压缩编码 <code>targetCodec</code> 与所收到的批量消息的压缩编码 <code>sourceCodec</code> 都为 <code>none</code> 即不压缩时，会再检查消息格式的版本，如果与 broker 端配置的版本不同，则需要先将原批量消息转换为目标版本 <code>magic</code> 对应格式的新批量消息，然后再在新批量消息中分配 <code>offset</code>；否则直接在原批量消息中就地分配 <code>offset</code>，此过程均不涉及解压缩。这里稍微解释下分配 <code>offset</code> 的逻辑，我们知道在 Kafka 中 <code>offset</code> 是 <code>partition</code> 下每条消息的唯一标识，consumer 端也是根据 <code>offset</code> 来追踪消费进度，而 <code>offset</code> 的生成和写入则是在 broker 端，就是此处提到的 <code>offset</code> 分配。理论上说，broker 需要为每条消息都分配一个 <code>offset</code> 的，但在实践中，因为用的是 <code>recordBatch</code>，内部消息是顺序排列的且总记录数是知道的，而 <code>recordBatch</code> 本身会记录 <code>baseOffset</code> ，故通常只需设置 <code>lastOffset</code>即可。唯一的例外是，当因消息格式转换或解压缩而需要创建新的 <code>recordBatch</code>时，会调用 <code>memoryRecordsBuilder</code> 的 <code>appendWithOffset</code> 方法为每一条消息记录分配 <code>offset</code>。</p><p>当 <code>targetCodec</code> 与 <code>sourceCodec</code> 至少有一个不为 <code>none</code> 即需要压缩时，情况就复杂一些，具体逻辑都在 <code>validateMessagesAndAssignOffsetsCompressed</code>方法中，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[log] <span class="class"><span class="keyword">object</span> <span class="title">LogValidator</span> <span class="keyword">extends</span> <span class="title">Logging</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">validateMessagesAndAssignOffsetsCompressed</span></span>(...): <span class="type">ValidationAndOffsetAssignResult</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// No in place assignment situation 1</span></span><br><span class="line">    <span class="keyword">var</span> inPlaceAssignment = sourceCodec == targetCodec</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> maxTimestamp = <span class="type">RecordBatch</span>.<span class="type">NO_TIMESTAMP</span></span><br><span class="line">    <span class="keyword">val</span> expectedInnerOffset = <span class="keyword">new</span> <span class="type">LongRef</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> validatedRecords = <span class="keyword">new</span> mutable.<span class="type">ArrayBuffer</span>[<span class="type">Record</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> uncompressedSizeInBytes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assume there's only one batch with compressed memory records; otherwise, return InvalidRecordException</span></span><br><span class="line">    <span class="comment">// One exception though is that with format smaller than v2, if sourceCodec is noCompression, then each batch is actually</span></span><br><span class="line">    <span class="comment">// a single record so we'd need to special handle it by creating a single wrapper batch that includes all the records</span></span><br><span class="line">    <span class="keyword">val</span> firstBatch = getFirstBatchAndMaybeValidateNoMoreBatches(records, sourceCodec)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No in place assignment situation 2 and 3: we only need to check for the first batch because:</span></span><br><span class="line">    <span class="comment">//  1. For most cases (compressed records, v2, for example), there's only one batch anyways.</span></span><br><span class="line">    <span class="comment">//  2. For cases that there may be multiple batches, all batches' magic should be the same.</span></span><br><span class="line">    <span class="keyword">if</span> (firstBatch.magic != toMagic || toMagic == <span class="type">RecordBatch</span>.<span class="type">MAGIC_VALUE_V0</span>)</span><br><span class="line">      inPlaceAssignment = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not compress control records unless they are written compressed</span></span><br><span class="line">    <span class="keyword">if</span> (sourceCodec == <span class="type">NoCompressionCodec</span> &amp;&amp; firstBatch.isControlBatch)</span><br><span class="line">      inPlaceAssignment = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    records.batches.forEach &#123; batch =&gt;</span><br><span class="line">      validateBatch(topicPartition, firstBatch, batch, origin, toMagic, brokerTopicStats)</span><br><span class="line">      uncompressedSizeInBytes += <span class="type">AbstractRecords</span>.recordBatchHeaderSizeInBytes(toMagic, batch.compressionType())</span><br><span class="line"></span><br><span class="line">      <span class="comment">// if we are on version 2 and beyond, and we know we are going for in place assignment,</span></span><br><span class="line">      <span class="comment">// then we can optimize the iterator to skip key / value / headers since they would not be used at all</span></span><br><span class="line">      <span class="keyword">val</span> recordsIterator = <span class="keyword">if</span> (inPlaceAssignment &amp;&amp; firstBatch.magic &gt;= <span class="type">RecordBatch</span>.<span class="type">MAGIC_VALUE_V2</span>)</span><br><span class="line">        batch.skipKeyValueIterator(requestLocal.bufferSupplier)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        batch.streamingIterator(requestLocal.bufferSupplier)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> recordErrors = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">ApiRecordError</span>](<span class="number">0</span>)</span><br><span class="line">        <span class="comment">// this is a hot path and we want to avoid any unnecessary allocations.</span></span><br><span class="line">        <span class="keyword">var</span> batchIndex = <span class="number">0</span></span><br><span class="line">        recordsIterator.forEachRemaining &#123; record =&gt;</span><br><span class="line">          <span class="keyword">val</span> expectedOffset = expectedInnerOffset.getAndIncrement()</span><br><span class="line">          <span class="keyword">val</span> recordError = validateRecordCompression(batchIndex, record).orElse &#123;</span><br><span class="line">            validateRecord(batch, topicPartition, record, batchIndex, now,</span><br><span class="line">              timestampType, timestampDiffMaxMs, compactedTopic, brokerTopicStats).orElse &#123;</span><br><span class="line">              <span class="keyword">if</span> (batch.magic &gt; <span class="type">RecordBatch</span>.<span class="type">MAGIC_VALUE_V0</span> &amp;&amp; toMagic &gt; <span class="type">RecordBatch</span>.<span class="type">MAGIC_VALUE_V0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (record.timestamp &gt; maxTimestamp)</span><br><span class="line">                  maxTimestamp = record.timestamp</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Some older clients do not implement the V1 internal offsets correctly.</span></span><br><span class="line">                <span class="comment">// Historically the broker handled this by rewriting the batches rather</span></span><br><span class="line">                <span class="comment">// than rejecting the request. We must continue this handling here to avoid</span></span><br><span class="line">                <span class="comment">// breaking these clients.</span></span><br><span class="line">                <span class="keyword">if</span> (record.offset != expectedOffset)</span><br><span class="line">                  inPlaceAssignment = <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="type">None</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          recordError <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Some</span>(e) =&gt; recordErrors += e</span><br><span class="line">            <span class="keyword">case</span> <span class="type">None</span> =&gt;</span><br><span class="line">              uncompressedSizeInBytes += record.sizeInBytes()</span><br><span class="line">              validatedRecords += record</span><br><span class="line">          &#125;</span><br><span class="line">         batchIndex += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        processRecordErrors(recordErrors)</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        recordsIterator.close()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!inPlaceAssignment) &#123;</span><br><span class="line">      <span class="keyword">val</span> (producerId, producerEpoch, sequence, isTransactional) = &#123;</span><br><span class="line">        <span class="comment">// note that we only reassign offsets for requests coming straight from a producer. For records with magic V2,</span></span><br><span class="line">        <span class="comment">// there should be exactly one RecordBatch per request, so the following is all we need to do. For Records</span></span><br><span class="line">        <span class="comment">// with older magic versions, there will never be a producer id, etc.</span></span><br><span class="line">        <span class="keyword">val</span> first = records.batches.asScala.head</span><br><span class="line">        (first.producerId, first.producerEpoch, first.baseSequence, first.isTransactional)</span><br><span class="line">      &#125;</span><br><span class="line">      buildRecordsAndAssignOffsets(toMagic, offsetCounter, time, timestampType, <span class="type">CompressionType</span>.forId(targetCodec.codec),</span><br><span class="line">        now, validatedRecords, producerId, producerEpoch, sequence, isTransactional, partitionLeaderEpoch,</span><br><span class="line">        uncompressedSizeInBytes)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// we can update the batch only and write the compressed payload as is;</span></span><br><span class="line">      <span class="comment">// again we assume only one record batch within the compressed set</span></span><br><span class="line">      <span class="keyword">val</span> batch = records.batches.iterator.next()</span><br><span class="line">      <span class="keyword">val</span> lastOffset = offsetCounter.addAndGet(validatedRecords.size) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      batch.setLastOffset(lastOffset)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timestampType == <span class="type">TimestampType</span>.<span class="type">LOG_APPEND_TIME</span>)</span><br><span class="line">        maxTimestamp = now</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (toMagic &gt;= <span class="type">RecordBatch</span>.<span class="type">MAGIC_VALUE_V1</span>)</span><br><span class="line">        batch.setMaxTimestamp(timestampType, maxTimestamp)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (toMagic &gt;= <span class="type">RecordBatch</span>.<span class="type">MAGIC_VALUE_V2</span>)</span><br><span class="line">        batch.setPartitionLeaderEpoch(partitionLeaderEpoch)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> recordConversionStats = <span class="keyword">new</span> <span class="type">RecordConversionStats</span>(uncompressedSizeInBytes, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="type">ValidationAndOffsetAssignResult</span>(validatedRecords = records,</span><br><span class="line">        maxTimestamp = maxTimestamp,</span><br><span class="line">        shallowOffsetOfMaxTimestamp = lastOffset,</span><br><span class="line">        messageSizeMaybeChanged = <span class="literal">false</span>,</span><br><span class="line">        recordConversionStats = recordConversionStats)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>inPlaceAssignment</code> 是用于标识是否可以原地修改 <code>recordBatch</code> 来分配 <code>offset</code>，有三种情况不能原地修改：</p><ul><li>sourceCodec 和 targetCodec 不同，这个比较好理解，编码不同，构建目标 payload 时原 <code>recordBatch</code>  自然不能复用。</li><li>目标消息格式版本 <code>magic</code> 与 broker 接收到的 <code>recordBatch</code> 的 <code>magic</code> 不同，此时需要消息格式转换，需要构建新的 <code>recordBatch</code>，这个跟第一种情况是一样的，无法复用原 <code>recordBatch</code>。</li><li>目标消息格式版本为 <code>V0</code>，因为老版本 <code>V0</code> 格式的消息，需要为每条消息重新分配绝对 <code>offset</code>，无法复用原 <code>recordBatch</code>。</li></ul><p>此时，<code>inPlaceAssignment</code> 为 false，直接走 <code>buildRecordsAndAssignOffsets</code> 逻辑来构建新的 <code>recordBatch</code>，此时是否压缩取决于 <code>targetCodec</code>，如果不为<code>none</code>，则此处会按照 <code>targetCodec</code> 编码进行压缩。</p><p>除了上述三种情况之外，都是可以原地修改，此时可以直接复用原 <code>recordBatch</code>来构建目标消息的 payload，此时不存在压缩处理。</p><h2 id="何处会解压"><a href="#何处会解压" class="headerlink" title="何处会解压"></a>何处会解压</h2><p>可能发生解压的地方依然是两处：consumer 端和 broker 端。</p><h3 id="consumer-端"><a href="#consumer-端" class="headerlink" title="consumer 端"></a>consumer 端</h3><p>consumer 端发生解压的唯一条件就是从 broker 端拉取到的消息是带压缩的。此时，consumer 会根据 <code>recordBatch</code> 中 <code>compressionType</code> 来对消息进行解压，具体细节后面源码分析部分会讲。</p><h3 id="broker-端-1"><a href="#broker-端-1" class="headerlink" title="broker 端"></a>broker 端</h3><p>broker 端是否发生解压取决于 producer 发过来的批量消息 <code>recordBatch</code> 是否是压缩的：如果 producer 开启了压缩，则会发生解压，否则不会。原因简单说下，在 broker 端持久化消息前，会对消息做各种验证，此时必然会迭代 <code>recordBatch</code>，而在迭代的过程中，会直接采用 <code>recordBatch</code> 上的 <code>compressionType</code> 对消息字节流进行处理，是否解压取决于 <code>compressionType</code> 是否是压缩类型。关于这点，可以在 <code>LogValidator</code> 的 <code>validateMessagesAndAssignOffsets</code> 方法实现中可以看到，在 <code>convertAndAssignOffsetsNonCompressed</code>、<code>assignOffsetsNonCompressed</code> 和 <code>validateMessagesAndAssignOffsetsCompressed</code> 三个不同的分支中，都会看到 <code>records.batches.forEach {...}</code> 的身影，而在后面的源码分析中会发现，在 <code>recordBatch</code> 的迭代器逻辑中，直接采用的 <code>compressionType</code> 的解压逻辑对消息字节流读取的。也就是说，如果 <code>recordBatch</code> 是压缩的 ，只要对其进行了迭代访问，则会自动触发解压逻辑。</p><h1 id="压缩和解压原理"><a href="#压缩和解压原理" class="headerlink" title="压缩和解压原理"></a>压缩和解压原理</h1><p>压缩和解压涉及到几个关键的类：<code>CompressionType</code> 、<code>MemoryRecordsBuilder</code>、<code>DefaultRecordBatch</code>、<code>AbstractLegacyRecordBatch</code>。其中 <code>CompressionType</code> 是压缩相关的枚举，集压缩定义和实现为一体；<code>MemoryRecordsBuilder</code> 是负责将新的消息数据写入内存 buffer，即调用 <code>CompressionType</code> 中的压缩逻辑 <code>wrapForOutput</code> 来写入消息；而 <code>DefaultRecordBatch</code> 和 <code>AbstractLegacyRecordBatch</code> 则是负责读取消息数据，即调用 <code>CompressionType</code> 的解压逻辑 <code>wrapForInput</code> 将消息还原为无压缩数据。只不过二者区别是，前者是用于处理新版本格式的消息（即 <code>magic &gt;= 2</code>），而后者则是处理老版本格式的消息（即 <code>magic 为 0 或 1</code>）。</p><h2 id="CompressionType"><a href="#CompressionType" class="headerlink" title="CompressionType"></a>CompressionType</h2><p>在说 <code>CompressionType</code> 之前，我们先看下 <code>CompressionCodec</code> 这个 Scala 脚本。</p><h3 id="CompressionCodec"><a href="#CompressionCodec" class="headerlink" title="CompressionCodec"></a>CompressionCodec</h3><p>部分源码如下，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">GZIPCompressionCodec</span> <span class="keyword">extends</span> <span class="title">CompressionCodec</span> <span class="keyword">with</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> codec = <span class="number">1</span></span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"gzip"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">SnappyCompressionCodec</span> <span class="keyword">extends</span> <span class="title">CompressionCodec</span> <span class="keyword">with</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> codec = <span class="number">2</span></span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"snappy"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">LZ4CompressionCodec</span> <span class="keyword">extends</span> <span class="title">CompressionCodec</span> <span class="keyword">with</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> codec = <span class="number">3</span></span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"lz4"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">ZStdCompressionCodec</span> <span class="keyword">extends</span> <span class="title">CompressionCodec</span> <span class="keyword">with</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> codec = <span class="number">4</span></span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"zstd"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">NoCompressionCodec</span> <span class="keyword">extends</span> <span class="title">CompressionCodec</span> <span class="keyword">with</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> codec = <span class="number">0</span></span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"none"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">UncompressedCodec</span> <span class="keyword">extends</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"uncompressed"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">ProducerCompressionCodec</span> <span class="keyword">extends</span> <span class="title">BrokerCompressionCodec</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"producer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该脚本定义了 <code>GZIPCompressionCodec</code> 等共 7 个 case object，可类比于 Java 中枚举，这些 case object 中的 <code>name</code> 集合则刚好覆盖了前文所提到的属性 <code>compression.type</code> 的所有可选值，包括 producer 端和 broker 端的。而与 <code>name</code> 绑定在一起的 <code>codec</code> 则是最终真正写入消息体的压缩编码，<code>name</code> 只是为了可读性友好。从上可知，压缩编码<code>codec</code> 的有效取值只有 <code>0~4</code>，分别对应 <code>none</code>、<code>gzip</code>、<code>snappy</code>、<code>lz4</code>和<code>zstd</code>，而这五种取值恰好是 <code>CompressionType</code> 中定义的五种枚举常量。</p><p>由此可知，<code>CompressionCodec</code>是面向配置属性 <code>compression.type</code>的可选值的，并将数值化的压缩编码 <code>codec</code> 映射为可读性强的 <code>name</code>；而 <code>CompressionType</code>则是定义了与压缩编码对应的枚举常量，二者通过 <code>name</code> 关联。</p><h3 id="CompressionType-源码"><a href="#CompressionType-源码" class="headerlink" title="CompressionType 源码"></a>CompressionType 源码</h3><p><code>CompressionType</code> 定义了与压缩编码对应的五种压缩类型枚举，并且通过用于压缩的 <code>wrapForOutput</code>和用于解压的 <code>wrapForInput</code>这两个抽象方法将每种压缩类型与对应的压缩实现绑定在一起，既避免了常规的 <code>if-else</code> 判断，也将压缩的定义与实现完全收敛到 <code>CompressionType</code> ，符合单一职责原则。其实类似这种优雅的设计在 JDK 中也能经常看到其身影，比如 <code>TimeUnit</code>。直接看源码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CompressionType &#123;</span><br><span class="line">    ...</span><br><span class="line">    GZIP(<span class="number">1</span>, <span class="string">"gzip"</span>, <span class="number">1.0f</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> OutputStream <span class="title">wrapForOutput</span><span class="params">(ByteBufferOutputStream buffer, <span class="keyword">byte</span> messageVersion)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> GZIPOutputStream(buffer, <span class="number">8</span> * <span class="number">1024</span>), <span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KafkaException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InputStream <span class="title">wrapForInput</span><span class="params">(ByteBuffer buffer, <span class="keyword">byte</span> messageVersion, BufferSupplier decompressionBufferSupplier)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Set output buffer (uncompressed) to 16 KB (none by default) and input buffer (compressed) to</span></span><br><span class="line">                <span class="comment">// 8 KB (0.5 KB by default) to ensure reasonable performance in cases where the caller reads a small</span></span><br><span class="line">                <span class="comment">// number of bytes (potentially a single byte)</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> GZIPInputStream(<span class="keyword">new</span> ByteBufferInputStream(buffer), <span class="number">8</span> * <span class="number">1024</span>),</span><br><span class="line">                        <span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KafkaException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    ZSTD(<span class="number">4</span>, <span class="string">"zstd"</span>, <span class="number">1.0f</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> OutputStream <span class="title">wrapForOutput</span><span class="params">(ByteBufferOutputStream buffer, <span class="keyword">byte</span> messageVersion)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ZstdFactory.wrapForOutput(buffer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InputStream <span class="title">wrapForInput</span><span class="params">(ByteBuffer buffer, <span class="keyword">byte</span> messageVersion, BufferSupplier decompressionBufferSupplier)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ZstdFactory.wrapForInput(buffer, messageVersion, decompressionBufferSupplier);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Wrap bufferStream with an OutputStream that will compress data with this CompressionType.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> OutputStream <span class="title">wrapForOutput</span><span class="params">(ByteBufferOutputStream bufferStream, <span class="keyword">byte</span> messageVersion)</span></span>;</span><br><span class="line">    <span class="comment">// Wrap buffer with an InputStream that will decompress data with this CompressionType.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> InputStream <span class="title">wrapForInput</span><span class="params">(ByteBuffer buffer, <span class="keyword">byte</span> messageVersion, BufferSupplier decompressionBufferSupplier)</span></span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种压缩类型对于 <code>wrapForOutput</code> 和 <code>wrapForInput</code> 两方法的具体实现已经很清楚地阐述了压缩和解压的方式，感兴趣的朋友可以从该入口 <code>step in</code> 一探究竟。这里就不细述。当然这只是处理压缩最小的基本单元，为了搞清楚 Kafka 在何处使用它，还得继续看其他几个核心类。</p><p>在此之前，就上述源码，抛开本次主题，我还想谈几个值得学习借鉴的细节，</p><blockquote><ol><li><code>Snappy</code> 和 <code>Zstd</code> 都是用的 <code>XXXFactory</code> 静态方法来构建 Stream 对象，而其他的比如 <code>Lz4</code> 则都是直接通过 <code>new</code> 创建的对象。之所以这么做，我们进一步 <code>step in</code> 就会发现，对于 <code>Snappy</code> 和 <code>Zstd</code>，Kafka 都是直接依赖的第三方库，而其他的则是 JDK 或 Kafka 自己的实现。为了减少第三方库的副作用，<strong>通过此方式将第三方库的类的惰性加载做到极致，这也体现出作者对 Java 类加载时机的充分理解，很精致的处理</strong>。</li><li><code>Gzip</code> 的<code>wrapForInput</code>实现中，在 <a href="https://issues.apache.org/jira/browse/KAFKA-6430" target="_blank" rel="noopener">KAFKA-6430</a> 这个 Improvement 提交中，input buffer 从 0.5 KB 调大到 8 KB，其目的就是能够在一次 Gzip 压缩中处理更多的字节，以获得更高的性能。至少，从 commit 的描述上看，throughput 能翻倍。</li><li>抽象方法 <code>wrapForInput</code> 中暴露的最后一个 BufferSupplier类型的参数 <code>decompressionBufferSupplier</code>，正如方法的参数说明所言，对于比较小的批量消息，如果在 <code>wrapForInput</code> 内部新建 buffer，那么每次方法调用都会新分配buffer，这可能比压缩处理本身更耗时，所以该参数给了一个选择的机会，在外面分配内存，然后方法内循环利用。<strong>在日常的编码中，对于循环中所需的空间，我也经常会思考是每次新建好还是先在外面分配，然后内部循环利用更好，case by case</strong>.</li></ol></blockquote><h2 id="MemoryRecordsBuilder"><a href="#MemoryRecordsBuilder" class="headerlink" title="MemoryRecordsBuilder"></a>MemoryRecordsBuilder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryRecordsBuilder</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Used to append records, may compress data on the fly</span></span><br><span class="line">    <span class="keyword">private</span> DataOutputStream appendStream;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryRecordsBuilder</span><span class="params">(ByteBufferOutputStream bufferStream,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">byte</span> magic,</span></span></span><br><span class="line"><span class="function"><span class="params">                                CompressionType compressionType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                TimestampType timestampType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">long</span> baseOffset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">long</span> logAppendTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">long</span> producerId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">short</span> producerEpoch,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> baseSequence,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">boolean</span> isTransactional,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">boolean</span> isControlBatch,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> partitionLeaderEpoch,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> writeLimit,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">long</span> deleteHorizonMs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (magic &gt; RecordBatch.MAGIC_VALUE_V0 &amp;&amp; timestampType == TimestampType.NO_TIMESTAMP_TYPE)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"TimestampType must be set for magic &gt; 0"</span>);</span><br><span class="line">        <span class="keyword">if</span> (magic &lt; RecordBatch.MAGIC_VALUE_V2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTransactional)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Transactional records are not supported for magic "</span> + magic);</span><br><span class="line">            <span class="keyword">if</span> (isControlBatch)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Control records are not supported for magic "</span> + magic);</span><br><span class="line">            <span class="keyword">if</span> (compressionType == CompressionType.ZSTD)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"ZStandard compression is not supported for magic "</span> + magic);</span><br><span class="line">            <span class="keyword">if</span> (deleteHorizonMs != RecordBatch.NO_TIMESTAMP)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Delete horizon timestamp is not supported for magic "</span> + magic);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.appendStream = <span class="keyword">new</span> DataOutputStream(compressionType.wrapForOutput(<span class="keyword">this</span>.bufferStream, magic));</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (numRecords == <span class="number">0L</span>) &#123;</span><br><span class="line">            buffer().position(initialPosition);</span><br><span class="line">            builtRecords = MemoryRecords.EMPTY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (magic &gt; RecordBatch.MAGIC_VALUE_V1)</span><br><span class="line">                <span class="keyword">this</span>.actualCompressionRatio = (<span class="keyword">float</span>) writeDefaultBatchHeader() / <span class="keyword">this</span>.uncompressedRecordsSizeInBytes;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (compressionType != CompressionType.NONE)</span><br><span class="line">                <span class="keyword">this</span>.actualCompressionRatio = (<span class="keyword">float</span>) writeLegacyCompressedWrapperHeader() / <span class="keyword">this</span>.uncompressedRecordsSizeInBytes;</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = buffer().duplicate();</span><br><span class="line">            buffer.flip();</span><br><span class="line">            buffer.position(initialPosition);</span><br><span class="line">            builtRecords = MemoryRecords.readableRecords(buffer.slice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">writeDefaultBatchHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        DefaultRecordBatch.writeHeader(buffer, baseOffset, offsetDelta, size, magic, compressionType, timestampType,</span><br><span class="line">                baseTimestamp, maxTimestamp, producerId, producerEpoch, baseSequence, isTransactional, isControlBatch,</span><br><span class="line">                hasDeleteHorizonMs(), partitionLeaderEpoch, numRecords);</span><br><span class="line"></span><br><span class="line">        buffer.position(pos);</span><br><span class="line">        <span class="keyword">return</span> writtenCompressed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">writeLegacyCompressedWrapperHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">int</span> wrapperSize = pos - initialPosition - Records.LOG_OVERHEAD;</span><br><span class="line">        <span class="keyword">int</span> writtenCompressed = wrapperSize - LegacyRecord.recordOverhead(magic);</span><br><span class="line">        AbstractLegacyRecordBatch.writeHeader(buffer, lastOffset, wrapperSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> timestamp = timestampType == TimestampType.LOG_APPEND_TIME ? logAppendTime : maxTimestamp;</span><br><span class="line">        LegacyRecord.writeCompressedRecordHeader(buffer, magic, wrapperSize, timestamp, compressionType, timestampType);</span><br><span class="line"></span><br><span class="line">        buffer.position(pos);</span><br><span class="line">        <span class="keyword">return</span> writtenCompressed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>appendStream</code> 是用于追加消息到内存 buffer 的，直接采用的 <code>compressionType</code> 的压缩逻辑来构建写入流的，如果此处 <code>compressionType</code>属于非 <code>none</code> 的有效压缩类型，则会产生压缩。此外，从上面 <code>magic</code> 的判断逻辑可知，消息的时间戳类型是从大版本 <code>V1</code> 开始支持的；而事务消息、控制消息、Zstd 压缩和 <code>deleteHorizonMs</code>都是从 <code>V2</code> 才开始支持的。这里的 <code>V1</code>、<code>V2</code> 对应消息格式的版本，其中 <code>V1</code> 是从 0.10.0 版本开始引入的，在此之前都是 <code>V0</code> 版本，而 <code>V2</code> 则是从 0.11.0 版本开始引入，直到现在的最新版依然是 <code>V2</code>。</p><p>从 <code>close()</code> 方法可以看出，<code>MemoryRecordsBuilder</code> 在构建 <code>memoryRecords</code> 时，会根据消息格式的版本高低，写入不同的 Header。对于新版消息，在 <code>writeDefaultBatchHeader</code> 方法中直接调用 <code>DefaultRecordBatch.writeHeader(...)</code>写入新版消息特定的 Header；而对于老版消息，则是在 <code>writeLegacyCompressedWrapperHeader</code>方法中调用 <code>AbstractLegacyRecordBatch.writeHeader</code>  和 <code>LegacyRecord.writeCompressedRecordHeader</code> 写入老版消息的 Header。虽然 Header 的格式各不相同，但我们在两种 Header 中都可以看到 <code>compressionType</code> 的身影，以此可见，Kafka 是允许多种版本的消息共存的，以及压缩与非压缩消息的共存，因为这些信息是保存在 <code>recordBatch</code> 上的，是批量消息级别。</p><h2 id="DefaultRecordBatch"><a href="#DefaultRecordBatch" class="headerlink" title="DefaultRecordBatch"></a>DefaultRecordBatch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRecordBatch</span> <span class="keyword">extends</span> <span class="title">AbstractRecordBatch</span> <span class="keyword">implements</span> <span class="title">MutableRecordBatch</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Record&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyIterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isCompressed())</span><br><span class="line">            <span class="keyword">return</span> uncompressedIterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for a normal iterator, we cannot ensure that the underlying compression stream is closed,</span></span><br><span class="line">        <span class="comment">// so we decompress the full record set here. Use cases which call for a lower memory footprint</span></span><br><span class="line">        <span class="comment">// can use `streamingIterator` at the cost of additional complexity</span></span><br><span class="line">        <span class="keyword">try</span> (CloseableIterator&lt;Record&gt; iterator = compressedIterator(BufferSupplier.NO_CACHING, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            List&lt;Record&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;(count());</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">                records.add(iterator.next());</span><br><span class="line">            <span class="keyword">return</span> records.iterator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RecordBatch</code> 是表示批量消息的接口，对于老版格式的消息（版本 <code>V0</code> 和 <code>V1</code>），如果没有压缩，只会包含单条消息，否则可以包含多条；而新版格式消息（版本 <code>V2</code> 及以上）无论是否压缩，都是通常包含多条消息。且该接口中有一个 <code>compressionType()</code>方法来标识该 batch 的压缩类型，它会作为读消息时解压的判断依据。而上面的 <code>DefaultRecordBatch</code> 则是该接口的针对新版本格式消息的默认实现，它也实现了 <code>Iterable&lt;Record&gt;</code> 接口，因而 <code>iterator()</code> 是访问批量消息的核心逻辑，当 <code>compressionType()</code> 返回 <code>none</code> 时，表示不压缩，直接返回非压缩迭代器，此处跳过，当有压缩时，走的是压缩迭代器，具体实现如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DataInputStream <span class="title">recordInputStream</span><span class="params">(BufferSupplier bufferSupplier)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ByteBuffer buffer = <span class="keyword">this</span>.buffer.duplicate();</span><br><span class="line">    buffer.position(RECORDS_OFFSET);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataInputStream(compressionType().wrapForInput(buffer, magic(), bufferSupplier));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> CloseableIterator&lt;Record&gt; <span class="title">compressedIterator</span><span class="params">(BufferSupplier bufferSupplier, <span class="keyword">boolean</span> skipKeyValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> DataInputStream inputStream = recordInputStream(bufferSupplier);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (skipKeyValue) &#123;</span><br><span class="line">        <span class="comment">// this buffer is used to skip length delimited fields like key, value, headers</span></span><br><span class="line">        <span class="keyword">byte</span>[] skipArray = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_SKIP_BUFFER_SIZE];</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StreamRecordIterator(inputStream) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>compressedIterator()</code> 在构造 Stream 迭代器之前，调用了 <code>recordInputStream(...)</code>，该方法中通过 <code>compressionType</code> 的解压逻辑对原数据进行了解压。</p><h2 id="AbstractLegacyRecordBatch"><a href="#AbstractLegacyRecordBatch" class="headerlink" title="AbstractLegacyRecordBatch"></a>AbstractLegacyRecordBatch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLegacyRecordBatch</span> <span class="keyword">extends</span> <span class="title">AbstractRecordBatch</span> <span class="keyword">implements</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">CloseableIterator&lt;Record&gt; <span class="title">iterator</span><span class="params">(BufferSupplier bufferSupplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCompressed())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DeepRecordsIterator(<span class="keyword">this</span>, <span class="keyword">false</span>, Integer.MAX_VALUE, bufferSupplier);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CloseableIterator&lt;Record&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">boolean</span> hasNext = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hasNext;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Record <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasNext)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                hasNext = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> AbstractLegacyRecordBatch.<span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepRecordsIterator</span> <span class="keyword">extends</span> <span class="title">AbstractIterator</span>&lt;<span class="title">Record</span>&gt; <span class="keyword">implements</span> <span class="title">CloseableIterator</span>&lt;<span class="title">Record</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">DeepRecordsIterator</span><span class="params">(AbstractLegacyRecordBatch wrapperEntry,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">boolean</span> ensureMatchingMagic,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> maxMessageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BufferSupplier bufferSupplier)</span> </span>&#123;</span><br><span class="line">            LegacyRecord wrapperRecord = wrapperEntry.outerRecord();</span><br><span class="line">            <span class="keyword">this</span>.wrapperMagic = wrapperRecord.magic();</span><br><span class="line">            <span class="keyword">if</span> (wrapperMagic != RecordBatch.MAGIC_VALUE_V0 &amp;&amp; wrapperMagic != RecordBatch.MAGIC_VALUE_V1)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRecordException(<span class="string">"Invalid wrapper magic found in legacy deep record iterator "</span> + wrapperMagic);</span><br><span class="line"></span><br><span class="line">            CompressionType compressionType = wrapperRecord.compressionType();</span><br><span class="line">            <span class="keyword">if</span> (compressionType == CompressionType.ZSTD)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRecordException(<span class="string">"Invalid wrapper compressionType found in legacy deep record iterator "</span> + wrapperMagic);</span><br><span class="line">            ByteBuffer wrapperValue = wrapperRecord.value();</span><br><span class="line">            <span class="keyword">if</span> (wrapperValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRecordException(<span class="string">"Found invalid compressed record set with null value (magic = "</span> +</span><br><span class="line">                        wrapperMagic + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">            InputStream stream = compressionType.wrapForInput(wrapperValue, wrapperRecord.magic(), bufferSupplier);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractLegacyRecordBatch</code> 跟前面的 <code>DefaultRecordBatch</code> 大同小异，同样也是 <code>iterator()</code> 入口，当开启了压缩时，返回压缩迭代器 <code>DeepRecordsIterator</code>，只是名字不同而已，迭代器内部依然是直接通过 <code>compressionType</code> 的解压逻辑对数据流进行解压。</p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
          <category> Source Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka系列 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客网站主页空白或404</title>
      <link href="/2022/03/24/hexo-blog-website-page-blank-or-404/"/>
      <url>/2022/03/24/hexo-blog-website-page-blank-or-404/</url>
      
        <content type="html"><![CDATA[<p>太久没更新博客了，最近准备拾起来。为了“改头换面”，今天想调整一下 sidebar 上的头像，因为是新电脑，没有 hexo 等环境，于是按照之前分享过的一篇<a href="https://www.yangbing.club/2019/06/29/save-hexo-source-post-with-git-branch/" target="_blank" rel="noopener">博文</a>，安装 hexo，替换 source 目录下的头像图片并调整 _config.xml，本地预览一切正常，然后直接执行 <code>hexo d</code> 部署完成，访问网站域名 <a href="http://www.yangbing.club/" target="_blank" rel="noopener">www.yangbing.club</a> 发现直接404了，刷新了多次，用无痕浏览，等了许久再试，还是老样子，这可把我吓坏了，从未遇到过这等情况，等于博客直接挂了。</p><a id="more"></a><p><img src="/2022/03/24/hexo-blog-website-page-blank-or-404/web-site-404.png" alt="file1"></p><h1 id="排查和定位"><a href="#排查和定位" class="headerlink" title="排查和定位"></a>排查和定位</h1><h2 id="github-上的线索"><a href="#github-上的线索" class="headerlink" title="github 上的线索"></a>github 上的线索</h2><p>发现 Actions 中此次 hexo deploy 触发的 build 和 deploy 均失败了。</p><p>build error 如下，<a href="https://github.com/sherlockyb/sherlockyb.github.io/runs/5642002288?check_suite_focus=true" target="_blank" rel="noopener">detail</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:84:in `rescue in gemspec': The hexo-theme-next theme could not be found. (Jekyll::Errors::MissingDependencyException)</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:81:in `gemspec'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:19:in `root'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:12:in `initialize'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:439:in `new'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:439:in `configure_theme'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:55:in `config='</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:23:in `initialize'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/commands/build.rb:30:in `new'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/commands/build.rb:30:in `process'</span><br><span class="line">from /usr/local/bundle/gems/github-pages-225/bin/github-pages:70:in `block (3 levels) in &lt;top (required)&gt;'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `block in execute'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `each'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `execute'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/program.rb:42:in `go'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary.rb:19:in `program'</span><br><span class="line">from /usr/local/bundle/gems/github-pages-225/bin/github-pages:6:in `&lt;top (required)&gt;'</span><br><span class="line">from /usr/local/bundle/bin/github-pages:23:in `load'</span><br><span class="line">from /usr/local/bundle/bin/github-pages:23:in `&lt;main&gt;'</span><br><span class="line">/usr/local/lib/ruby/2.7.0/rubygems/dependency.rb:311:in `to_specs': Could not find 'hexo-theme-next' (&gt;= 0) among 158 total gem(s) (Gem::MissingSpecError)</span><br><span class="line">Checked in 'GEM_PATH=/github/home/.gem/ruby/2.7.0:/usr/local/lib/ruby/gems/2.7.0:/usr/local/bundle', execute `gem env` for more information</span><br><span class="line">from /usr/local/lib/ruby/2.7.0/rubygems/dependency.rb:323:in `to_spec'</span><br><span class="line">from /usr/local/lib/ruby/2.7.0/rubygems/specification.rb:986:in `find_by_name'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:82:in `gemspec'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:19:in `root'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/theme.rb:12:in `initialize'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:439:in `new'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:439:in `configure_theme'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:55:in `config='</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/site.rb:23:in `initialize'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/commands/build.rb:30:in `new'</span><br><span class="line">from /usr/local/bundle/gems/jekyll-3.9.0/lib/jekyll/commands/build.rb:30:in `process'</span><br><span class="line">from /usr/local/bundle/gems/github-pages-225/bin/github-pages:70:in `block (3 levels) in &lt;top (required)&gt;'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `block in execute'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `each'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `execute'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary/program.rb:42:in `go'</span><br><span class="line">from /usr/local/bundle/gems/mercenary-0.3.6/lib/mercenary.rb:19:in `program'</span><br><span class="line">from /usr/local/bundle/gems/github-pages-225/bin/github-pages:6:in `&lt;top (required)&gt;'</span><br><span class="line">from /usr/local/bundle/bin/github-pages:23:in `load'</span><br><span class="line">from /usr/local/bundle/bin/github-pages:23:in `&lt;main&gt;'</span><br><span class="line">  Logging at level: debug</span><br><span class="line">Configuration file: /github/workspace/./_config.yml</span><br><span class="line">             Theme: hexo-theme-next</span><br><span class="line">github-pages 225 | Error:  The hexo-theme-next theme could not be found.</span><br></pre></td></tr></table></figure><p> deploy error 如下，<a href="https://github.com/sherlockyb/sherlockyb.github.io/runs/5642009024?check_suite_focus=true" target="_blank" rel="noopener">detail</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Actor: sherlockyb</span><br><span class="line">Action ID: 2021541511</span><br><span class="line">Artifact URL: https://pipelines.actions.githubusercontent.com/QrvX2bmakfCgkbXyG4yo3O1Y8LmS1Eviu5tBLZPSm6baFeu9Sw/_apis/pipelines/workflows/2021541511/artifacts?api-version=6.0-preview</span><br><span class="line">&#123;&quot;count&quot;:0,&quot;value&quot;:[]&#125;</span><br><span class="line">Failed to create deployment for 64e432b334b99462a8b0c082f955d6f5a99e6cde.</span><br><span class="line">Error: Error: No uploaded artifact was found! Please check if there are any errors at build step.</span><br><span class="line">Error: Error: No uploaded artifact was found! Please check if there are any errors at build step.</span><br><span class="line">Sending telemetry for run id 2021541511</span><br></pre></td></tr></table></figure><p>deploy 不用看，自然是 build 失败导致缺少需要的文件。从 build 错误日志中看到，</p><p><code>Error:  The hexo-theme-next theme could not be found.</code></p><p>这个没改过，我又确认了下 site 目录下的文件夹，hexo-theme-next 是存在的。于是我将其改为 next 试试，还是不行，感觉不是这个问题，此路不通。</p><h2 id="可能是CNAME失效，导致域名跳转失败？"><a href="#可能是CNAME失效，导致域名跳转失败？" class="headerlink" title="可能是CNAME失效，导致域名跳转失败？"></a>可能是CNAME失效，导致域名跳转失败？</h2><p>直接访问 <a href="https://sherlockyb.github.io/" target="_blank" rel="noopener">https://sherlockyb.github.io</a> 试试，发现并没有出现404，但首页空白，难道 hexo 生成的 index.html 是空的？通过 inspect 看了下首页源码，还真是空白页！除了 html, head 和 body 三对空标签，其他什么内容都没有。</p><p><img src="/2022/03/24/hexo-blog-website-page-blank-or-404/github-io-index-empty.png" alt="file2"></p><p>然后也查看了下本地 <code>hexo generate</code> 产生的 public 文件夹，发现不仅 index.html，很多其他文件也都是 zero bytes，</p><p><img src="/2022/03/24/hexo-blog-website-page-blank-or-404/local-hexo-generate-empty-file.png" alt="file3"></p><p>于是问题变为 hexo 生成的HTML为空，继续 Google，发现有<a href="https://alanlee.fun/2021/02/28/hexo-empty-html/" target="_blank" rel="noopener">网友</a>也遇到过类似问题并解决了，原因是，</p><blockquote><p>hexo 与 node 的版本不兼容，要么 node 过高，要么 hexo 过低</p></blockquote><p>我查了下本地安装的 hexo 版本，<code>./node_modules/hexo/bin/hexo --version</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hexo: 3.9.0</span><br><span class="line">hexo-cli: 2.0.0</span><br><span class="line">os: Darwin 20.6.0 darwin x64</span><br><span class="line">node: 15.5.0</span><br><span class="line">v8: 9.6.180.15-node.16</span><br><span class="line">uv: 1.43.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.18.1</span><br><span class="line">modules: 102</span><br><span class="line">nghttp2: 1.47.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.4</span><br><span class="line">openssl: 3.0.2+quic</span><br><span class="line">cldr: 40.0</span><br><span class="line">icu: 70.1</span><br><span class="line">tz: 2021a3</span><br><span class="line">unicode: 14.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure><p>hexo-3.9.0 是比较老的版本了，截止发稿最新版已经是 6.1.0 了，而 node 的版本却高达 15.5.0，是比较符合前面提到的 cause 的，剩下的问题就是如何升级 hexo 或者降级 node 了。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="降级-node"><a href="#降级-node" class="headerlink" title="降级 node"></a>降级 node</h2><p>先看看如何降级 node。</p><p>先卸载再重装是可以的，且简单粗暴，但并不想这么做，因为已有很多其他项目的前端代码也依赖当前版本的 node，如果因为降级 node 版本而带来未知的影响得不偿失。网上又 Google 了一番，发现有 nvm 这个好东西，可以随时切换指定版本的 node，就它了。</p><h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><p>先是 <code>brew install nvm</code> ，但执行完后，尝试 nvm 命令时却提示 <code>command not found</code>，按照<a href="https://www.jianshu.com/p/23775773b9d3" target="_blank" rel="noopener">文中</a>网友说法，通过 brew 安装存在 bug，可用如下脚本安装，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>在 Mac 下如果遇到如下错误，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh: line 416: /Users/sherlockyb/.zshrc: Permission denied</span><br></pre></td></tr></table></figure><p>直接进到 nvm 的默认的 git 目录 <code>~/.nvm</code>，然后执行 <code>sudo ./install.sh</code>，可以看到安装脚本会转而使用 <code>.bash_profile</code>文件，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Appending nvm source string to /Users/sherlockyb/.bash_profile</span><br></pre></td></tr></table></figure><p>安装结束后，重新打开 terminal 查看 nvm 版本如下，表示安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sherlockyb@07L0220100005DD sherlockyb.github.io % nvm --version</span><br><span class="line">0.39.1</span><br></pre></td></tr></table></figure><h3 id="用-nvm-降级-node-到-12-14-0"><a href="#用-nvm-降级-node-到-12-14-0" class="headerlink" title="用 nvm 降级 node 到 12.14.0"></a>用 nvm 降级 node 到 12.14.0</h3><p>用法很简单，两行命令就搞定，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 12.14.0</span><br><span class="line">nvm use 12.14.0</span><br></pre></td></tr></table></figure><p><strong>这里需注意</strong>，<code>nvm use</code> 只是临时切换 node 版本，只适用于当前 terminal，如果打开新的 terminal，node 还是之前的旧版本。如果想要永久切换的话，可使用如下命令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 12.14.0</span><br></pre></td></tr></table></figure><p>然后再查看 node 版本如下，已经降级了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sherlockyb@07L0220100005DD sherlockyb.github.io % node --version</span><br><span class="line">v12.14.0</span><br></pre></td></tr></table></figure><p>此时再通过 <code>./node_modules/hexo/bin/hexo --version</code> 查看 hexo 及其依赖包的版本时如下，node 版本已经变了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo: 3.9.0</span><br><span class="line">hexo-cli: 2.0.0</span><br><span class="line">os: Darwin 20.6.0 darwin x64</span><br><span class="line">node: 12.14.0</span><br><span class="line">v8: 7.7.299.13-node.16</span><br><span class="line">uv: 1.33.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 1.1.4</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure><h3 id="重新生成HTML"><a href="#重新生成HTML" class="headerlink" title="重新生成HTML"></a>重新生成HTML</h3><p>清除并重新 generate，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/hexo/bin/hexo clean</span><br><span class="line">./node_modules/hexo/bin/hexo g</span><br></pre></td></tr></table></figure><p>然后再查看 public 文件夹，会发现 index.html 已经正常生成了，打开后内容也是正常。最后本地预览一下，网站各项功能都没啥问题。</p><p><img src="/2022/03/24/hexo-blog-website-page-blank-or-404/local-hexo-generate-successful-file.png" alt="file5"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>最后通过 <code>./node_modules/hexo/bin/hexo d</code> 部署到GitHub Pages，网站恢复正常。</p><h2 id="升级-hexo"><a href="#升级-hexo" class="headerlink" title="升级 hexo"></a>升级 hexo</h2><p>降级 node 已经被验证是可行且简单的，不妨再尝试下升级 hexo 会咋样。</p><p>此次 hexo 是通过 <code>npm install hexo</code> 安装的，得到的默认版本就是 3.9.0，尝试升级 hexo 到最新版。</p><h3 id="先执行-npm-i-hexo-cli"><a href="#先执行-npm-i-hexo-cli" class="headerlink" title="先执行 npm i hexo-cli"></a>先执行 <code>npm i hexo-cli</code></h3><p>安装特别慢，这种一般是由于国内访问 npm 默认的外网官方源 <code>https://registry.npmjs.org/</code> 比较慢，于是将其切换为国内镜像，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://r.cnpmjs.org/</span><br></pre></td></tr></table></figure><p>再执行上述命令时，发现快很多。</p><p>此时再查看 hexo 版本，暂时还未变化。</p><h3 id="再依次执行如下命令"><a href="#再依次执行如下命令" class="headerlink" title="再依次执行如下命令"></a>再依次执行如下命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install npm-check                     // 安装 npm-check 到当前 node_modules 目录</span><br><span class="line">./node_modules/npm-check/bin/cli.js       // 查看系统插件是否需要升级</span><br><span class="line">npm install npm-upgrade</span><br><span class="line">./node_modules/npm-upgrade/lib/bin/cli.js // 更新 package.json</span><br><span class="line">npm update --save                         // 更新插件</span><br></pre></td></tr></table></figure><p>执行完 <code>npm update --save</code> 后，可以看到 hexo 版本升级到了 6.1.0，并且 hexo-deployer-git 等相关 hexo 插件也随之升级了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+ hexo-generator-category@1.0.0</span><br><span class="line">+ hexo-generator-archive@1.0.0</span><br><span class="line">+ hexo-deployer-git@3.0.0</span><br><span class="line">+ hexo-renderer-marked@5.0.0</span><br><span class="line">+ hexo-generator-search@2.4.3</span><br><span class="line">+ hexo-generator-index@2.0.0</span><br><span class="line">+ hexo@6.1.0</span><br><span class="line">+ hexo-generator-sitemap@3.0.1</span><br><span class="line">+ hexo-renderer-ejs@2.0.0</span><br><span class="line">+ hexo-generator-tag@1.0.0</span><br><span class="line">+ hexo-renderer-stylus@2.0.1</span><br><span class="line">+ hexo-server@3.0.0</span><br><span class="line">added 93 packages from 104 contributors, removed 259 packages and updated 56 packages in 382.579s</span><br></pre></td></tr></table></figure><h3 id="问题层出不穷"><a href="#问题层出不穷" class="headerlink" title="问题层出不穷"></a>问题层出不穷</h3><p>就当我以为这就搞定了时，执行 <code>./node_modules/hexo-cli/bin/hexo --version</code> 时却报如下错误，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FATAL YAMLException: Specified list of YAML types (or a single Type object) contains a non-Type object.</span><br><span class="line">    at /Users/biyang/DevCodes/sherlockyb.github.io/node_modules/hexo/node_modules/js-yaml/lib/schema.js:104:13</span><br><span class="line">    at Array.forEach (&lt;anonymous&gt;)</span><br><span class="line">    at Schema.extend (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/hexo/node_modules/js-yaml/lib/schema.js:102:12)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/hexo/lib/plugins/renderer/yaml.js:5:36)</span><br><span class="line">    at Module._compile (node:internal/modules/cjs/loader:1108:14)</span><br><span class="line">    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1137:10)</span><br><span class="line">    at Module.load (node:internal/modules/cjs/loader:973:32)</span><br><span class="line">    at Function.Module._load (node:internal/modules/cjs/loader:813:14)</span><br><span class="line">    at Module.require (node:internal/modules/cjs/loader:997:19)</span><br><span class="line">    at require (node:internal/modules/cjs/helpers:92:18)</span><br><span class="line">    at module.exports (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/hexo/lib/plugins/renderer/index.js:15:16)</span><br><span class="line">    at Hexo.init (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/hexo/lib/hexo/index.js:235:35)</span><br><span class="line">    at /Users/biyang/DevCodes/sherlockyb.github.io/node_modules/hexo-cli/lib/hexo.js:49:17</span><br><span class="line">    at tryCatcher (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (/Users/biyang/DevCodes/sherlockyb.github.io/node_modules/bluebird/js/release/promise.js:604:18) &#123;</span><br><span class="line">  reason: 'Specified list of YAML types (or a single Type object) contains a non-Type object.',</span><br><span class="line">  mark: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hexo-6-1-0-的-bug"><a href="#hexo-6-1-0-的-bug" class="headerlink" title="hexo 6.1.0 的 bug"></a>hexo 6.1.0 的 bug</h4><p>Google了一番发现，在这个 <a href="https://issuehunt.io/r/hexojs/hexo/issues/4917" target="_blank" rel="noopener">issue</a> 中找到了答案，貌似是 6.1.0 版本引入了 bug，解决方案是回退到 6.0.0，</p><p><img src="/2022/03/24/hexo-blog-website-page-blank-or-404/hexo-bug.png" alt="file4"></p><p>于是通过 <code>npm i hexo@6.0.0</code> 回退，执行成功后，再次查看 hexo 版本，回复正常了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo: 6.0.0</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: darwin 20.6.0 11.6</span><br><span class="line">node: 15.5.0</span><br><span class="line">v8: 8.6.395.17-node.23</span><br><span class="line">uv: 1.40.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.1</span><br><span class="line">modules: 88</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 7</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1i</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure><h4 id="swig模板失效了"><a href="#swig模板失效了" class="headerlink" title="swig模板失效了"></a>swig模板失效了</h4><p>然后尝试重新生成 HTML，却发现index.html文件内容长这样，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends '_layout.swig' %&#125;</span><br><span class="line">&#123;% import '_macro/post.swig' as post_template %&#125;</span><br><span class="line">&#123;% import '_macro/sidebar.swig' as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125; page-home &#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"posts"</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% include '_partials/pagination.swig' %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>这是 <code>next/layout</code> 下 <code>index.swig</code> 中的原始内容，说明 swig 模板压根没被处理，因为我的 NexT 主题还比较老（5.1.0），用的是 swig，而从该 <a href="https://github.com/next-theme/hexo-theme-next/issues/4" target="_blank" rel="noopener">issue</a> 可得知，鉴于 swig 缺乏维护，<strong>hexo 从 5.0 开始移除了对 swig 模板的支持，改为独立的 hexo-renderer-swig 插件</strong>，对于 NexT 则是从 7.4.2 版本开始，使用 Nunjucks 代替 swig 作为新的模板引擎。也就是说想要继续使用 swig，需要单独安装 hexo-renderer-swig 插件。顺便看了下 swig 的<a href="https://www.swig.org/" target="_blank" rel="noopener">官网</a>，最新的 Release News 也是两年前了。</p><p>话不多说，执行 <code>npm install hexo-renderer-swig</code>，然后重新生成 HTML，看了下内容，这回终于正常了。</p><h4 id="若干小问题"><a href="#若干小问题" class="headerlink" title="若干小问题"></a>若干小问题</h4><p>通过 <code>./node_modules/hexo/bin/hexo s</code> 本地预览，网站整体功能是没问题，但又发现若干小问题，</p><ul><li>sidebar 的头像没有了，据说是 hexo 从 5.4.0 开始就去掉 avatar 的配置项了，交由主题去管理，好在 NexT 5.1.0 是有 avatar 这个配置项的，只不过之前没开启而已，这个还挺容易解决。</li><li>翻页的button 处，awesome icon 不展示，显示为源码了</li><li>查看单个博客上下滑动时，左侧目录栏不跟着一起变了</li></ul><p>从前面降级 node 可以看出，之前 3.9.0 版本的 hexo 还是好的，看起来就是高版本的 hexo 6.0 与低版本的 NexT 5.1.0 有若干不兼容的地方。上面提到的只是通过简单验证发现的问题，可能还有其他未知的问题。当然，这些小问题都是可以通过改配置或者是改源码来修复。</p><h4 id="放弃并回归-node-降级"><a href="#放弃并回归-node-降级" class="headerlink" title="放弃并回归 node 降级"></a>放弃并回归 node 降级</h4><p>考虑到时间成本，我就不继续下去了，放弃升级，回滚 hexo 至 3.9.0，最终采用降级 node 的方案。</p><h1 id="划重点"><a href="#划重点" class="headerlink" title="划重点"></a>划重点</h1><ul><li>hexo 与 node 版本不兼容，可能导致生成的HTML为空，建议降级 node 更安全。</li><li>hexo 5.0 之后不再内置支持 swig，若需要，得单独安装 hexo-renderer-swig。</li><li>nvm 乃管理 node 版本的神器，推荐。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中的一些感悟</title>
      <link href="/2019/12/21/some-insights-at-work/"/>
      <url>/2019/12/21/some-insights-at-work/</url>
      
        <content type="html"><![CDATA[<p>不知不觉工作已三年半，准确的说是三年零五个月。在这过程中，在技术和业务上的成长，多多少少都会有一些，但最大的收获，还是长见识。聊聊几点感受吧。</p><a id="more"></a><h2 id="学会向上汇报"><a href="#学会向上汇报" class="headerlink" title="学会向上汇报"></a>学会向上汇报</h2><p>别只顾埋头做事，要做“对”的事情。</p><p>这是个人情社会，你的领导也只是普通人，他不太会有大把的精力去关注底下的人每天具体干些什么事情，这种情况下，如果你只知道一味地埋头做事，即便做了很多，加班累成狗，但是领导压根不知道，是没有任何意义的，典型的吃力不讨好。很多时候是需要你主动向上汇报的！定期地跟领导保持正向沟通，积极反馈工作中遇到的问题以及自己的想法，让领导感知到你的付出，当然有产出是最好的了。</p><p>什么是“对”的事情？要有全局观，审时度势。当前领导最关心最迫切的事情，就是对的事情。举个栗子，随着用户量的快速增长，系统的压力越来越大，原有最初的系统逐渐暴露问题，甚至因此频繁出现线上故障。这个时候，如果领导发起了“系统压测”的任务，那么当务之急，压测就是最重要的事情，工作的重心应该以此为准。即便此时业务上也有很多新的需求，你也应该做取舍，否则即便你做了一大堆需求，此时的领导根本无暇顾及，他所关注的必然是压测的进度，千万不能捡了芝麻丢了西瓜。</p><h2 id="打破局限，解决问题才是王道"><a href="#打破局限，解决问题才是王道" class="headerlink" title="打破局限，解决问题才是王道"></a>打破局限，解决问题才是王道</h2><p>在遇到紧急情况，如线上故障处理时，快速解决问题才是关键。有的时候我们容易陷入程序员惯有的思维里，遇到问题会习惯性地一上来就尝试用代码去解决，而忽略了一些非代码的简单处理方式，比如粘贴&#x2F;复制、excel工具、sublime文本替换等。这里列举两个工作中的小例子，深有感悟。</p><h3 id="栗子1：故障处理"><a href="#栗子1：故障处理" class="headerlink" title="栗子1：故障处理"></a>栗子1：故障处理</h3><p>在一次故障处理过程中，需要对一批指定用户做一个操作，这个操作可以通过curl请求来完成，当前已有的是已经导出的以userId逐行排列的userIds.txt文件和请求的url，分别长下面这样子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">userIds.txt内容：</span><br><span class="line">userId1</span><br><span class="line">userId2</span><br><span class="line">userId3</span><br><span class="line">...</span><br><span class="line">userIdn</span><br><span class="line"></span><br><span class="line">url内容：</span><br><span class="line">https://www.yangbing.club/$&#123;userId&#125;/doing</span><br></pre></td></tr></table></figure><p>当时的第一反应就是准备写个shell脚本或者Java的Job来搞这个事，本身逻辑简单，一层循环就能搞定，伪代码大致如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userIds &lt;- userIds.txt</span><br><span class="line">for userId in userIds:</span><br><span class="line">actualUrl = url.replace("$&#123;userId&#125;", userId)</span><br><span class="line">curl -H 'Cooike: xxx' actualUrl</span><br></pre></td></tr></table></figure><p>但偏偏shell又不太熟，还得调试，想想就头大。此时组里新来的清华实习生给出了简单粗暴的方式，直接在userIds.txt文件上做文章，用sublime的文本替换功能，将文本中每一行，如第一行userId1的行首<code>^</code>替换为请求url中<code>${userId}</code>之前的子串<strong>curl -H ‘Cooike: xxx’ <a href="https://www.yangbing.club/**%EF%BC%8C%E5%B0%86%E8%A1%8C%E5%B0%BE%60$%60%E6%9B%BF%E6%8D%A2%E4%B8%BAurl%E4%B8%AD%60$%7BuserId%7D%60%E4%B9%8B%E5%90%8E%E7%9A%84%E5%AD%90%E4%B8%B2**/doing" target="_blank" rel="noopener">https://www.yangbing.club/**，将行尾`$`替换为url中`${userId}`之后的子串**/doing</a></strong>，这样就得到如下的结果文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H 'Cooike: xxx' https://www.yangbing.club/userId1/doing</span><br><span class="line">curl -H 'Cooike: xxx' https://www.yangbing.club/userId2/doing</span><br><span class="line">curl -H 'Cooike: xxx' https://www.yangbing.club/userId3/doing</span><br><span class="line">...</span><br><span class="line">curl -H 'Cooike: xxx' https://www.yangbing.club/userIdn/doing</span><br></pre></td></tr></table></figure><p>然后一行命令就能搞定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh userIds.txt</span><br></pre></td></tr></table></figure><p>如果处理速度慢了想要并发，又可以通过split命令将userIds.txt按记录行数拆分成多个小文件，然后依次sh，利用操作系统的多进程并发处理。</p><p>回想这个事情的处理过程，我们的最终目的实际是为不同的userId生成对应的url，然后curl请求执行。程序员的固有思维就是消除重复，尽可能复用！对于这种userId不同，有相同的url模板的典型case，很自然的想到用循环。而忽略了<code>ctrl C/V</code>这种“重复”的快捷方式。</p><h3 id="栗子2：日常开发"><a href="#栗子2：日常开发" class="headerlink" title="栗子2：日常开发"></a>栗子2：日常开发</h3><p>产品有个导数据的需求，要将特定筛选条件下的用户列表导出为Excel文件。这本身并不难，一个常规的Job就能搞定了。</p><p>同事A的方案也很常规，算是比较自然的思路，大概构想了一下代码流程，类似这样：组织筛选代码逻辑，将符合条件的用户列表筛出来，然后将列表转换为行数组，并构建标题数组，再通过Excel三方库或公司已有的工具类，将数据写入Excel文件。在这过程中，除了筛选条件的代码逻辑外，转为Excel工具需要的数据格式并生成Excel文件，看起来是最耗时的工作。</p><p>这看起来好像没啥问题，但笔者并没有采用上述方案。我们来看下这个需求，首先它是个一次性的，数据导出之后就完事了，也没有后续迭代；其次，Excel文件只是产品所需要结果的一种文件格式，我们只要能确保最终给到产品的是Excel就行，至于我们是通过代码生成Excel的方式，还是借用Office Excel强大功能将其他格式的文件转换为Excel的方式，产品并不关心。而我们又知道，Office Excel可以轻松支持将特定分隔符（如逗号、tab键）的文本文件导入为Excel，因而方案自然就变为：</p><p>先筛选出符合条件的用户列表，然后通过<strong>log.info</strong>将每个用户记录User的各字段以逗号”,”分割打印一行，这样我们就得到了第一版数据——日志文件，大概长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......<span class="comment">// 启动日志</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">42</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] job start</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">42</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] user info:<span class="number">10506672</span>,<span class="string">"userName1"</span>,<span class="string">"address1"</span>,<span class="number">2</span> </span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">42</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] user info:<span class="number">10506673</span>,<span class="string">"userName2"</span>,<span class="string">"address2"</span>,<span class="number">3</span> </span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">42</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] user info:<span class="number">10506674</span>,<span class="string">"userName3"</span>,<span class="string">"address3"</span>,<span class="number">2</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">45</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] user info:<span class="number">10506694</span>,<span class="string">"userName100"</span>,<span class="string">"address100"</span>,<span class="number">1</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">45</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] has processed <span class="number">100</span> users</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">45</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] user info:<span class="number">10506694</span>,<span class="string">"userName101"</span>,<span class="string">"address101"</span>,<span class="number">1</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">25</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">42</span> [INFO] [Thread-<span class="number">17</span>] [org.sherlockyb.blogdemos.ExportUserJob] job end</span><br><span class="line">......<span class="comment">// job退出日志</span></span><br></pre></td></tr></table></figure><p>这时候，强大的文本编辑工具sublime就登场了。可以看到，日志中除了含有<strong>user info</strong>的行尾是我们需要的数据，其余都是无用信息，冗余数据处理分为如下几步：</p><ul><li><p>job起始和结束我们通常会打印<strong>job start</strong>和<strong>job end</strong>，那么这两行分别之前和之后的内容可以直接删除</p></li><li><p>像<strong>has processed xxx users</strong>这种打印job进度的信息，可以通过正则**.*has processed [\d]+ users\n**替换为空串，这个地方需要注意一个细节，就是正则中要包含”\n”符号，否则替换后会留下空行，比较尴尬。</p></li><li><p>前面两步处理完后，就剩下数据行了，然后用正则**.*[org.sherlockyb.blogdemos.ExportUserJob] user info:**把无用的前缀替换为空串即可。</p></li><li><p>剩下的数据行其实就是标准的CSV格式文件了，改下后缀，然后打开文件，将内容复制到Excel文件即可。或者在打印日志时我们用”\t”分割，这样在得到剩下的数据行时，可以直接复制到新建的Excel文件也是可以的</p></li></ul><p>可以看到，这个方案的核心在于，通过Office Excel已有的强大功能，代替了通过写代码生成Excel的方式，从某种意义上说，这也是复用，只不过复用的不是现有代码，而是现有的软件功能，而这些强大的软件功能，同样也是别人写代码实现的，间接地复用了”已有代码”。</p><p>同事A后来听我跟他讲完我的实现方案，表示“秀了我一脸”，真实。。。。</p><h2 id="用“好工具”，“用好”工具"><a href="#用“好工具”，“用好”工具" class="headerlink" title="用“好工具”，“用好”工具"></a>用“好工具”，“用好”工具</h2><p>好的工具能让我们极大地提升做事效率。</p><p>以前我对于日常开发工具的认知就是，够用就行，不用太深究，专注代码和技术。直到后来，当我见识到周围的朋友如何熟练地通过各种工具快速达到目的的时候，感觉真的被秀了一脸。</p><p>好的工具有哪些呢？笔者有个推荐清单：</p><ul><li>IntelliJ idea，真的比eclipse好用太多，用过的才知道。可配置各种常用快捷键，如项目切换、代码视图回退、代码跳转等</li><li>Sublime，强大的文本编辑工具，日常的文本处理用它就行</li><li>Excel，再普通不过了，基本用过pc的人都了解过一些基本用法，但又有多少人用过筛选、列隐藏、多列排序、指定分隔符导入文本数据等功能呢？多研究多使用，你会发现不一样的天空。</li><li>Alfred，mac下强大的搜索工具，真的很强大。在一个小小的命令框内，它可以快速定位本地文件，使用计算器、词典，等等。比如通过<code>idea 项目名</code>，你可以快速打开指定的idea项目，这比你每次点击<strong>File</strong> -&gt; <strong>Open</strong> -&gt; <strong>选择项目目录</strong> -&gt; <strong>ok</strong>，可是要快的多！</li><li>open-falcon，小米开源的监控平台，虽然使用上不太友好，但东西还是挺全的，需要的监控指标和功能基本都有</li></ul><p>除了上面列的，还有很多日常可用的工具，基本只要你能想到的，都会有。在挖掘新的可用工具的同时，对于已经经常在使用的工具，可以深究，也许你会发现很多好用的feature，用好它，让你事半功倍。</p><h2 id="积极主动，要有owner精神"><a href="#积极主动，要有owner精神" class="headerlink" title="积极主动，要有owner精神"></a>积极主动，要有owner精神</h2><p>积极主动反映的是良好的工作态度，团队需要积极的氛围，领导更需要积极的人才。</p><p>owner精神，则需要较强的责任心，对所参与的业务以及团队负责的业务负责，开发时积极推动项目进度，协调各方优先级，确保项目如期高质量上线；遇到线上故障时，积极响应，确保在最短的时间内解除故障。</p><h2 id="沟通很重要，对上和对下"><a href="#沟通很重要，对上和对下" class="headerlink" title="沟通很重要，对上和对下"></a>沟通很重要，对上和对下</h2><p>没有什么事情是沟通解决不了的，如果有，就多次沟通。</p><p>对上沟通，能让领导对你有所知，有所期望，可能还会有额外的指导，能及时暴露风险，尽早解决；对下沟通，能让你带的小伙伴感受到温暖，知道你时刻在关注着他，这是正向反馈。另外，你也能及时了解他当前的状况，如有困惑，帮助他解决，让他少走弯路；如有新的想法，拿出来讨论，或许会给你带来新的启发。</p><h2 id="爱钻研，有技术追求"><a href="#爱钻研，有技术追求" class="headerlink" title="爱钻研，有技术追求"></a>爱钻研，有技术追求</h2><p>我在面试的时候，经常会看这一点。对于爱钻研，有技术追求的候选人，他首先一定是自驱力不错的，因为技术钻研这个事儿纯粹是出于个人意愿，能坚持下来，不容易。其次，他对于技术是有好奇心的，好奇心会驱使他去研究这里面的细节，搞清楚原理，不会浮于表面。</p><h2 id="反对过度设计与优化"><a href="#反对过度设计与优化" class="headerlink" title="反对过度设计与优化"></a>反对过度设计与优化</h2><p>技术架构一定是依托于业务的。</p><p>公司发展的不同阶段，业务量级的不同，所需要的技术架构是不一样的。初创期，业务规模小，产品迭代速度快，此时需要的是快速支持，快速开发，比如很多统计数据的场景就直接实时计算了，后端服务可能就是一个单体应用，这些都是可以接受的；随着业务发展，业务形态多样化，用户量快速增长，导致系统压力、复杂度倍增，此时就需要考虑微服务拆分、分布式、性能优化、Redis缓存、分库拆表等技术方案了。</p><p>技术架构除了要考虑能否支持业务发展，技术先进性外，也要考虑成本，这里面既有数据库、服务节点等资源成本，也有开发成本，更多时候是取一种折中方案，收益最大化。</p><h2 id="成也经验，败也经验"><a href="#成也经验，败也经验" class="headerlink" title="成也经验，败也经验"></a>成也经验，败也经验</h2><p>过去的经验能让我们在处理新的问题时有参考依据，尽量少走弯路，通常这是没问题的。但有一个误区是，过分相信此前的经验，认为那绝对是对的。工作中就遇到过这类case，关于thrift新增字段，是否需要设置为optional的，同事A很自信地认为用默认的required就行，因为之前这么干过没问题。但很快实验表明，新增required字段，会导致新老版本不兼容，call端会报异常。</p><p>经验有对有错，我们需要有质疑心态，不能尽信之。</p>]]></content>
      
      
      <categories>
          
          <category> Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git分支保存hexo博客源码到github</title>
      <link href="/2019/06/29/save-hexo-source-post-with-git-branch/"/>
      <url>/2019/06/29/save-hexo-source-post-with-git-branch/</url>
      
        <content type="html"><![CDATA[<p>hexo是当前最火的静态博客框架，支持Markdown格式文章编辑并自动生成对应的静态网页，简单高效令人爱不释手。<br>使用hexo写博客的流程通常是，</p><ol><li>通过<code>hexo new post_name</code>命令，会自动在<code>source/_post</code>目录下生成一个待写的<code>post_name.md</code>文件</li><li>编写完该md文件后，用<code>hexo generate</code>编译生成对应的HTML文件</li><li>发布之前，可以用<code>hexo s</code>本地预览，然后通过<code>hexo deploy</code>发布到远程仓库的<strong>master</strong>分支，然后你的个人站点就能看到刚才新加的文章了</li></ol><a id="more"></a><h3 id="困扰"><a href="#困扰" class="headerlink" title="困扰"></a>困扰</h3><p>然而，使用过hexo搭建个人博客的朋友们想必都会遇到博客源码保存的问题。即远程仓库只会保存hexo发布后的静态HTML文件，你的博客md源文件、主题配置等还在本地，一旦电脑磁盘坏了或者换了电脑，就无法在之前仓库的基础上继续写博客。针对此问题，有不少博主会在github上单独另起一个<strong>repository</strong>来专门保存博客源文件，每次发布完新文章，需要手动地将<code>source/post</code>下的md文件上传到源文件对应的<strong>repository</strong>，确实也能解决问题，但总归是麻烦。后来偶然看到聪明的网友借助git分支来巧妙地实现用同一个仓库保存静态网页和博客源码，自己试了下确实很赞，故总结之。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="新建git分支"><a href="#新建git分支" class="headerlink" title="新建git分支"></a>新建git分支</h4><p>因Github Page要求使用master分支作为发布网站的源代码，我们只能用master分支来保存hexo生成的静态网页，对于博客源码，可以新建一个source分支来存储。在github上打开Pages对应的仓库，也就是以”username.github.io”命名的仓库，然后建立一个source分支，如下图：</p><p><img src="/2019/06/29/save-hexo-source-post-with-git-branch/create_branch.png" alt="create_branch"></p><p>因为我已经创建过source分支，故下方会显示目前该仓库上有master和source两个分支。其中source分支显示打钩，表示当前仓库的默认分支已经是source而不是master了，下面会讲。</p><h4 id="更改仓库的默认分支"><a href="#更改仓库的默认分支" class="headerlink" title="更改仓库的默认分支"></a>更改仓库的默认分支</h4><p>github上的仓库初始都会有个master分支，也就是默认分支。对于一个仓库<code>project_name</code>，当我们通过<code>git clone https://github.com/sherlockyb/project_name.git</code>下载代码时，实际拉取的是默认分支master对应的代码。而我们用hexo写博客时，通常是与md源文件打交道，对于deploy生成的master分支代码并不需要我们关注，因此可将仓库的默认分支改为保存源码的source分支，这样通过<code>git clone</code>拉取的就是source分支代码了。</p><p>在仓库的主页面，通过Settings -&gt; Branchs，可以看到<strong>Default branch</strong>的Tab，显示的默认分支是master，可以勾选source，然后update即可将默认分支设置为source，如下图：</p><p><img src="/2019/06/29/save-hexo-source-post-with-git-branch/default_branch.png" alt="switch_default_branch"></p><h4 id="将本地hexo目录与远程仓库关联"><a href="#将本地hexo目录与远程仓库关联" class="headerlink" title="将本地hexo目录与远程仓库关联"></a>将本地hexo目录与远程仓库关联</h4><p>进入到本地hexo工程目录，也就是我们通常执行<code>hexo new post</code>等命令的目录，执行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/sherlockyb/sherlockyb.github.io.git</span><br></pre></td></tr></table></figure><h4 id="推送博客源码"><a href="#推送博客源码" class="headerlink" title="推送博客源码"></a>推送博客源码</h4><p>将本地的md源文件、站点配置文件等推送到source分支。<br>因为我们只需要保留博客源码，其他无关的文件并不希望推送，需要确保配好了<code>.gitignore</code>文件，通常如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>然后依次执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 'hexo source post'</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><h4 id="删除public等文件（可选）"><a href="#删除public等文件（可选）" class="headerlink" title="删除public等文件（可选）"></a>删除public等文件（可选）</h4><p>因为source分支是从master分支新建的，初始代码实际就是master的拷贝，因而master中已有的public等deploy生成的文件也会一起带过来，这些都不算是博客源文件，如果你也觉着source分支还存着这些有些别扭，就可以先在本地把它删掉，然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 'DEL: public things which only for deploy'</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><p>执行完之后，你的仓库大概就是长这个样子：</p><p><img src="/2019/06/29/save-hexo-source-post-with-git-branch/source_files.png" alt="source_files"></p><p>后续即便你再发布博客时，deploy生成public文件，在提交博客源码时，也不会将其带上去，因为有<code>.gitignore</code>将其忽略了。</p><h3 id="新环境"><a href="#新环境" class="headerlink" title="新环境"></a>新环境</h3><p>假设我们换电脑了，要在新环境继续在原有仓库基础上撸文章，此时通过<code>git clone</code>将博客源码拉到本地，然后安装、初始化hexo就能搞定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/sherlockyb/sherlockyb.github.io.git sherlockyb</span><br><span class="line">cd sherlockyb</span><br><span class="line">npm install hexo</span><br><span class="line">npm install hexo-deployer-git -save</span><br><span class="line"></span><br><span class="line">// 别忘了安装相关依赖的 NodeJS 包，也就是 _config.xml 中用到的一些插件</span><br><span class="line">npm install hexo-wordcount</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// hexo环境配置好后，继续像之前一样</span><br><span class="line">hexo new post_name</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>确保<code>hexo deploy</code>推送的是master分支，hexo目录下的_config.yml文件通常会配置deploy推送的目标地址，这个一般在最初使用hexo时，就会配置为master，不用改动：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/sherlockyb/sherlockyb.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个Long类型真的不能直接用大于或小于比较么？其实可以</title>
      <link href="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/"/>
      <url>/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/</url>
      
        <content type="html"><![CDATA[<p>　　当我在Google输入“Long类型的比较”时，会出现多如牛毛的与这个问题相关的博文，并且这些博文对此问题的看法如出一辙，都“不约而同”地持有如下观点：</p><blockquote><p>对于Long类型的数据，它是一个对象，所以对象不可以直接通过“&gt;”，“&#x3D;&#x3D;”，“&lt;”的比较。若要比较是否相等，可以用Long对象的<strong>equals**方法；若要进行“&gt;”，“&lt;”的比较，需通过Long对象的</strong>longValue**方法。</p></blockquote><p>那么问题来了，这个观点真的全对吗？或者准确地说，后半段关于“&gt;”，“&lt;”的说法真的对吗？起初我也差点信了，按理说Java中并没有像C++中的操作符重载之类的东东，对象直接拿来用“&gt;”或“&lt;”比较确实很少这么干的，而且有童鞋可能会说，既然大家都这么说，当然是对的无疑咯。那么今天笔者想告诉你的是，<strong>它是错的<strong>！</strong>Long类型可以直接用“&gt;”和“&lt;”比较，并且其他包装类型也同理</strong>。不信？先别急着反驳，且听笔者娓娓道来。</p><a id="more"></a><h1 id="问题起源"><a href="#问题起源" class="headerlink" title="问题起源"></a>问题起源</h1><p>　　关于Long类型的大小比较这个问题，其实是源于我的上一篇博文<a href="http://www.yangbing.club/2017/12/30/talk-about-ali-and-google-s-java-developing-guideline/" target="_blank" rel="noopener">谈谈ali与Google的Java开发规范</a>，在其中关于“<strong>相同类型的包装类对象之间值的比较</strong>”这一规范，我补充了如下一点：<br>　　<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image1.png" alt="1"></p><p>　　然后oschina上的一个热心网友关于此提出了一个很好的问题：<br>　　<br><img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image2.png" alt="1"></p><p>　　即有没有可能比较的是内存地址并且刚好其大小满足上述条件？想想也不无道理，毕竟对于Java中的对象引用a、b、c的值实际就是对象在堆中的地址。关于这个问题，其实我最初也质疑过，为此我编写了多种类似上面的testCase，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long a = <span class="keyword">new</span> Long(<span class="number">1000L</span>);</span><br><span class="line">Long b = <span class="keyword">new</span> Long(<span class="number">2000L</span>);</span><br><span class="line">Long c = <span class="keyword">new</span> Long(<span class="number">222L</span>);</span><br><span class="line">Assert.isTrue(a&lt;b &amp;&amp; a&gt;c);<span class="comment">//断言成功</span></span><br></pre></td></tr></table></figure><p>　　最终的结论跟预期一致的：两者的比较结果跟Long对象中的数值大小的比较结果是一致的，至少从目前所尝试过的所有testCase来看是这样的。</p><h1 id="从现象到本质"><a href="#从现象到本质" class="headerlink" title="从现象到本质"></a>从现象到本质</h1><p>　　但是，光靠那几个有限的单元测试，貌似并不具有较强的说服力，心中难免总有疑惑：会不会有特殊的case没覆盖到？会不会还是地址比较的巧合？怎么才能有效地验证我的结论呢？</p><p>　　于是我开始琢磨：毕竟对于<code>new Long()</code>这种操作，是在堆中动态分配内存的，我们不太好控制a、b等的地址大小，那又该怎么验证上述的比较不是地址比较的结果呢？除了地址之外，还有别的我们能控制的吗？有的，那就是对象中的内容！我们可以在不改变对象引用值的情况下，改变对象的内容，然后看其比较结果是否发生变化，这对于我们来说轻而易举。有时候换个角度思考问题，就能有新的收获！</p><h2 id="一、debug验证"><a href="#一、debug验证" class="headerlink" title="一、debug验证"></a>一、debug验证</h2><p>　　那么接下来，我们就可以用反证法来证明上述问题，还是以本文开头的testCase为例：假设上述testCase中比较的是地址值，只要我们不对a、b进行赋值操作，即不改变它们的地址值，其比较结果就应该也是始终不变，此时我们仅修改对象中的数值，这里对应Long对象中的value字段，使数值的大小比较与当前Long对象的比较结果相反，如果此时Long对象的比较结果也跟着变为相反，也就推翻了地址比较这一假设，否则就是地址比较，证毕。</p><p>　　接下来以实例来演示我们的推断过程。首先上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sherlockyb</span></span><br><span class="line"><span class="comment"> * @2018年1月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">longCompare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Long a = <span class="keyword">new</span> Long(<span class="number">1000L</span>);</span><br><span class="line">    Long b = <span class="keyword">new</span> Long(<span class="number">222L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> flagBeforeAlter = a &gt; b;</span><br><span class="line">    <span class="keyword">boolean</span> flagAfterAlter = a &gt; b; <span class="comment">// 断点1</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"flagBeforeAlter: "</span> + flagBeforeAlter</span><br><span class="line">        + <span class="string">", flagAfterAlter: "</span> + flagAfterAlter); <span class="comment">// 断点2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　我们以debug模式运行上述testCase，首先运行到断点1处，此处可观察到<code>flagBeforeAlter</code>的当前值为<strong>true</strong>：<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image3.png" alt="1"></p><p>　　此时我们通过<code>Change Value</code>修改a中的value值为100L，如图：<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image4.png" alt="1"></p><p>　　然后F8到断点2，观察此时<code>flagAfterAlter</code>的值为<strong>false</strong>：<img src="/2018/01/13/two-long-types-can-not-use-left-parenthesis-or-right-parenthesis-to-compare-with-each-other-directly-No-they-can/Image5.png" alt="1"></p><p>　　最后的输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flagBeforeAlter: <span class="keyword">true</span>, flagAfterAlter: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>　　由此说明，两个Long对象直接用“&gt;”或“&lt;”比较时，是数值比较而非地址比较。</p><p>　　好了，上面的debug测试已经能解释我们的困惑，但是笔者认为这还不够！仅仅停留在表面不是我们程序猿的作风，我们要从本质——源码出发。原理是什么？为什么最终比较的是数值而不是引用？难道这也发生了自动拆箱吗？（跟我们以前所认知的自动拆箱有出入哦）</p><h2 id="二、回归本质——字节码"><a href="#二、回归本质——字节码" class="headerlink" title="二、回归本质——字节码"></a>二、回归本质——字节码</h2><p>　　真理来自源码。我们通过<code>javap -c</code>来看下刚才那个JdkTest类，反编译字节码是啥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compiled from "JdkTest.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">sherlockyb</span>.<span class="title">blogdemos</span>.<span class="title">jdk</span>.<span class="title">JdkTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> org.sherlockyb.blogdemos.jdk.JdkTest();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0       </span><br><span class="line">       1: invokespecial #8                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span>        </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">longCompare</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #17                 // class java/lang/Long</span><br><span class="line">       <span class="number">3</span>: dup           </span><br><span class="line">       4: ldc2_w        #19                 // long 1000l</span><br><span class="line">       7: invokespecial #21                 // Method java/lang/Long."&lt;init&gt;":(J)V</span><br><span class="line">      <span class="number">10</span>: astore_1      </span><br><span class="line">      11: new           #17                 // class java/lang/Long</span><br><span class="line">      <span class="number">14</span>: dup           </span><br><span class="line">      15: ldc2_w        #24                 // long 222l</span><br><span class="line">      18: invokespecial #21                 // Method java/lang/Long."&lt;init&gt;":(J)V</span><br><span class="line">      <span class="number">21</span>: astore_2      </span><br><span class="line">      <span class="number">22</span>: aload_1       </span><br><span class="line">      23: invokevirtual #26                 // Method java/lang/Long.longValue:()J</span><br><span class="line">      <span class="number">26</span>: aload_2       </span><br><span class="line">      27: invokevirtual #26                 // Method java/lang/Long.longValue:()J</span><br><span class="line">      <span class="number">30</span>: lcmp          </span><br><span class="line">      <span class="number">31</span>: ifle          <span class="number">38</span></span><br><span class="line">      <span class="number">34</span>: iconst_1      </span><br><span class="line">      <span class="number">35</span>: goto          <span class="number">39</span></span><br><span class="line">      <span class="number">38</span>: iconst_0      </span><br><span class="line">      <span class="number">39</span>: istore_3      </span><br><span class="line">      <span class="number">40</span>: aload_1       </span><br><span class="line">      41: invokevirtual #26                 // Method java/lang/Long.longValue:()J</span><br><span class="line">      <span class="number">44</span>: aload_2       </span><br><span class="line">      45: invokevirtual #26                 // Method java/lang/Long.longValue:()J</span><br><span class="line">      <span class="number">48</span>: lcmp          </span><br><span class="line">      <span class="number">49</span>: ifle          <span class="number">56</span></span><br><span class="line">      <span class="number">52</span>: iconst_1      </span><br><span class="line">      <span class="number">53</span>: goto          <span class="number">57</span></span><br><span class="line">      <span class="number">56</span>: iconst_0      </span><br><span class="line">      <span class="number">57</span>: istore        <span class="number">4</span></span><br><span class="line">      59: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      62: new           #36                 // class java/lang/StringBuilder</span><br><span class="line">      <span class="number">65</span>: dup           </span><br><span class="line">      66: ldc           #38                 // String flagBeforeAlter: </span><br><span class="line">      68: invokespecial #40                 // Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">71</span>: iload_3       </span><br><span class="line">      72: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;</span><br><span class="line">      75: ldc           #47                 // String , flagAfterAlter: </span><br><span class="line">      77: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      <span class="number">80</span>: iload         <span class="number">4</span></span><br><span class="line">      82: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;</span><br><span class="line">      85: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      88: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">91</span>: <span class="keyword">return</span>        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　第59行（这里的“行”是一种形象的描述，实指当前字节码相对于方法体开始位置的偏移量）是我们打印结果的地方：<code>System.out.println(...)</code><br>　　从字节码可以清晰地看到第<strong>23</strong>、<strong>27</strong>行以及第<strong>41</strong>、<strong>45</strong>行，invokevirtual，显式调用了<code>java/lang/Long.longValue:()</code>方法，<strong>确实自动拆箱</strong>了。也就是说对于基本包装类型，除了我们之前所认知的自动装箱和拆箱场景（关于自动装箱和拆箱，大家可以参考这篇博文——<a href="https://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java/" target="_blank" rel="noopener">Java中的自动装箱与拆箱</a>，写的不错，这里我就不做过多叙述了）外，<strong>对于两个包装类型的&gt;和&lt;的操作，也会自动拆箱</strong>。无需任何testCase来佐证，结论一目了然。</p><p>　　除了Long类型，感兴趣的童鞋还可以找Integer、Byte、Short等来验证下，结果是一样的，这里我就不做过多叙述了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　古人说得好——<strong>尽信书，则不如无书</strong>。可能，大多数的我们在面对这个问题时，都会下意识地去Google一把，然后多家博客对比查阅，最后发现几乎所有的博文都是一致的观点：Long对象不可直接用”&gt;”或”&lt;”比较，需要调用<code>Long.longValue()</code>来比较。于是毫无疑问地就信了。当再次遇到这个问题时，就会“很自信”地告诉别人，要用<code>Long.longValue()</code>比较。而实际呢，却不知道自己已经陷入误区！</p><p>　　虽然今天谈论的只是Long对象的”&gt;”或”&lt;”用法问题，看起来好像是个“小问题”，最坏情况下，如果不确定是否可以直接比较，大不了直接用Long.longValue来比较，并不会阻碍你编码。但是，笔者想说但是，作为一个程序猿，<strong>打破砂锅问到底的精神是不可少的，我们应该拒绝黑盒，追求细节</strong>，这样才可能更好地成长，在代码的世界里游刃有余。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Source Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK源码 </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈ali与Google的Java开发规范</title>
      <link href="/2017/12/30/talk-about-ali-and-google-s-java-developing-guideline/"/>
      <url>/2017/12/30/talk-about-ali-and-google-s-java-developing-guideline/</url>
      
        <content type="html"><![CDATA[<p>　　无规矩不成方圆，编码规范就如同协议，有了Http、TCP等各种协议，计算机之间才能有效地通信，同样的，有了一致的编码规范，程序员之间才能有效地合作。道理大家都懂，可现实中的我们，经常一边吐槽别人的代码，一边写着被吐槽的代码，究其根本，就是缺乏遵从编码规范的意识！多年前，Google发布<code>Google Java Style</code>来定义Java编码时应遵循的规范；今年年初阿里则发布<code>阿里巴巴Java 开发手册</code>，并随后迭代了多个版本，直至9月份又发布了pdf终极版。这两大互联网巨头的初衷，都是希望能够统一标准，使业界编码达到一致性，提升沟通和研发效率，这对于我们码农无疑是很赞的一笔福利呀。笔者将两份规范都通读了一遍，其中列举的不少细则跟平时的编码习惯基本是符合的，不过还是有不少新奇的收获，忍不住记录在此，供日后念念不忘~</p><a id="more"></a><h1 id="Java开发规范总览"><a href="#Java开发规范总览" class="headerlink" title="Java开发规范总览"></a>Java开发规范总览</h1><h2 id="一、Google-Java-Style"><a href="#一、Google-Java-Style" class="headerlink" title="一、Google Java Style"></a>一、Google Java Style</h2><p>　　Google的java开发规范主要分为6大部分：源文件基本规范、源文件结构、代码格式、命名、编程实践和Javadoc，各部分概要如下：</p><blockquote><p>1、源文件基本规范（source file basics）：文件名、文件编码、特殊字符的规范要求<br>2、源文件结构（source file structure）：版权许可信息、package、import、类申明的规约<br>3、代码格式（formatting）：大括号、缩进、换行、列长限制、空格、括号、枚举、数组、switch语句、注4、解、注释、和修饰符等格式要求<br>5、命名（Naming）：标识符、包名、类名、方法名、常量名、非常量成员名、参数名、局部变量的命名规范<br>6、编程实践（Programming Practices）：@override、异常捕获、静态成员、Finalizers等用法规约</p></blockquote><h2 id="二、阿里巴巴Java开发手册"><a href="#二、阿里巴巴Java开发手册" class="headerlink" title="二、阿里巴巴Java开发手册"></a>二、阿里巴巴Java开发手册</h2><p>　　阿里的Java开发手册相对于前者更上一层楼，它除了基本的编程风格的规约外，还给出了日志、单元测试、安全、MySQL、工程结构等代码之外的规约，据说是阿里近万名开发同学集体智慧的结晶，相当了得，还是挺值得借鉴一下的。各部分概要如下：</p><blockquote><p>1、编程规约：命名风格、常量、代码格式、OOP、集合处理、并发、控制语句、注释等<br>2、异常日志：异常处理、日志的命名、保留时间、输出级别、记录信息等<br>3、单元测试：AIR原则（Automatic,Independent,Repeatable）、单侧的代码目录、目标，单侧的写法，即BCDE原则（Border,Correct,Design,Error）<br>4、安全规约：权限校验、数据脱敏、参数有效校验、CSRF安全过滤、防重放限制、风控策略等<br>5、MySQL数据库：建表、索引、SQL语句、ORM映射等<br>6、工程结构：应用分层、二方库依赖（坐标命名、接口约定、pom配置）、服务器端各项配置（TCP超时、句柄数、JVM参数等）</p></blockquote><h1 id="熟知的规范"><a href="#熟知的规范" class="headerlink" title="熟知的规范"></a>熟知的规范</h1><p>　　对于大家已经烂熟于心并已习惯遵守的一些编码规范，比如类名、常量的命名、数组的定义、Long类型的字面等，就不在此一一列出了，只想就一些平时编码中较容易个性化，并可能会存在争议的规范进行一番探讨。为了便于说明，用<strong>G</strong>表示规范出自于<code>Google Java Style</code>，<strong>A</strong>表示规范出自于<code>阿里巴巴Java开发手册</code>。</p><blockquote><p>[A]IDE的<code>text file encoding</code>设置为UTF-8；IDE中文件的换行符使用Unix格式，不要使用Windows格式([G]文件编码：UTF-8)</p></blockquote><p>　　看似简单的一个编码约定，在实际开发过程中却经常出现不一致，由于我们是中文操作系统，系统编码是GBK。当两个协作的开发人员IDE，一个采用系统默认编码，一个设置为UTF-8，那么二人看对方写的中文注释就各自都是乱码了，很尴尬。对于“换行符使用Unix格式”，这个在编写shell和hive脚本时踩过好几次坑，而且错误提示很隐晦，一时半会还真察觉不出来，只能说这个规范请务必遵守！</p><blockquote><p>[A]代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p></blockquote><p>　　大多数程序员还是都会遵从英文的命名方式，但在实际工作中还真有遇到过拼音与英文混用的命名，比如创建报文的函数命名为<code>createBaowen</code>，看起来怪怪的，有点不伦不类。</p><blockquote><p>[A]抽象类命名使用Abstract或Base开头；异常类使用Exception结尾；测试类以它要测试的类的名称开始，以Test结尾</p></blockquote><p>　　以spring源码为例，其抽象类都是以Abstract开头，异常类以Exception结尾，测试类则是以Tests结尾。</p><blockquote><p>[A]POJO类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。</p></blockquote><p>　　这个问题一说大家都知道，但实际却是很容易被忽视！因为Boolean通常表达“是”或“否”的意思，可能一遇到布尔变量，大家会习惯性地将它与is关联起来，“很自然”地就会以is开头定义变量。但笔者想说的是，这其实反应了至少两个问题：1、对<a href="http://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/" target="_blank" rel="noopener">JavaBean属性命名规范</a>不熟；2、对框架解析POJO的原理不熟，如RPC反向解析、spring MVC参数绑定、MyBatis处理映射等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isActive;</span><br><span class="line"><span class="comment">//lombok、Eclipse生成getter、setter的结果如下，框架会误把变量解析成active</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isActive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActive</span><span class="params">(<span class="keyword">boolean</span> isActive)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.isActive = isActive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在搞清这两个问题前，还是建议老老实实按规范来吧。</p><blockquote><p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<strong>单数</strong>形式，类名若有复数含义，则可使用复数形式。</p></blockquote><p>　　实际工作中看到过包名包含下划线的，如<code>org.sherlockyb.user_manage.dao</code>，还是有必要统一一下。</p><blockquote><p>[A]不允许任何魔法值（即未经定义的常量）直接出现在代码中。<br><strong>反例</strong>：String key &#x3D; “Id#taobao_” + tradeId;<br>​           cache.put(key, value);</p></blockquote><p>　　避免硬编码问题是每个程序员都应该具备的基本素养，硬编码所带来的可读性差、维护困难等问题，众所周知。</p><blockquote><p>[A,G]采用空格缩进，禁止使用tab字符。</p></blockquote><p>　　这是Google和ali一致的规约，只不过前者是一个tab对应2个空格，后者则是4个空格。之所以不提倡tab键，是因为不同的IDE对tab键的“翻译”默认有所差异，容易因不同程序员的个性化而导致同一份代码的格式混乱。</p><blockquote><p>[A,G]单行字符数限制不超过120&#x2F;100个字符，超出需要换行，换行时遵循如下规则：<br>1）[A,G]第二行相对于第一行缩进4个空格，从第三行开始，不再继续缩进。<br>2）[A]运算符或方法调用的点符号与下文一起换行([G]若是<strong>非赋值运算符</strong>，则在该符号前断开；若是<strong>赋值运算符</strong>或<code>foreach</code>中的分号，则在该符号后断开)。<br>4）[A]方法调用时，多个参数，需要换行时，在逗号后进行([G]逗号与前面的内容留在同一行)。<br>5）在括号前不要换行。</p></blockquote><p>　　对于单行字符限制，阿里的是120，Google的是100。个人觉得120略长，特别是当用笔记本码代码时，对于超限的代码行，经常要用横向滚动条，不太友好，个人推荐100的限制。</p><blockquote><p>没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p></blockquote><p>　　在变量较多时，这种对齐是一种累赘。虽说有IDE的自动格式化功能，但多人协作时，难保各自的格式化没有差异，会因格式变化而造成不必要的代码行改动，无疑会给你的代码合并徒增困扰。</p><blockquote><p>方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。</p></blockquote><p>　　代码分块就如同文章分段，整洁的代码具有更强的自解释性。</p><blockquote><p>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。作为提供方，接口过时必须加@Deprecated注解，并清晰地说明采用的新接口或者新服务是什么；作为调用方，有义务去考证过时方法的新实现是什么。</p></blockquote><p>　　接口契约，是使用方和调用方良好协作的有效保障，请务必遵守。</p><blockquote><p>所有的相同类型的包装类对象之间<strong>值的比较</strong>，全部用equals方法比较。<br>说明：对于<code>Integer var = ?</code>在**-128至127**范围内的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用&#x3D;&#x3D;进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是个大坑，推荐使用equals方法进行判断。</p></blockquote><p>　　这里补充几点，除了Integer，其他包装类型如Long、Byte等都有各自的cache。这里只提到了等值比较，对于&gt;,&lt;等非等值比较，没必要手动拆箱去比较，包装类型之间直接可以比较大小，亲测有效。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long a = <span class="keyword">new</span> Long(<span class="number">1000L</span>);</span><br><span class="line">Long b = <span class="keyword">new</span> Long(<span class="number">222L</span>);</span><br><span class="line">Long c = <span class="keyword">new</span> Long(<span class="number">2000L</span>);</span><br><span class="line">Assert.isTrue(a &gt; b &amp;&amp; a &lt; c);  <span class="comment">//断言成功</span></span><br></pre></td></tr></table></figure><blockquote><p>[A]关于基本数据类型与包装数据类型的使用标准如下：<br>1）所有的POJO类属性必须使用包装数据类型。<br>2）RPC方法的返回值和参数必须使用包装数据类型。<br>3）所有的局部变量使用基本数据类型。<br>说明：POJO类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE问题，或者入口检查，都<strong>由使用者来保证</strong>。</p></blockquote><p>　　基本类型作为入参和返回值有多种弊病，如不情愿的默认值，NPE风险等，除了局部变量，其他慎用。</p><blockquote><p>序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列化失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。</p></blockquote><p>　　serialVersionUID是Java为每个序列化类产生的版本标识：版本相同，相互之间则可序列化和反序列化；版本不同，反序列化时会抛出InvalidClassException。因不同的jdk编译很可能会生成不同的serialVersionUID默认值，通常需要显式指定，如1L。</p><blockquote><p>[A]final可以声明类、成员变量、方法、以及本地变量，下列情况使用final关键字：<br>1）不允许被继承的类，如：String类。<br>2）不允许修改引用的域对象，如：POJO类的域变量。<br>3）不允许被重写的方法，如：POJO类的setter方法。<br>4）不允许运行过程中重新赋值的局部变量，如传递给匿名内部类的局部变量。</p></blockquote><p>　　final关键字有诸多好处，比如JVM和Java应用都会缓存final变量，以提高性能；final变量可在多线程环境下放心共享，无需额外的同步开销；JVM会对final修饰的方法、变量及类进行优化等，详情可见<a href="http://www.importnew.com/7553.html" target="_blank" rel="noopener">深入理解Java中的final关键字</a>。</p><blockquote><p>慎用Object的clone方法来拷贝对象。<br>说明：对象的clone方法默认是浅拷贝，特别是引用类型成员。若想实现深拷贝，需要重写clone方法实现属性对象的拷贝。</p></blockquote><p>　　Java中的赋值操作都是值传递，比如我们常用来“复制”DTO的工具，无论是spring的BeanUtils.copyProperties，还是Apache commons的BeanUtils.cloneBean，实际上也只是两个DTO之间成员的引用复制，成员指向的对象还是同一个，用到此类工具的时候要有这个意识，不然容易踩坑。</p><blockquote><p>[A]类成员与方法访问控制从严：<br>1）如果不允许外部直接通过new来创建对象，那么构造方法必须是private。<br>2）工具类不允许有public或default构造方法。<br>3）类非static成员变量并且与子类共享，必须是protected。<br>4）类非static成员变量并且仅在本类使用，必须是private。<br>5）类static成员变量如果仅在本类使用，必须是private。<br>6）若是static成员变量，必须考虑是否为final。<br>7）类成员方法只供类内部调用，必须是private。<br>8）类成员方法只对继承类公开，那么限制为protected。<br><strong>说明</strong>：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p></blockquote><p>　　<strong>最小权限原则</strong>（Principal of least privilege，POLP）是每个程序员应遵守的，可有效避免数据以及功能受到错误或恶意行为的破坏。</p><blockquote><p>[A]ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常。</p></blockquote><p>　　这里补充一点，<strong>SubList并未实现Serializable接口</strong>，若RPC接口的List类型参数接受了SubList类型的实参，则在RPC调用时会报出序列化异常。比如我们常用的guava中的Lists.partition，切分后的子list实际都是SubList类型，在传给RPC接口之前，需要用**new ArrayList()**包一层，否则会报序列化异常。</p><blockquote><p>[A]在subList场景中，<strong>高度注意</strong>对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生ConcurrentModificationException异常。</p></blockquote><p>　　这个还是得从源码的角度来解释。SubList在构造时实际是直接持有了原list的引用，其add、remove等操作实际都是对原list的操作，我们不妨以add为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line">  checkForComodification();        <span class="comment">// 检查this.modCount与原list的modCount是否一致</span></span><br><span class="line">  l.add(index+offset, element);    <span class="comment">// 原list新增了一个元素</span></span><br><span class="line">  <span class="keyword">this</span>.modCount = l.modCount;      <span class="comment">// 将原list更新后的modCount同步到this.modCount</span></span><br><span class="line">  size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　可以看出，SubList生成之后，通过SubList进行add、remove等操作时，modCount会同步更新，所以没问题；而如果此后还对原list进行add、remove等操作，SubList是感知不到modCount的变化的，会造成modCount不一致，从而报出ConcurrentModificationException异常。故通常来讲，<strong>从原list取了SubList之后，是不建议再对原list做结构上的修改的</strong>。</p><blockquote><p>[A]使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add&#x2F;remove&#x2F;clear方法会抛出UnsupportedOperationException异常。</p></blockquote><p>　　类似的，guava的Maps.toMap方法，返回的是一个<code>ImmutableMap</code>，是不可变的，不能对其调用add、remove等操作，使用时应该有这个意识！</p><blockquote><p>在JDK7版本及版本以上，Comparator必须满足：1）x,y比较结果和y,x比较结果相反；2）x&gt;y,y&gt;z,则x&gt;z；3）x&#x3D;y,则x,z比较结果和y,z比较结果相同。不然Arrays.sort，Collections.sort会报IllegalArgumentException异常。</p></blockquote><p>　　JDK从1.6升到1.7之后，默认排序算法由<a href="http://blog.csdn.net/ghsau/article/details/42060651" target="_blank" rel="noopener">MergeSort</a>变为<a href="http://www.voidcn.com/article/p-awvclgax-qb.html" target="_blank" rel="noopener">TimSort</a>，对于任意两个比较元素x、y，其Comparator结果一定要是确定的，特别是对于x&#x3D;y的情况，确定返回0，否则可能出现<code>Comparison method violates its general contract!</code>错误。</p><blockquote><p>[A]线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br><strong>说明</strong>：Executors返回的线程池对象的弊端如下：<br>1）<strong>FixedThreadPool</strong>和<strong>SingleThreadPool</strong>：允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。<br>2）<strong>CachedThreadPool</strong>和<strong>ScheduledThreadLocal</strong>：允许的创建线程数为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p></blockquote><p>　　现在一般很少会用Executors去创建线程池了，通常会使用spring的<code>ThreadPoolExecutorFactoryBean</code>或者guava的<code>MoreExecutors.listeningDecorator</code>对前者包装一下，对于像线程数、队列大小等都是通过配置来设定。</p><blockquote><p>[A]高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p></blockquote><p>　　一句话概括就是，能不锁就不锁，即便锁，也尽量使锁的粒度最小化。</p><blockquote><p>[A]表达异常分支时，少用if-else方式，可使用卫语句代替。对于<code>if()...else if()...else...</code>方式，请勿超过3层。对于超过的，可使用卫语句、策略模式、状态模式等来实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接着写else的业务逻辑代码;</span></span><br></pre></td></tr></table></figure><p>　　冗长的if-else可读性差，维护困难，推荐使用卫语句，逻辑清晰明了。</p><blockquote><p>[A]代码修改的同时，注释也做同步修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p></blockquote><p>　　这个在实际工程代码中还真看到过不少，代码与注释牛头不对马嘴，尽量别留坑给后来者，应该算在程序猿的基本素养之内吧。</p><blockquote><p>谨慎注释掉代码。在上方详细说明，而不是简单的注释掉。如果无用，则删除。<br><strong>说明</strong>：代码被注释掉有两种可能：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p></blockquote><p>　　这个就更无力吐槽了，比上一条更常见，so，这条规范强烈推荐！</p><blockquote><p>1）对于注释的要求：第一、能准确反映设计思想和代码逻辑；第二、能描述业务含义，使别人能迅速了解到代码背后的信息；第三、好的命名、代码结构是自解释性的，注释力求精简准确、表达到位。避免过多过滥的注释。<br>2）finally块必须对资源对象、流对象进行关闭，有异常也要做try-catch。若是JDK7及以上，可使用<code>try-with-resources</code>。不能再finally块中使用return，finally块中的return返回后方法结束执行，不会再执行try块中的return语句。<br>3）防止NPE，是程序员的基本素养，注意NPE产生的场景：<br>　　1.返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE<br>　　2.数据库的查询结果可能为null。<br>　　3.远程调用返回对象时，一律要求进行空指针判断，防止NPE。<br>　　4.对于Session中获取的数据，建议NPE检查，避免空指针。<br>　　5.级联调用obj.getA().getB().getC()；一连串调用，易产生NPE。<strong>正例</strong>：使用JDK8的Optional类来防止NPE问题。<br>4）在代码中使用“抛异常”还是“返回错误码”，对于公司外的http&#x2F;api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑<strong>使用Result</strong>方式，封装isSuccess()方法、“错误码”、“错误简短信息”。<br>5）避免出现重复的代码（Don’t Repeat Yourself），即DRY原则。</p></blockquote><p>　　以上几条，皆是毫无争议的基本规范，且行且遵守。</p><blockquote><p>1）日志文件推荐至少保存15天，因为有些异常具备以“周”为频次发生的特点。<br>2）对trace&#x2F;debug&#x2F;info级别的日志输出，必须使用条件输出形式或者使用占位符的方式。以避免不必要的字符串拼接，浪费系统资源。<br>3）避免重复打印日志，浪费磁盘空间，对于特定包的日志，务必设置<code>additivity=false</code>。<br>4）异常信息应该包括两类信息：<strong>案发现场信息</strong>和<strong>异常堆栈信息</strong>。如果不处理，则通过关键字throws往上抛。</p></blockquote><p>　　关于日志的几条不错的规范。日志作为服务器行为的日常轨迹，对于统计分析、故障排错意义巨大，要慎重对待才是。</p><blockquote><p>1）好的单元测试必须遵守AIR原则。<br>　　A：Automatic（自动化）。全自动执行，非交互式的。使用assert验证，而非System.out。<br>　　I：Independent（独立性）。单侧用例之间不能产生依赖，互相独立。<br>　　R：Repeatable（可重复）。可重复执行，不能受到外界环境的影响。对于外部依赖，通过spring等DI框架注入一个本地（内存）实现或者Mock实现。<br>2）单元测试的基本目标：语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100%。<br>3）编写单元测试代码遵守BCDE原则：<br>　　B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。<br>　　C：Correct，正确的输入，并得到预期的结果。<br>　　D：Design，与设计文档相结合，来编写单元测试。<br>　　E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期结果。</p></blockquote><p>　　关于单元测试的几条不错的规范。单元测试是代码质量的有效保障！太多的想当然、自以为是，往往会跳过单测，最终自食其果。曾经的笔者也犯过类似毛病，还好及时纠正。</p><h1 id="新奇的收获"><a href="#新奇的收获" class="headerlink" title="新奇的收获"></a>新奇的收获</h1><p>　　这里将列出一些笔者觉得有新收获的规范，有的是平时编码过程中没有严格遵守的，比如switch中default偶尔加偶尔不加；有的则是目前还不太清楚的规范。</p><blockquote><p>[A]杜绝完全不规范的缩写，避免望文不知义。<br><strong>反例</strong>：AbstractClass的“缩写”命名成AbsClass；condition的“缩写”命名成condi，此类随意缩写严重降低了代码的可阅读性。</p></blockquote><p>　　说来惭愧，这类不规范的缩写，笔者之前还真干过几次。有时候是觉着变量太长，导致明明逻辑很简单的一条语句，就超过了列限制，于是乎主观地缩写命名，如mergedRegionReportDtos缩写为mRegReportDtos，accountIdToHourReportDtos缩写为accountIdToHrDtos，相当混乱有木有！所以，如果对英文单词的缩写拿不定的话，还是直接用原单词吧，长点就长点，可读性很重要。</p><blockquote><p>[A]如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式，有利于阅读者快速理解架构设计理念。类示例：<strong>OrderFactory</strong>、<strong>LoginProxy</strong>、<strong>ResourceObserver</strong>。</p></blockquote><p>　　没啥好说的，同样是为了提升代码的自解释性。spring源码中随处可见这样的命名风格：<code>AbstractAutowireCapableBeanFactory</code>、<code>Cglib2AopProxy</code>、<code>BeanDefinitionParserDelegate</code>等</p><blockquote><p>[A]接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法有关，并且是整个应用的基础常量。<br><strong>正例</strong>：接口方法签名：void f();<br>​           接口基础常量表示：String COMPANY &#x3D; “alibaba”;<br><strong>反例</strong>：接口方法定义：public abstract void f();<br><strong>说明</strong>：JDK8中接口允许有默认实现，那么这个default方法，是对所有实现类都有价值的默认实现。</p></blockquote><p>　　目前所见过的组内代码，有太多的接口中方法都是加了public，也许是后来的编码者看到前任留下的已有方法都加了，为了保持一致，于是乎也加了public。说到底还是最初的良好规范没有形成，导致给后来者以错误的指引！简单才是美，把public 去掉吧。</p><blockquote><p>[A]接口的命名规则：如果是形容能力的接口名称，取对应的形容词做接口名（通常是-able的形式）<br><strong>正例</strong>：AbstractTranslator实现Translatable</p></blockquote><p>　　Log4j中的AppenderAttachable，JDK中的AutoCloseable，Appendable等。</p><blockquote><p>[A]各层命名规约：<br>A)Service&#x2F;DAO层方法命名前缀规约<br>​     1）获取对象时，单个用get&#x2F;多个用list；2）获取统计值用count<br>​     3）插入用save&#x2F;insert；4）删除用remove&#x2F;delete；5）修改用update</p></blockquote><p>　　关于资源的CRUD，这块的方法命名相当乱，太容易个性化了！至少目前组内代码，要啥有啥：query与get并存，查询列表和计数的都是get，并未做区分；一会儿remove，一会儿delete；既有save也有insert。当你Ctrl+O的时候，想找个count某元素的方法时贼费劲，急需统一！</p><blockquote><p>[A]不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。<br><strong>说明</strong>：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。<br><strong>正例</strong>：缓存相关常量放在类CacheConsts下，系统配置相关常量放在类ConfigConsts下。</p></blockquote><blockquote><p>[A]常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br>1）跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。<br>2）应用内共享常量：放置在一方库中，通常是modules中的constant目录下。<br>3）子工程内共享常量：当前子工程的constant目录下。<br>4）包内共享常量：当前包下单独的constant目录下。<br>5）类内共享常量：直接在类内部private static final定义。</p></blockquote><p>　　常量的维护也可运用设计模式思想，单一职责，分层，严格控制作用域，使常量更清晰，易于理解，便于维护。</p><blockquote><p>[A]类内方法定义顺序依次是：共有方法或保护方法 &gt; 私有方法 &gt; getter&#x2F;setter方法。但有个<em>规则特例</em>：[A,G]当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起。即<strong>重载永不分离</strong>。<br><strong>说明</strong>：共有方法是类的调用者和维护者最关系的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有Service和DAO的getter&#x2F;setter方法放在类的最后。</p></blockquote><p>　　方法的排版要有秩序，这样在我们<code>Ctrl+O</code>的时候才能更方便的查阅方法列表。阿里的约定是比较通用的规则，对此，Google的看法则不同，它认为类的成员顺序不存在唯一的通用法则，重要的是，每个类应该以维护者所能解释的排序逻辑去排序它的成员。<strong>常见的反例</strong>：新的方法总是习惯性地添加到类的结尾，排序毫无意义。</p><blockquote><p>[A]对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<br><strong>说明</strong>：线程一需要对表A、B、C依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。</p></blockquote><p>　　从死锁产生的条件出发来避免死锁。比如我们根据一批ids批量更新数据库记录时，预先对ids排序，也是一种能有效降低死锁发生概率的措施。</p><blockquote><p>[A]使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法被执行到，避免主线程无法执行至await方法，直到超时才返回结果。</p></blockquote><blockquote><p>避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed导致的性能下降。<br><strong>说明</strong>：Random实例包括java.util.Random的实例或者Math.random的方式。<br><strong>正例</strong>：在JDK7之后，可以直接使用API ThreadLocalRandom，而在JDK7之前，需要编码保证每个线程持有一个实例。</p></blockquote><blockquote><p>volatile关键字解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是<strong>如果多写，同样无法解决线程安全问题</strong>。如果是count++操作，使用如下类实现：<code>AtomicInteger count = new AtomicInteger(); count.addAndGet(1)</code>； 如果是JDK8，推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）。</p></blockquote><p>　　volatile关键字只是保证了同一个变量在多线程中的可见性，更多的是用于修饰作为开关状态的变量。但是<strong>volatile只提供了内存可见性，而没有提供原子性</strong>！volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最近的值刷新到主内存，对于像<code>boolean flag = true</code>等原子性赋值操作是没问题的，但<strong>volatile不能保证复合操作的原子性</strong>，如<code>count++</code>。</p><blockquote><p>[A]除常用方法（如getXxx&#x2F;isXxx）等外，不要在条件判断中执行其他复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p></blockquote><p>　　这个笔者之前确实有过这样的坏习惯，为了省略一条赋值语句，将if中的条件搞得比较复杂，代码冗长，可读性也差，得不偿失。</p><blockquote><p>[A]参数校验与否：<br>需要校验的：1）对外提供的开发接口，不管是RPC&#x2F;API&#x2F;HTTP接口；2）敏感权限入口；3）需要极高稳定性和可用性的方法<br>不需校验的：1）极有可能被循环调用的方法。<strong>但在方法说明里必须注明外部参数检查要求</strong>。2）底层调用频度较高的方法。如一般Service会做参数校验，到了DAO层，参数校验可省略。3）被声明为private只会被自己代码所调用的方法，如果能确定传入参数已做过检查或者肯定不会有问题，此时可不校验参数。</p></blockquote><p>　　过多的参数校验，不仅是冗余代码，而且还影响性能，只在必要的时候做校验。</p><blockquote><p>1）隶属于用户个人的页面或功能必须进行权限控制校验。<strong>说明</strong>：防止没有做<strong>水平权限校验</strong>就可随意访问、修改、删除别人的数据。<br>2）用户请求传入的任何参数必须做有效性校验。忽略参数校验可能导致：1）page size过大导致内存溢出；2）恶意order by导致数据库慢查询；3）任意重定向；4）SQL注入；5）反序列化注入；6）正则输入源串拒绝服务ReDos<br>3）表单、AJAX提交必须执行CSRF（Cross-site request forgery）安全过滤<br>4）在使用平台资源，譬如短信、邮件、电话、下单、支付，必须<strong>实现正确的防重放机制</strong>，如数量限制、疲劳度控制、验证码校验，避免被滥刷，资损。<br>5）发帖、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p></blockquote><p>　　基本的安全意识还是要有的，一旦踩了坑，后果不堪设想。</p><blockquote><p>1）数据库表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsigned tinyint（1表示是，0表示否）。<br>2）<strong>禁用保留字</strong>，如desc、range、match、delayed等，参考MySQL官方保留字。<br>3）主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名为idx_字段名。<br>4）varchar是可变长字符串，不预先分配存储空间，长度不要超过5000，如果大于此值，则选用text，独立出来一张表，用主键来对应，避免影响其他字段索引效率。<br>5）字段允许适当冗余，以提高查询性能，但必须考虑数据一致性。冗余字段应遵守：1.不是频繁修改；2.不是varchar超长字段，更不能是text字段。<br>6）单表行数超过500万行或者单表容量超过2GB，才推荐分库分表。<br>7）页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br>8）若有order by的场景，请注意利用索引的<strong>有序性</strong>。order by最后的字段是组合索引的一部分，并放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。<br>正例：where a&#x3D;? and b&#x3D;? order by c; 索引：a_b_c<br>9）利用覆盖索引来进行查询操作，<strong>避免回表</strong>。很形象的比喻：如果一本书需要知道第11章是什么标题，会翻开第11章对应的那一页吗？目录（索引列）浏览一下就好，这个目录就是起到覆盖索引的目的。覆盖索引的explain结果中，extra列会出现：using index。<br>10）利用延迟关联或子查询优化超多分页场景。<strong>说明</strong>：MySQL并不是跳过offset行，而是取offset+N行，然后放弃前offset行，返回N行，那当offset特别大的时候，效率就非常低下。<br>11）建组合索引的时候，<strong>区分度最高的在最左边</strong>。举极端例子：如果where a&#x3D;? and b&#x3D;?，a的列几乎接近于唯一值，那么只需单建idx_a索引即可。<br>12）不要使用count(列名)或count(常量)来替代count(*)，count(*)是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。count(列名)会忽略此列为NULL值的行。<br>13）不得使用外键与级联，一切外键概念必须在应用层解决。<strong>外键与级联更新适用于单机低并发</strong>，不适合分布式、高并发集群：级联更新时强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。<br>14）数据订正时，删除和修改记录时，要先select，避免出现误删除，确认无误后才能执行更新语句。<br>15）在表查询中，一律不要使用*作为查询的字段列表，需要哪些字段必须明确写明。<br>16）@Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p></blockquote><p>　　数据库操作的一些基本常识，数据库性能变坏，多数情况是由于上层应用的不合理使用导致的。</p><blockquote><p>高并发服务器建议调小TCP协议的time_wait超时时间。<br><strong>说明</strong>：操作系统默认240秒后，才会关闭处于time_wait状态的连接，在高并发访问下，服务器端会因为处于time_wait的连接数太多，可能无法建立新的连接，故需要在服务器上调小此阈值。对于Linux服务器，变更&#x2F;etc&#x2F;sysctl.conf中的<code>net.ipv4.tcp_fin_timeout</code>。</p></blockquote><h1 id="个人补充"><a href="#个人补充" class="headerlink" title="个人补充"></a>个人补充</h1><p>　　这里补充一部分手册之外的规范，一些是笔者在实际工作中遇到过，实践过的经验，一些是组内大牛分享实践的，若有不合理的地方还请大家指正。　　</p><blockquote><p>1）客户端socket超时配置应区分连接超时和读超时。用connect timeout控制连接建立的超时时间，用read timeout控制流读取数据的超时时间。代码示例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socket.connect(<span class="keyword">new</span> InetSocketAddress(host, port), <span class="number">2000</span>);  <span class="comment">//设置连接超时为2s。</span></span><br><span class="line">socket.setSoTimeout(<span class="number">10</span>*<span class="number">1000</span>);  <span class="comment">//设置读超时为10s。</span></span><br></pre></td></tr></table></figure><blockquote><p>2）对于QPS非常高的RPC接口，应该将RPC客户端socket的读超时尽量设短，以便当该接口不可用时，能快速超时返回，使客户端能及时处理，避免上层应用因此环节等待时间过长而将上层服务打垮。<br>例如，<code>socket.setSoTimeout(1000)</code>，将读超时设置为1s。</p></blockquote><blockquote><p>3）数据库查询时，除了order by需要利用索引的有序性，对于group by操作，在数据量大时，有无利用索引的性能差异特别大。</p></blockquote><blockquote><p>4）数据库批量操作时，要分批进行，避免一次操作涉及记录数过多，导致事务超时。<br>例如：根据ids批量更新数据，先用Lists.partition分批拆分成多个子list，然后每个list走一次更新，使单个事务尽快结束，分批大小一般设置1000。</p><p>5）字符串分割时，用Apache Commons中的StringUtils.splitPreserveAllTokens(…)代替JDK中的str.split(..)，避免JDK对末尾空串的过滤导致结果与预期不一致。</p></blockquote><p>　　写在最后，笔者想用<code>阿里巴巴Java开发手册</code>的作者孤尽大神的采访名言来结束此文：</p><blockquote><p>别人都说我们是搬砖的码农，但我们知道自己是追求个性的艺术家。也许我们不会过多在意自己的外表和穿着，但<strong>在我们不羁的外表下，骨子里追求着代码的美、系统的美，代码规范其实就是一个对程序美的定义</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地为Struts2的action加监控日志</title>
      <link href="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/"/>
      <url>/2017/12/04/how-to-add-monitor-log-for-struts2-actions/</url>
      
        <content type="html"><![CDATA[<p>　　好久没写博客啦，一晃竟已有5个月了，实在是惭愧的很，待整理的checklist还是挺多的，努力一一补上！今天这篇博文源于工作中的一个case：为Struts2中的特定action添加监控日志。对Struts2熟悉的童鞋可能会说，这个不就是常规的aop功能吗，直接利用其自带的拦截器（Interceptor）机制就可轻易实现，so easy！但最终笔者并没有这么干，为何呢？后面会说。这期间，笔者也走了好几条弯路，皆以失败告终，其中牵涉到aop代理的好一些细节知识点，以及一些常见的aop误区，如果没有这些弯路的尝试，可能都不会注意到它，故记录于此，引以为鉴。</p><a id="more"></a><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>　　最近拿到一个需求：对指定的部分请求增加日志监控，即在方法调用前，做一些统一的业务逻辑判断，对于符合条件的则打印方法名、参数等上下文信息，便于后续统计分析。由于历史原因，当前工程较老，其MVC框架还是基于Struts2的！当然，由于忍受不了Struts2的各种安全漏洞、笨重不堪等问题，该工程的MVC框架也正在向spring MVC迁移。目前的情况是，Struts2和spring MVC并存，而此次所要拦截的请求都属于老的接口，问题就变成如何为Struts2中的action增加日志监控。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、初体验"><a href="#一、初体验" class="headerlink" title="一、初体验"></a>一、初体验</h2><p>　　背景中已提到，项目的MVC框架最终会去掉Struts2并完全切换到spring MVC，因此，<strong>为了避免与Struts2过渡耦合</strong>，一开始我就避开了其自带的Interceptor机制，试图用spring aop来解决它，这样就跟MVC框架无关了，后面即便切换到spring MVC，这块也不用再改动。</p><p>　　首先想到了spring中的自动代理创建器，为了与现有的代码保持一致，选用了基于Bean名称匹配的BeanNameAutoProxyCreator，为了讲解的方便，笔者写了个简单的<a href="https://github.com/sherlockyb/blog-demos/tree/master/struts2" target="_blank" rel="noopener">demo</a>，相关类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sherlockyb</span></span><br><span class="line"><span class="comment"> * @2017年12月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span>, <span class="title">ServletResponseAware</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"say: hello A"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"say: hello B"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"say: hello C"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sherlockyb</span></span><br><span class="line"><span class="comment"> * @2017年12月10日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(getClass());</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    log.info(<span class="string">"greeting before invocation..."</span>);</span><br><span class="line">    Object result = invocation.proceed();</span><br><span class="line">    log.info(<span class="string">"greeting after invocation"</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　数据库的声明式事务配置<code>appContext-struts2-db.xml</code>如下，之所以要把这个配置专门列出来，因为它与后面的一次报错息息相关，我们暂且往下走。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">class</span>=<span class="string">"org.sherlockyb.blogdemos.struts2.aop.TransactionManagerAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"helloPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.sherlockyb..*HelloService*.*(..))"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"helloPointcut"</span> <span class="attr">order</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　现在需要对<code>helloA</code>和<code>helloB</code>加日志监控，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"greetingInterceptor"</span> <span class="attr">class</span>=<span class="string">"org.sherlockyb.blogdemos.struts2.aop.GreetingMethodInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>helloAction<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>greetingAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"greetingAdvisor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"greetingInterceptor"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"patterns"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　然后用<a href="https://www.getpostman.com/" target="_blank" rel="noopener">postman</a>测试action请求<code>http://localhost/hello/helloA.action</code>，直接报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodException: com.sun.proxy.$Proxy39.helloA()</span><br><span class="line">at ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:<span class="number">1247</span>)</span><br><span class="line">at ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:<span class="number">68</span>)</span><br><span class="line">at com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:<span class="number">117</span>)</span><br><span class="line">at com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:<span class="number">108</span>)</span><br><span class="line">at ognl.OgnlRuntime.callMethod(OgnlRuntime.java:<span class="number">1370</span>)</span><br><span class="line">at ognl.ASTMethod.getValueBody(ASTMethod.java:<span class="number">91</span>)</span><br><span class="line">at ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:<span class="number">212</span>)</span><br><span class="line">at ognl.SimpleNode.getValue(SimpleNode.java:<span class="number">258</span>)</span><br><span class="line">at ognl.Ognl.getValue(Ognl.java:<span class="number">467</span>)</span><br><span class="line">at ognl.Ognl.getValue(Ognl.java:<span class="number">431</span>)</span><br><span class="line">at com.opensymphony.xwork2.ognl.OgnlUtil$<span class="number">3</span>.execute(OgnlUtil.java:<span class="number">352</span>)</span><br><span class="line">at com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecuteMethod(OgnlUtil.java:<span class="number">404</span>)</span><br><span class="line">at com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(OgnlUtil.java:<span class="number">350</span>)</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:<span class="number">430</span>)</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:<span class="number">290</span>)</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:<span class="number">251</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>　　NoSuchMethodException？奇了怪了，<code>TestAction</code>中明明有<code>helloA</code>方法，并且patterns配置中也加了<code>org.sherlockyb.blogdemos.struts2.web.action.helloA</code>的配置，为啥最终生成的代理类却没有这个方法呢？到底是哪里出了问题？带着这个疑问，我们直接从异常信息着手：既然它报的是<code>$Proxy39</code>这个类没有<code>helloA</code>方法，那我们就来debug看一下<code>$Proxy39</code>究竟有哪些内容。</p><p>　　因为<code>OgnlRuntime</code>粒度太细了，太多地方调用，若在这里面打断点还得根据条件断点才能定位到TestAction的调用，比较麻烦，故笔者选择了在调用栈中所处位置较为上层的<code>DefaultActionInvocation</code>。定位到异常信息<code>DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</code>对应的源码，断点打在了源码的第430行，如下：</p><p><img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug1.png" alt="1"></p><p>然后debug模式运行应用，截获的debug信息如下：</p><p><img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug2.png" alt="1"></p><p>　　从1处可以看出，原来<code>$Proxy39</code>是JDK动态代理生成的代理类，至于为啥是JDK代理，可以注意到变量<strong>proxyTargetClass</strong>默认是<strong>false</strong>的，也就是说spring aop 默认采用JDK动态代理。我们知道，JDK动态代理是面向接口的，只会为目标类所实现的接口生成代理方法，查看2处<code>interface</code>的内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[interface org.apache.struts2.interceptor.ServletRequestAware, interface org.apache.struts2.interceptor.ServletResponseAware, interface com.opensymphony.xwork2.Action, interface com.opensymphony.xwork2.Validateable, interface com.opensymphony.xwork2.ValidationAware, interface com.opensymphony.xwork2.TextProvider, interface com.opensymphony.xwork2.LocaleProvider, interface java.io.Serializable]</span><br></pre></td></tr></table></figure><p>这些不正是<code>TestAction</code>直接（ServletRequestAware等）或间接（Action等）实现的接口嘛，而<code>helloA</code>和<code>helloB</code>是<code>TestAction</code>自定义的方法，并不在这些接口的方法中，那么最终的代理类<code>$Proxy39</code>自然不会含有这俩方法，调用时就会报上述错误。</p><h2 id="二、改进"><a href="#二、改进" class="headerlink" title="二、改进"></a>二、改进</h2><p>　　我们的目的是为<code>TestAction</code>中的<code>helloA</code>和<code>helloB</code>方法进行动态代理，但它们不属于<code>TestAction</code>所实现接口中的任何一个方法，显然JDK动态代理满足不了需求，转向CGLib代理，于是将<strong>proxyTargetClass</strong>参数改为<strong>true</strong>，强制其走CGLib代理。配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>依旧用postman测试，依旧报错了：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] 2017-12-12 23:17:49,450 [resin-port-80-48] struts2.dispatcher.DefaultDispatcherErrorHandler (CommonsLogger.java:42) -Exception occurred during processing request: Unable to instantiate Action, helloAction,  defined for 'helloA' in namespace '/hello'Error creating bean with name 'helloAction' defined in class path resource [appContext-struts2-action.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class com.sun.proxy.$Proxy40]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy40</span><br><span class="line">Unable to instantiate Action, helloAction,  defined for 'helloA' in namespace '/hello'Error creating bean with name 'helloAction' defined in class path resource [appContext-struts2-action.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class com.sun.proxy.$Proxy40]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy40 - action - file:/D:/DevCode/workspace/blog-demos/struts2/target/classes/org/sherlockyb/blogdemos/struts2/web/action/conf/struts-hello.xml:9:61</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionInvocation.createAction(DefaultActionInvocation.java:<span class="number">317</span>)</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionInvocation.init(DefaultActionInvocation.java:<span class="number">398</span>)</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionProxy.prepare(DefaultActionProxy.java:<span class="number">194</span>)</span><br><span class="line">at org.apache.struts2.impl.StrutsActionProxy.prepare(StrutsActionProxy.java:<span class="number">63</span>)</span><br><span class="line">at org.apache.struts2.impl.StrutsActionProxyFactory.createActionProxy(StrutsActionProxyFactory.java:<span class="number">37</span>)</span><br><span class="line">at com.opensymphony.xwork2.DefaultActionProxyFactory.createActionProxy(DefaultActionProxyFactory.java:<span class="number">58</span>)</span><br><span class="line">at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:<span class="number">565</span>)</span><br><span class="line">at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:<span class="number">81</span>)</span><br><span class="line">at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:<span class="number">99</span>)</span><br></pre></td></tr></table></figure><p>　　我们可以注意到异常栈中最底层的一条错误信息：<code>Cannot subclass final class class com.sun.proxy.$Proxy40</code>，这条错误是导致上述报错的最根本原因（root cause），其对应的调用链详情如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Cannot subclass <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">class</span> <span class="title">com</span>.<span class="title">sun</span>.<span class="title">proxy</span>.$<span class="title">Proxy40</span></span></span><br><span class="line">at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:446)</span><br><span class="line">at net.sf.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:<span class="number">33</span>)</span><br><span class="line">at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:<span class="number">25</span>)</span><br><span class="line">at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:<span class="number">216</span>)</span><br><span class="line">at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:<span class="number">377</span>)</span><br><span class="line">at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:<span class="number">285</span>)</span><br><span class="line">at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:<span class="number">201</span>)</span><br></pre></td></tr></table></figure><p>　　也就是说，当前面配置的<code>BeanNameAutoProxyCreator</code>尝试为目标类<code>com.sun.proxy.$Proxy40</code>生成CGLib代理时，却发现<strong>这货是final的</strong>！也就是说<strong>JDK动态代理生成的代理类是final的</strong>，你们知道这个知识点嘛？反正在此之前我是没留意过这个，知道的童鞋可举个爪，那说明你走的比我远，要继续保持这样的好奇心。我们言归正传，上述错误表明，在<code>BeanNameAutoProxyCreator</code>生效前，已经有<strong>第三者</strong>为<code>TestAction</code>以JDK动态代理的方式生成了代理类，导致无法再进行CGLib代理。这个第三者到底是谁呢？</p><p>　　起初我想到了Struts2的Interceptor机制，会不会是Struts2事先采用JDK动态代理的方式为<code>TestAction</code>生成了代理，以便加上各种Interceptor增强逻辑？很快，我通过debug跟踪Struts2源码否决了这个猜测：</p><blockquote><p>1、action是交给spring管理的，即<code>StrutsSpringObjectFactory</code>，我们知道action的作用域是<strong>prototype</strong>的，即每来一个请求，Struts2都会通过<code>DefaultActionFactory</code>来buildAction，而实际的创建则是委托给<code>StrutsSpringObjectFactory</code>来处理，也就说Struts2是拿到spring容器构建好的action之后，才做后续的Interceptor过程；</p><p>2、通过仔细阅读<code>DefaultActionInvocation</code>的invoke源码可知，Struts2的Interceptor机制既不是通过JDK动态代理来实现，也没有采纳CGLib代理，而是巧用责任链和迭代等代码技巧来实现的，具体细节等后面单独一篇博文细说。</p></blockquote><p>　　那到底是何方神圣偷偷做了这个事儿呢？<strong>谜底尽在源码中</strong>！通过源码来跟踪下action的创建过程：</p><blockquote><p>1、<code>DefaultActionInvocation</code>——action的创建（每次请求必走逻辑）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createAction</span><span class="params">(Map&lt;String, Object&gt; contextMap)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// load action</span></span><br><span class="line">  String timerKey = <span class="string">"actionCreate: "</span> + proxy.getActionName();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    UtilTimerStack.push(timerKey);</span><br><span class="line">    action = objectFactory.buildAction(proxy.getActionName(), proxy.getNamespace(), proxy.getConfig(), contextMap);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> XWorkException(<span class="string">"Unable to intantiate Action!"</span>, e, proxy.getConfig());</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、<code>StrutsSpringObjectFactory</code>——spring容器层面的，bean的创建</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">buildBean</span><span class="params">(String beanName, Map&lt;String, Object&gt; extraContext, <span class="keyword">boolean</span> injectInternal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  Object o;</span><br><span class="line">  <span class="keyword">if</span> (appContext.containsBean(beanName)) &#123;</span><br><span class="line">    o = appContext.getBean(beanName);<span class="comment">//action从spring容器中获取</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Class beanClazz = getClassInstance(beanName);</span><br><span class="line">    o = buildBean(beanClazz, extraContext);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (injectInternal) &#123;</span><br><span class="line">    injectInternalBeans(o);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、<code>AbstractAutowireCapableBeanFactory</code>——spring容器中，bean的初始化以及之后的postProcess过程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException((mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Bean初始化之后，postProcess处理，如一系列的AutoProxyCreator</span></span><br><span class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123; </span><br><span class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　最终定位到<code>AspectJAwareAdvisorAutoProxyCreator</code>，直接看debug调用栈：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug3.png" alt="1"></p><p>　　首先，我们先看下<code>wrapIfNecessary</code>的核心代码片段如下，其大致功能就是为目标bean创建代理类：先看下bean有没有相关的advice，如果有，则通过createProxy为其创建代理类；否则直接返回原始bean！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisedBeans.add(cacheKey);</span><br><span class="line">Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line"><span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.nonAdvisedBeans.add(cacheKey);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里bean的debug信息如下：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug4.png" alt="1"></p><p><code>HelloAction@3d696299</code>，这正是我们在xml中定义的原始bean实例！也就说，<code>AspectJAwareAdvisorAutoProxyCreator</code>就是传说中的第三者。那么问题来了：<code>AspectJAwareAdvisorAutoProxyCreator</code>是在什么情况下又是何时被创建的呢？我们并没有显式地在哪里指定，要让它为<code>HelloAction</code>创建代理，这二者是如何关联的起来的呢？</p><p>　　在eclipse中，定位到<code>AspectJAwareAdvisorAutoProxyCreator</code>类的源码，选中其类名，直接<code>Ctrl+Shift+G</code>查看其在workspace中的所有引用（reference）如下：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug5.png" alt="1"></p><p>　　进一步跟进<code>registerAspectJAutoProxyCreatorIfNecessary</code>方法，直接<code>Ctrl+Shift+H</code>查看该方法的上层调用链：<img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug6.png" alt="debug6"></p><p>　　到这里第一个问题就比较清晰了：由于<code>appContext-struts2-db.xml</code>中通过<code>&lt;aop:config&gt;</code>为数据库操作配置了声明式事务，导致<code>AspectJAwareAdvisorAutoProxyCreator</code>实例的构建。我们再来看第二个问题，即这个AutoProxyCreator是如何与HelloAction关联的，回顾下前面的<code>wrapIfNecessary</code>的源码片段，其中有一个<code>getAdvicesAndAdvisorsForBean</code>方法，它是定义在抽象类AbstractAutoProxyCreator中的抽象方法，其功能如下方的官方注释所说：判断当前目标bean是否需要代理，如果是则返回对应的增强（advice）或切面（advisor）集。具体实现则交给各具体的子类，典型的模板方法设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Return whether the given bean is to be proxied, what additional</span></span><br><span class="line"><span class="comment">  * advices (e.g. AOP Alliance interceptors) and advisors to apply.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">abstract</span> Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource customTargetSource) <span class="keyword">throws</span> BeansException;</span><br></pre></td></tr></table></figure><p><code>AbstractAutoProxyCreator</code>类的继承结构如下：</p><p><img src="/2017/12/04/how-to-add-monitor-log-for-struts2-actions/debug7.png" alt="1"></p><p>其中的<code>AbstractAdvisorAutoProxyCreator</code>很关键，它是第三者<code>AspectJAwareAdvisorAutoProxyCreator</code>的直接父类，并实现抽象方法<code>getAdvicesAndAdvisorsForBean</code>，逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName, TargetSource targetSource) &#123;</span><br><span class="line">List advisors = findEligibleAdvisors(beanClass, beanName);<span class="comment">//找出bean相关的advisors</span></span><br><span class="line"><span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> DO_NOT_PROXY;<span class="comment">//如果没有advisor，则直接返回约定的DO_NOT_PROXY，表示无需代理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下<code>findEligibleAdvisors</code>具体做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前spring容器中所有的Advisor，除了FactoryBean类型的和目前已构建过的</span></span><br><span class="line">  List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">  List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);<span class="comment">//从中筛选出可以应用在bean上的advisor</span></span><br><span class="line">  extendAdvisors(eligibleAdvisors);</span><br><span class="line">  <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">    eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终通过层层代码跳转，我们来到了<code>AopUtils</code>中判定advisor与bean是否匹配的关键逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canApply</span><span class="params">(Pointcut pc, Class&lt;?&gt; targetClass, <span class="keyword">boolean</span> hasIntroductions)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!pc.getClassFilter().matches(targetClass)) &#123;<span class="comment">//先看类级别是否匹配，不匹配就直接返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//方法匹配器：切点的一部分，判定目标方法是否与切点表达式匹配</span></span><br><span class="line">  MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">  IntroductionAwareMethodMatcher introductionAwareMethodMatcher = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (methodMatcher <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">    introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">  &#125;</span><br><span class="line">  Set&lt;Class&gt; classes = <span class="keyword">new</span> HashSet&lt;Class&gt;(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line">  classes.add(targetClass);</span><br><span class="line">  <span class="comment">/**这里的classes由两部分组成：一个是目标类所实现的所有接口；一个是目标类本身(targetClass)。结合下面的循环扫描Methods的逻辑，也就是说，它会扫描目标类所实现的所有接口中定义的方法和目标类自身定义的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((introductionAwareMethodMatcher != <span class="keyword">null</span> &amp;&amp; </span><br><span class="line">           introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||</span><br><span class="line">           methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　看到这儿整个流程就清晰了：由于我们配置了<code>greetingAdvisor</code>，并且<code>patterns</code>与<code>HelloAction</code>中的<code>helloA</code>和<code>helloB</code>匹配，导致相应的<code>advisor</code>与目标bean（HelloAction）关联了，即<code>getAdvicesAndAdvisorsForBean</code>返回的<code>Interceptors</code>不为<code>DO_NOT_PROXY</code>，于是走了下面的<code>createProxy</code>逻辑，又因为<code>AspectJAwareAdvisorAutoProxyCreator</code>的配置项<code>proxyTargetClass</code>默认是false的，进而为<code>HelloAction</code>创建了JDK动态代理。</p><h2 id="三、最终版"><a href="#三、最终版" class="headerlink" title="三、最终版"></a>三、最终版</h2><p>　　经过上述两次错误分析，我们得知以下几点：</p><blockquote><p>1、首先使用CGLib的方式为<code>HelloAction</code>创建代理是必须的，因为我们所要代理的方法是<code>HelloAction</code>自定义的，且不在其所实现接口的方法列表中，面向接口的JDK动态代理行不通；</p><p>2、只要当前应用中别的地方事先配置了<code>&lt;aop:config&gt;</code>（比如最常用的声明式事务），就无法使用<code>BeanNameAutoProxyCreator</code>的方式为<code>HelloAction</code>创建CGLib代理！因为要为目标类的部分方法生成代理，其配置项<code>interceptorNames</code>就只能用<code>Advisor</code>而非普通的bean名称，而<code>Advisor</code>又会被<code>AspectJAwareAdvisorAutoProxyCreator</code>扫描到，最终导致上述二次代理的问题。</p></blockquote><p>　　最终去掉了<code>BeanNameAutoProxyCreator</code>和<code>greetingAdvisor</code>，改为<code>&lt;aop:config&gt;</code>通过指定<code>proxy-target-class</code>为true强制<code>AspectJAwareAdvisorAutoProxyCreator</code>走CGLib代理，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt-greet"</span> <span class="attr">expression</span>=<span class="string">"( execution(* org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloA(..)) or execution(* org.sherlockyb.blogdemos.struts2.web.action.HelloAction.helloB(..)) )"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">id</span>=<span class="string">"ad-greet"</span> <span class="attr">advice-ref</span>=<span class="string">"greetingInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt-greet"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　最后的拦截效果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] <span class="number">2017</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">03</span>,<span class="number">972</span> [resin-port-<span class="number">80</span>-<span class="number">51</span>] struts2.aop.GreetingMethodInterceptor (GreetingMethodInterceptor.java:<span class="number">33</span>) -greeting before invocation...</span><br><span class="line">say: hello A</span><br><span class="line">[INFO] <span class="number">2017</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">234</span> [resin-port-<span class="number">80</span>-<span class="number">51</span>] struts2.aop.GreetingMethodInterceptor (GreetingMethodInterceptor.java:<span class="number">35</span>) -greeting after invocation</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="一、JDK与CGLib动态代理的本质区别"><a href="#一、JDK与CGLib动态代理的本质区别" class="headerlink" title="一、JDK与CGLib动态代理的本质区别"></a>一、JDK与CGLib动态代理的本质区别</h2><h3 id="1-1-JDK动态代理"><a href="#1-1-JDK动态代理" class="headerlink" title="1.1 JDK动态代理"></a>1.1 JDK动态代理</h3><p>　　<strong>JDK动态代理是面向接口</strong>的，即被代理的目标类必须实现接口，且最终只会为目标类所实现的所有接口中的方法生成代理方法，对于目标类中包含的但是非接口中的方法，是不会生成对应的代理方法，methodA和methodB就是例子，这是由JDK代理的实现机制所决定了的：通过继承自Proxy类，实现目标类所实现的接口来生成代理类。</p><p>　　JDK动态代理生成的代理类，以$Proxy开头，后面的计数数字表示当前生成的是第几个代理类。且<strong>代理类是final的</strong>，不可被继承。</p><h3 id="1-2-CGLib动态代理"><a href="#1-2-CGLib动态代理" class="headerlink" title="1.2 CGLib动态代理"></a>1.2 CGLib动态代理</h3><p>　　而CGLib则是通过继承目标类，得到其子类的方式生成代理，而final类是不能被继承的，因为CGLib无法为final类生成代理。</p><p>　　CGLib代理生成的代理类含有<code>$$</code>，比如<code>HelloAction$$EnhancerByCGLIB$$ff7d443b</code>。</p><h2 id="二、对aop的不熟练所引发的问题"><a href="#二、对aop的不熟练所引发的问题" class="headerlink" title="二、对aop的不熟练所引发的问题"></a>二、对aop的不熟练所引发的问题</h2><p>　　对aop的不熟练，使得我们在用的时候，往往就容易忽视了一些细节，如当前采用的动态代理是JDK的还是CGLib的，默认选择是什么？都有哪些配置项，配置项的默认值，以及各配置项对最终生成代理结果的影响如何？当前类是否被多次代理？当出现了多次代理，代理的顺序又是如何？</p><p>　　对于第二次报错，其本质问题是属于<strong>二次代理</strong>的问题。有网友也遇到过类似的问题——<a href="http://www.cnblogs.com/study-everyday/p/7429298.html" target="_blank" rel="noopener">记一次Spring的aop代理Mybatis的DAO所遇到的问题</a>，只不过是在MyBatis上踩的坑，后续将会针对spring aop单独另开博文详解，尽情期待~</p><h2 id="三、Struts2的Interceptor机制原理"><a href="#三、Struts2的Interceptor机制原理" class="headerlink" title="三、Struts2的Interceptor机制原理"></a>三、Struts2的Interceptor机制原理</h2><p>　　Struts2的Interceptor机制是属于aop功能，按理说用常规的动态代理就可实现。但是由<a href="#%E4%B8%80%E3%80%81%E5%88%9D%E4%BD%93%E9%AA%8C">初体验</a> 小节中debug过程可知，它并没有基于常规的动态字节码技术如JDK动态代理、CGLib动态代理等，而是通过责任链模式和迭代的巧妙结合，实现了aop的功能，有兴趣的话也可研究一下。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts2 </tag>
            
            <tag> aop </tag>
            
            <tag> spring </tag>
            
            <tag> CGLib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新看待Jar包冲突问题及解决方案</title>
      <link href="/2017/07/15/solution-for-jar-conflicts/"/>
      <url>/2017/07/15/solution-for-jar-conflicts/</url>
      
        <content type="html"><![CDATA[<p>　　Jar 包冲突是老生常谈的问题，几乎每一个Java程序猿都不可避免地遇到过，并且也都能想到通常的原因一般是同一个Jar包由于maven传递依赖等原因被引进了多个不同的版本而导致，可采用依赖排除、依赖管理等常规方式来尝试解决该问题，但这些方式真正能彻底解决该冲突问题吗？答案是否定的。笔者之所以将文章题目起为“重新看待”，是因为之前对于Jar包冲突问题的理解仅仅停留在前面所说的那些，直到在工作中遇到的一系列Jar包冲突问题后，才发现并不是那么简单，对该问题有了重新的认识，接下来本文将围绕Jar包冲突的问题本质和相关的解决方案这两个点进行阐述。</p><a id="more"></a><h1 id="Jar-包冲突问题"><a href="#Jar-包冲突问题" class="headerlink" title="Jar 包冲突问题"></a>Jar 包冲突问题</h1><h2 id="一、冲突的本质"><a href="#一、冲突的本质" class="headerlink" title="一、冲突的本质"></a>一、冲突的本质</h2><p>　　Jar 包冲突的本质是什么？Google 了半天也没找到一个让人满意的完整定义。其实，我们可以从Jar包冲突产生的结果来总结，在这里给出如下定义（此处如有不妥，欢迎拍砖<del>-</del>）：</p><blockquote><p> <strong>Java应用程序因某种因素，加载不到正确的类而导致其行为跟预期不一致。</strong></p></blockquote><p>　　具体来说可分为两种情况：1）应用程序依赖的同一个Jar包出现了多个不同版本，并选择了错误的版本而导致JVM加载不到需要的类或加载了错误版本的类，为了叙述的方便，笔者称之为<strong>第一类Jar包冲突问题</strong>；2）同样的类（类的全限定名完全一样）出现在多个不同的依赖Jar包中，即该类有多个版本，并由于Jar包加载的先后顺序导致JVM加载了错误版本的类，称之为<strong>第二类Jar包问题</strong>。这两种情况所导致的结果其实是一样的，都会使应用程序加载不到正确的类，那其行为自然会跟预期不一致了，以下对这两种类型进行详细分析。</p><h3 id="1-1-同一个-Jar-包出现了多个不同版本"><a href="#1-1-同一个-Jar-包出现了多个不同版本" class="headerlink" title="1.1 同一个 Jar 包出现了多个不同版本"></a>1.1 同一个 Jar 包出现了多个不同版本</h3><p>　　随着Jar包迭代升级，我们所依赖的开源的或公司内部的Jar包工具都会存在若干不同的版本，而版本升级自然就避免不了类的方法签名变更，甚至于类名的更替，而我们当前的应用程序往往依赖特定版本的某个类 <strong>M</strong> ，由于maven的传递依赖而导致同一个Jar包出现了多个版本，当maven的仲裁机制选择了错误的版本时，而恰好类 <strong>M</strong>在该版本中被去掉了，或者方法签名改了，导致应用程序因找不到所需的类 <strong>M</strong>或找不到类 <strong>M</strong>中的特定方法，就会出现第一类Jar冲突问题。可总结出该类冲突问题发生的以下三个必要条件：</p><ul><li>由于maven的传递依赖导致依赖树中出现了同一个Jar包的多个版本</li><li>该Jar包的多个版本之间存在接口差异，如类名更替，方法签名更替等，且应用程序依赖了其中有变更的类或方法</li><li>maven的仲裁机制选择了错误的版本</li></ul><h3 id="1-2-同一个类出现在多个不同-Jar-包中"><a href="#1-2-同一个类出现在多个不同-Jar-包中" class="headerlink" title="1.2 同一个类出现在多个不同 Jar 包中"></a>1.2 同一个类出现在多个不同 Jar 包中</h3><p>　　同样的类出现在了应用程序所依赖的两个及以上的不同Jar包中，这会导致什么问题呢？我们知道，同一个类加载器对于同一个类只会加载一次（多个不同类加载器就另说了，这也是解决Jar包冲突的一个思路，后面会谈到），那么当一个类出现在了多个Jar包中，假设有 <strong>A</strong> 、 <strong>B</strong> 、 <strong>C</strong> 等，由于Jar包依赖的路径长短、声明的先后顺序或文件系统的文件加载顺序等原因，类加载器首先从Jar包 <strong>A</strong> 中加载了该类后，就不会加载其余Jar包中的这个类了，那么问题来了：如果应用程序此时需要的是Jar包 <strong>B</strong> 中的类版本，并且该类在Jar包 <strong>A</strong> 和 <strong>B</strong> 中有差异（方法不同、成员不同等等），而JVM却加载了Jar包 <strong>A</strong> 的中的类版本，与期望不一致，自然就会出现各种诡异的问题。</p><p>　　从上面的描述中，可以发现出现不同Jar包的冲突问题有以下三个必要条件：</p><ul><li>同一个类 <strong>M</strong> 出现在了多个依赖的Jar包中，为了叙述方便，假设还是两个： <strong>A</strong> 和 <strong>B</strong></li><li>Jar包 <strong>A</strong> 和 <strong>B</strong> 中的该类 <strong>M</strong> 有差异，无论是方法签名不同也好，成员变量不同也好，只要可以造成实际加载的类的行为和期望不一致都行。如果说Jar包 <strong>A</strong> 和 <strong>B</strong> 中的该类完全一样，那么类加载器无论先加载哪个Jar包，得到的都是同样版本的类 <strong>M</strong> ，不会有任何影响，也就不会出现Jar包冲突带来的诡异问题。</li><li>加载的类 <strong>M</strong> 不是所期望的版本，即加载了错误的Jar包</li></ul><h2 id="二、冲突的产生原因"><a href="#二、冲突的产生原因" class="headerlink" title="二、冲突的产生原因"></a>二、冲突的产生原因</h2><h3 id="2-1-maven-仲裁机制"><a href="#2-1-maven-仲裁机制" class="headerlink" title="2.1 maven 仲裁机制"></a>2.1 maven 仲裁机制</h3><p>　　当前maven大行其道，说到第一类Jar包冲突问题的产生原因，就不得不提<a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="noopener">maven的依赖机制</a>了。传递性依赖是Maven2.0引入的新特性，让我们只需关注直接依赖的Jar包，对于间接依赖的Jar包，Maven会通过解析从远程仓库获取的依赖包的pom文件来隐式地将其引入，这为我们开发带来了极大的便利，但与此同时，也带来了常见的问题——版本冲突，即同一个Jar包出现了多个不同的版本，针对该问题 Maven 也有一套仲裁机制来决定最终选用哪个版本，但 <strong>Maven 的选择往往不一定是我们所期望的</strong>，这也是产生 Jar 包冲突最常见的原因之一。先来看下Maven的仲裁机制：</p><ul><li>优先按照依赖管理 <strong>&lt;dependencyManagement&gt;</strong> 元素中指定的版本声明进行仲裁，此时下面的两个原则都无效了</li><li>若无版本声明，则按照“短路径优先”的原则（Maven2.0）进行仲裁，即选择依赖树中路径最短的版本</li><li>若路径长度一致，则按照“第一声明优先”的原则进行仲裁，即选择POM中最先声明的版本</li></ul><p>　　从maven的仲裁机制中可以发现，除了第一条仲裁规则（这也是解决Jar包冲突的常用手段之一）外，后面的两条原则，对于同一个Jar包不同版本的选择，maven的选择有点“一厢情愿”了，也许这是maven研发团队在总结了大量的项目依赖管理经验后得出的两条结论，又或者是发现根本找不到一种统一的方式来满足所有场景之后的无奈之举，可能这对于多数场景是适用的，但是<strong>它不一定适合我——当前的应用</strong>，因为每个应用都有其特殊性，该依赖哪个版本，maven没办法帮你完全搞定，如果你没有规规矩矩地使用 <strong>&lt;dependencyManagement&gt;</strong> 来进行依赖管理，就注定了逃脱不了第一类Jar包冲突问题。</p><h3 id="2-1-Jar包的加载顺序"><a href="#2-1-Jar包的加载顺序" class="headerlink" title="2.1 Jar包的加载顺序"></a>2.1 Jar包的加载顺序</h3><p>　　对于第二类 Jar 包冲突问题，即多个不同的 Jar 包有类冲突，这相对于第一类问题就显得更为棘手。为什么这么说呢？在这种情况下，两个不同的 Jar 包，假设为 <strong>A</strong>、 <strong>B</strong>，它们的名称互不相同，甚至可能完全不沾边，如果不是出现冲突问题，你可能都不会发现它们有共有的类！对于 A、B 这两个Jar包，maven 就显得无能为力了，因为 maven 只会为你针对同一个Jar包的不同版本进行仲裁，而这俩是属于不同的Jar包，超出了maven的依赖管理范畴。此时，当A、B都出现在应用程序的类路径下时，就会存在潜在的冲突风险，即A、B的加载先后顺序就决定着JVM最终选择的类版本，如果选错了，就会出现诡异的第二类冲突问题。</p><p>　　那么Jar包的加载顺序都由哪些因素决定的呢？具体如下：</p><ul><li>Jar包所处的加载路径，或者换个说法就是加载该Jar包的类加载器在JVM类加载器树结构中所处层级。由于JVM类加载的双亲委派机制，层级越高的类加载器越先加载其加载路径下的类，顾名思义，引导类加载器（bootstrap ClassLoader，也叫启动类加载器）是最先加载其路径下Jar包的，其次是扩展类加载器（extension ClassLoader），再次是系统类加载器（system ClassLoader，也就是应用加载器 appClassLoader），Jar包所处加载路径的不同，就决定了它的加载顺序的不同。比如我们在 eclipse 中配置 web 应用的 resin 环境时，对于依赖的Jar包是添加到 <code>Bootstrap Entries</code> 中还是 <code>User Entries</code> 中呢，则需要仔细斟酌下咯。</li><li>文件系统的文件加载顺序。这个因素很容易被忽略，而往往又是因环境不一致而导致各种诡异冲突问题的罪魁祸首。因 tomcat、resin 等容器的 ClassLoader获取加载路径下的文件列表时是不排序的，这就依赖于底层文件系统返回的顺序，那么当不同环境之间的文件系统不一致时，就会出现有的环境没问题，有的环境出现冲突。例如，对于 Linux 操作系统，返回顺序则是由iNode的顺序来决定的，如果说测试环境的Linux系统与线上环境不一致时，就极有可能出现典型案例：测试环境怎么测都没问题，但一上线就出现冲突问题，规避这种问题的最佳办法就是尽量保证测试环境与线上一致。</li></ul><h2 id="三、冲突的表象"><a href="#三、冲突的表象" class="headerlink" title="三、冲突的表象"></a>三、冲突的表象</h2><p>　　Jar包冲突可能会导致哪些问题？通常发生在编译或运行时，主要分为两类问题：一类是比较直观的也是最为常见的错误是抛出各种运行时异常，还有一类就是比较隐晦的问题，它不会报错，其表现形式是应用程序的行为跟预期不一致，分条罗列如下：</p><ul><li><strong>java.lang.ClassNotFoundException</strong>，即 java 类找不到。这类典型异常通常是由于，没有在依赖管理中声明版本，maven 的仲裁的时候选取了错误的版本，而这个版本缺少我们需要的某个 class 而导致该错误。例如 <code>httpclient-4.4.jar</code> 升级到 <code>httpclient-4.36.jar</code> 时，类<code>org.apache.http.conn.ssl.NoopHostnameVerifier</code> 被去掉了，如果此时我们本来需要的是 4.4 版本，且用到了 <code>NoopHostnameVerifier</code> 这个类，而maven 仲裁时选择了 4.6，则会导致 <code>ClassNotFoundException</code> 异常。</li><li><strong>java.lang.NoSuchMethodError</strong>，即找不到特定方法，第一类冲突和第二类冲突都可能导致该问题——加载的类不正确。若是第一类冲突，则是由于错误版本的Jar包与所需要版本的Jar包中的类接口不一致导致，例如 <code>antlr-2.7.2.jar</code> 升级到 <code>antlr-2.7.6.Jar</code> 时，接口 <code>antlr.collections.AST.getLine()</code> 发生变动，当 maven 仲裁选择了错误版本而加载了错误版本的类 AST，则会导致该异常；若是第二类冲突，则是由于不同 Jar 包含有的同名类接口不一致导致，<strong>典型的案例</strong>：Apache 的 <code>commons-lang</code> 包，<code>2.x</code> 升级到 <code>3.x</code> 时，包名直接从 <code>commons-lang</code> 改为 <code>commons-lang3</code>，部分接口也有所改动，由于包名不同和传递性依赖，经常会出现两种 Jar 包同时在 classpath 下，<code>org.apache.commons.lang.StringUtils.isBlank</code> 就是其中有差异的接口之一，由于 Jar 包的加载顺序，导致加载了错误版本的 <code>StringUtils</code> 类，就可能出现 <code>NoSuchMethodError</code> 异常。</li><li><strong>java.lang.NoClassDefFoundError</strong>，<strong>java.lang.LinkageError</strong>等，原因和上述雷同，就不作具体案例分析了。</li><li><strong>没有报错异常，但应用的行为跟预期不一致</strong>。这类问题同样也是由于运行时加载了错误版本的类导致，但跟前面不同的是，冲突的类接口都是一致的，但具体实现逻辑有差异，当我们加载的类版本不是我们需要的实现逻辑，就会出现行为跟预期不一致问题。这类问题通常发生在我们自己内部实现的多个Jar包中，由于包路径和类名命名不规范等问题，导致两个不同的Jar包出现了接口一致但实现逻辑又各不相同的同名类，从而引发此问题。</li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、问题排查和解决"><a href="#一、问题排查和解决" class="headerlink" title="一、问题排查和解决"></a>一、问题排查和解决</h2><ol><li>如果有异常堆栈信息，根据错误信息即可定位导致冲突的类名，然后在 eclipse 中 <code>CTRL+SHIFT+T</code> 或者在 ideal 中 <code>CTRL+N</code> 就可发现该类存在于多个依赖 Jar 包中</li><li>若步骤 1 无法定位冲突的类来自哪个 Jar 包，可在应用程序启动时加上 JVM 参数 <code>-verbose:class</code> 或者 <code>-XX:+TraceClassLoading</code>，日志里会打印出每个类的加载信息，如来自哪个 Jar 包</li><li>定位了冲突类的Jar包之后，通过 <code>mvn dependency:tree -Dverbose -Dincludes=&lt;groupId&gt;:&lt;artifactId&gt;</code> 查看是哪些地方引入的 Jar 包的这个版本</li><li>确定 Jar 包来源之后，如果是第一类 Jar 包冲突，则可用 <strong>&lt;excludes&gt;</strong> 排除不需要的 Jar 包版本或者在依赖管理 <strong>&lt;dependencyManagement&gt;</strong> 中申明版本；若是第二类 Jar 包冲突，如果可排除，则用 <strong>&lt;excludes&gt;</strong> 排掉不需要的那个 Jar 包，若不能排，则需考虑 Jar 包的升级或换个别的 Jar 包。当然，除了这些方法，还可以从类加载器的角度来解决该问题，可参考博文——<a href="http://www.shop988.com/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0jar%E5%8C%85%E9%9A%94%E7%A6%BB.html" target="_blank" rel="noopener">如果jar包冲突不可避免，如何实现jar包隔离</a>，其思路值得借鉴。</li></ol><h2 id="二、有效避免"><a href="#二、有效避免" class="headerlink" title="二、有效避免"></a>二、有效避免</h2><p>　　从上一节的解决方案可以发现，当出现第二类 Jar 包冲突，且冲突的 Jar 包又无法排除时，问题变得相当棘手，这时候要处理该冲突问题就需要较大成本了，所以，最好的方式是<strong>在冲突发生之前能有效地规避之</strong>！就好比数据库死锁问题，死锁避免和死锁预防就显得相当重要，若是等到真正发生死锁了，常规的做法也只能是回滚并重启部分事务，这就捉襟见肘了。那么怎样才能有效地规避 Jar 包冲突呢？</p><h3 id="2-1-良好的习惯：依赖管理"><a href="#2-1-良好的习惯：依赖管理" class="headerlink" title="2.1 良好的习惯：依赖管理"></a>2.1 良好的习惯：依赖管理</h3><p>　　对于第一类 Jar 包冲突问题，通常的做法是用 <strong>&lt;excludes&gt;</strong> 排除不需要的版本，但这种做法带来的问题是每次引入带有传递性依赖的 Jar 包时，都需要一一进行排除，非常麻烦。maven 为此提供了集中管理依赖信息的机制，即依赖管理元素 <strong>&lt;dependencyManagement&gt;</strong> ，对依赖Jar包进行统一版本管理，一劳永逸。通常的做法是，在 parent 模块的 pom 文件中尽可能地声明所有相关依赖 Jar 包的版本，并在子 pom 中简单引用该构件即可。</p><p>　　来看个示例，当开发时确定使用的 <code>httpclient</code> 版本为 4.5.1 时，可在父 pom 中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>　　然后各个需要依赖该 Jar 包的子 pom 中配置如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2-2-冲突检测插件"><a href="#2-2-冲突检测插件" class="headerlink" title="2.2 冲突检测插件"></a>2.2 冲突检测插件</h3><p>　　对于第二类 Jar 包冲突问题，前面也提到过，其核心在于同名类出现在了多个不同的Jar包中，如果人工来排查该问题，则需要逐个点开每个 Jar 包，然后相互对比看有没同名的类，那得多么浪费精力啊？！好在这种费时费力的体力活能交给程序去干。<code>maven-enforcer-plugin</code>，这个强大的maven插件，配合 <code>extra-enforcer-rules</code> 工具，能自动扫描 Jar 包将冲突检测并打印出来，汗颜的是，笔者工作之前居然都没听过有这样一个插件的存在，也许是没遇到像工作中这样的冲突问题，算是涨姿势了。其原理其实也比较简单，通过扫描 Jar 包中的 class，记录每个 class 对应的 Jar 包列表，如果有多个即是冲突了，故不必深究，我们只需要关注如何用它即可。</p><p>　　在<strong>最终需要打包运行的应用模块 pom</strong> 中，引入 <code>maven-enforcer-plugin</code> 的依赖，在 build 阶段即可发现问题，并解决它。比如对于具有parent pom的多模块项目，需要将插件依赖声明在应用模块的 pom 中。这里有童鞋可能会疑问，为什么不把插件依赖声明在 parent pom 中呢？那样依赖它的应用子模块岂不是都能复用了？这里之所以强调“打包运行的应用模块 pom ”，是因为冲突检测针对的是最终集成的应用，关注的是应用运行时是否会出现冲突问题，而每个不同的应用模块，各自依赖的Jar包集合是不同的，由此而产生的 <code>&lt;ignoreClasses&gt;</code> 列表也是有差异的，因此只能针对应用模块 pom分别引入该插件。</p><p>先看示例用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-enforcer-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependencyConvergence</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>enforce-ban-duplicate-classes<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">banDuplicateClasses</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ignoreClasses</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>javax.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>org.junit.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>net.sf.cglib.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>org.apache.commons.logging.*<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ignoreClass</span>&gt;</span>org.springframework.remoting.rmi.RmiInvocationHandler<span class="tag">&lt;/<span class="name">ignoreClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ignoreClasses</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">findAllDuplicates</span>&gt;</span>true<span class="tag">&lt;/<span class="name">findAllDuplicates</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">banDuplicateClasses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fail</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fail</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>extra-enforcer-rules<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-beta-6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　<code>maven-enforcer-plugin</code> 是通过很多预定义的标准规则（<a href="http://maven.apache.org/enforcer/enforcer-rules/index.html" target="_blank" rel="noopener">standard rules</a>）和用户自定义规则，来约束maven的环境因素，如 maven 版本、JDK 版本等等，它有很多好用的特性，具体可参见<a href="http://maven.apache.org/enforcer/maven-enforcer-plugin/" target="_blank" rel="noopener">官网</a>。而Extra Enforcer Rules则是 <em>MojoHaus</em> 项目下的针对 <code>maven-enforcer-plugin</code> 而开发的提供额外规则的插件，这其中就包含前面所提的重复类检测功能，具体用法可参见<a href="http://www.mojohaus.org/extra-enforcer-rules/" target="_blank" rel="noopener">官网</a>，这里就不详细叙述了。</p><h1 id="典型案例"><a href="#典型案例" class="headerlink" title="典型案例"></a>典型案例</h1><h2 id="第一类-Jar-包冲突"><a href="#第一类-Jar-包冲突" class="headerlink" title="第一类 Jar 包冲突"></a>第一类 Jar 包冲突</h2><p>　　这类 Jar 包冲突是最常见的也是相对比较好解决的，已经在<a href="#%E4%B8%89%E3%80%81%E5%86%B2%E7%AA%81%E7%9A%84%E8%A1%A8%E8%B1%A1">三、冲突的表象</a>这节中列举了部分案例，这里就不重复列举了。</p><h2 id="第二类-Jar-包冲突"><a href="#第二类-Jar-包冲突" class="headerlink" title="第二类 Jar 包冲突"></a>第二类 Jar 包冲突</h2><h3 id="Spring2-5-6-与-Spring3-x"><a href="#Spring2-5-6-与-Spring3-x" class="headerlink" title="Spring2.5.6 与 Spring3.x"></a>Spring2.5.6 与 Spring3.x</h3><p>　　Spring2.5.6 与 Spring3.x，从单模块拆分为多模块，Jar 包名称（artifactId）也从 spring 变为 spring-submoduleName，如<br>spring-context、spring-aop 等等，并且也有少部分接口改动（Jar 包升级的过程中，这也是在所难免的）。由于是不同的 Jar 包，经 maven 的传递依赖机制，就会经常性的存在这俩版本的 Spring 都在 classpath 中，从而引发潜在的冲突问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从kinit到kerberos安全机制</title>
      <link href="/2017/06/04/from-kinit-to-kerberos-security-mechanism/"/>
      <url>/2017/06/04/from-kinit-to-kerberos-security-mechanism/</url>
      
        <content type="html"><![CDATA[<p>　　最近老在项目的shell脚本中看到kinit这个东西，完整的命令是</p><p>　　 <code>kinit -k -t ./conf/kerberos.keytab sherlocky/admin@EXAMPLE.COM</code></p><p>　　查阅一番资料后了解到，之所以有这个命令，是由于该shell脚本接下来会访问Hadoop集群，从上面拉取文件做一些处理任务，并将结果存到Hadoop集群上，那么该命令的作用就是进行身份验证（Authentication），确保Hadoop集群资源的安全。这里就牵扯到kerberos协议，本文接下来将对此一一阐述。</p><a id="more"></a><h2 id="一、kinit命令"><a href="#一、kinit命令" class="headerlink" title="一、kinit命令"></a>一、kinit命令</h2><p>　　Kinit命令用于获取和缓存principal（当前主体）初始的票据授予票据（TGT），此票据用于Kerberos系统进行身份安全验证，实际上它是MIT在版权许可的条件下为kerberos协议所研发的免费实现工具<a href="http://web.mit.edu/kerberos/dist/index.html" target="_blank" rel="noopener">MIT Kerberos</a>（当前最新版本为<a href="https://web.mit.edu/kerberos/krb5-1.15/" target="_blank" rel="noopener">krb5-1.15.1</a>）的一部分，相关的配套命令还有<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/klist.html" target="_blank" rel="noopener">klist</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kdestroy.html" target="_blank" rel="noopener">kdestory</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kpasswd.html" target="_blank" rel="noopener">kpasswd</a>、<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/krb5-config.html" target="_blank" rel="noopener">krb5-config</a>等等，基本用法如下：</p><p><strong>kinit</strong> [-<strong>V</strong>][-<strong>l</strong> <em>lifetime</em>] [-<strong>s</strong> <em>start_time</em>][-<strong>r</strong> <em>renewable_life</em>][-<strong>p</strong> | -<strong>P</strong>][-<strong>f</strong> | -<strong>F</strong>][-<strong>a</strong>][-<strong>A</strong>][-<strong>C</strong>][-<strong>E</strong>][-<strong>v</strong>][-<strong>R</strong>][-<strong>k</strong> [-<strong>t</strong> <em>keytab_file</em>]][-<strong>c</strong> <em>cache_name</em>][-<strong>n</strong>][-<strong>S</strong> <em>service_name</em>][-<strong>I</strong> <em>input_ccache</em>][-<strong>T</strong> <em>armor_ccache</em>][-<strong>X</strong> <em>attribute</em>[<em>&#x3D;value</em>]][<em>principal</em>]</p><p>　　各选项具体含义都不做介绍了，可参考<a href="https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kinit.html" target="_blank" rel="noopener">官网</a>，较常用的方式就如前言所示，根据指定的事先生成的kerberos.keytab文件为指定个体进行验证。验证通过后，就可以像平常一样进行Hadoop系列操作。那么它是如何进行验证的呢？其中的过程和原理又是怎样的？下面要介绍的kerberos协议细节将会回答你的疑惑。</p><h2 id="二、Kerberos协议"><a href="#二、Kerberos协议" class="headerlink" title="二、Kerberos协议"></a>二、Kerberos协议</h2><p>　　Kerberos（具体可参考<a href="https://tools.ietf.org/html/rfc1510" target="_blank" rel="noopener">RFC1510</a>）是一种网络<strong>身份验证</strong>的协议（注意它只包括验证环节，不负责授权，关于这两者后面会有介绍区分），用户只需输入一次身份验证信息，就可凭借此验证获得的票据授予票据（ticket-granting ticket）访问多个接入Kerberos的服务，即<a href="https://en.wikipedia.org/wiki/Single_sign-on" target="_blank" rel="noopener">SSO</a>（Single Sign On，单点登录）。</p><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul><li>Principal：安全个体，具有唯一命名的客户端或服务器。命名规则：主名称+实例+领域，如本文开头中的<code>sherlocky/admin@EXAMPLE.COM</code></li><li>Ticket：票据，一条包含客户端标识信息、会话密钥和时间戳的记录，客户端用它来向目标服务器认证自己</li><li>Session key：会话密钥，指两个安全个体之间使用的临时加密秘钥，其时效性取决于单点登录的会话时间长短</li><li>AS：认证服务器（Authentication Server），KDC的一部分。通常会维护一个包含安全个体及其秘钥的数据库，用于身份认证</li><li>SS：特定服务的提供端（Service Server）</li><li>TGS：许可证服务器（Ticket Granting Server），KDC的一部分，根据客户端传来的TGT发放访问对应服务的票据</li><li>TGT：票据授予票据（Ticket Granting Ticket），包含客户端ID、客户端网络地址、票据有效期以及<em>client&#x2F;TGS</em>会话密钥</li><li>KDC：Key分发中心（key distribution center），是一个提供票据（tickets）和临时会话密钥（session keys）的网络服务。KDC服务作为客户端和服务器端信赖的第三方，为其提供初始票据（initial ticket）服务和票据授予票据（ticket-granting ticket）服务，前半部分有时被称为AS，后半部分有时则被称为TGS。</li></ul><p>　　关于概念的一点补充，博文<a href="http://www.360doc.com/content/15/0803/18/13047933_489282618.shtml" target="_blank" rel="noopener">Kerberos 服务的工作原理</a>中对于TGT和Ticket给出了巧妙的比喻：TGT类似于护照，Ticket则是签证，而访问特定的服务则好比出游某个国家。与护照一样，TGT可标识你的身份并允许你获得多个Ticket（签证），每个Ticket对应一个特定的服务，TGT和Ticket同样具有有效期，过期后就需要重新认证。</p><h3 id="2-认证过程"><a href="#2-认证过程" class="headerlink" title="2.认证过程"></a>2.认证过程</h3><p>　　Kerberos的认证过程可细分为三个阶段：初始验证、获取服务票据和服务验证。第一阶段主要是客户端向KDC中的AS发送用户信息，以请求TGT，然后到第二阶段，客户端拿着之前获得的TGT向KDC中的TGS请求访问某个服务的票据，最后阶段拿到票据（Ticket）后再到该服务的提供端验证身份，然后使用建立的加密通道与服务通信。</p><h4 id="2-1-初始验证"><a href="#2-1-初始验证" class="headerlink" title="2.1 初始验证"></a>2.1 初始验证</h4><p>　　此过程是客户端向AS请求获取TGT：</p><blockquote><ul><li>客户端向AS发送自身用户信息（如用户ID），该动作通常发生在用户初次登陆或使用kinit命令时</li><li>AS检查本地数据库是否存在该用户，若存在则返回如下两条信息：<ul><li>消息A：使用用户密钥加密的<em>Client&#x2F;TGS</em>会话密钥，我们称之为SK1。其中用户密钥是通过对该用户在数据库中对应的密码hash生成的</li><li>消息B：使用TGS的密钥加密的TGT（包含客户端ID、客户端网络地址、票据有效期和SK1）</li></ul></li><li>当客户端收到消息A和B时，它会尝试用本地的用户密钥（由用户输入的密码或kerberos.keytab文件中的密码hash生成）对A进行解密，只有当本地用户密钥与AS中对应该用户的密钥匹配时才能解密成功。对A解密成功后，客户端就能拿到SK1，才能与TGS进行后续的会话，这里就相当于AS对客户端的一次验证，只有真正拥有正确用户密钥的客户端才能有机会与AS进行后续会话。而对于消息B，由于它是由TGS的密钥加密的，故无法对其解密，也看不到其中的内容。</li></ul></blockquote><h4 id="2-2-获取服务票据"><a href="#2-2-获取服务票据" class="headerlink" title="2.2 获取服务票据"></a>2.2 获取服务票据</h4><p>　　此过程则是客户端向TGS请求获取访问对应服务的票据：</p><blockquote><ul><li><p>当客户端要访问某个服务时，会向TGS发送如下两条消息：</p><ul><li>消息C：消息B的内容（即加密后的TGT）和服务ID</li><li>消息D：通过SK1加密的验证器（Authenticator，包括用户ID和时间戳）</li></ul></li><li><p>TGS收到消息C和D后，首先检查KDC数据库中是否存在所需服务，若存在则用自己的TGS密钥尝试对C中的消息B进行解密，这里也是客户端对TGS的反向认证，只有真正拥有正确密钥的TGS才能对B解密，解密成功后就能拿到其中的SK1，然后再用SK1解密消息D拿到包含用户ID和时间戳的Authenticator，通过比较分别来自C和D的用户ID，如果二者匹配，则向客户端返回如下两条消息：</p><ul><li>消息E：通过SK1加密的Client&#x2F;SS会话密钥，该会话密钥是KDC新生成的随机密钥，用于将来客户端（Client）与服务端（SS）的通信加密，我们称之为SK2</li><li>消息F：使用服务的密钥加密的client-server票据（Ticket，包含用户ID、用户网络地址、票据有效期和SK2），之所以要用服务的密钥加密，是因为这个Ticket是给服务端看的，但又需要经过客户端传给服务端，且不能让客户端看到。那么就会有人问，为什么KDC不直接把消息E发送给服务端呢，这样岂不省事？问题就在于网络时延，若分开发送，消息E和F就不能确保同时到达服务端，考虑一个极端情况，KDC与服务之前的网络临时不通了，那么这段时间服务端就无法收到消息E，导致验证失败，而实际上该客户端是有访问权限的。通过公钥加密这种方式巧妙地回避了该问题</li></ul></li><li><p>客户端收到消息后，尝试用SK1解密消息E，得到Client&#x2F;SS会话密钥SK2</p></li></ul></blockquote><h4 id="2-3-服务验证"><a href="#2-3-服务验证" class="headerlink" title="2.3 服务验证"></a>2.3 服务验证</h4><p>　　此过程是客户端与服务端相互验证，并通信</p><blockquote><ul><li><p>客户端向服务端发送如下两条消息：</p><ul><li><p>消息G：即上一步中的消息F——client-server票据</p></li><li><p>消息H：通过SK2加密的新的验证器（Authenticator，包含用户ID和时间戳）</p></li></ul></li><li><p>服务端收到消息后，尝试用自己的密钥解密消息G，这里实际上也是客户端对服务端的一次验证，只有真正拥有正确密钥的服务端才能正确解密，从而有机会拿到Ticket中的SK2，然后再用该SK2解密消息H，同TGS一样，对分别来自Ticket和Authenticator中的用户ID进行验证，如果匹配成功则返回一条确认消息：</p><ul><li>消息I：通过SK2加密的新时间戳</li></ul></li><li><p>客户端尝试用SK2解密消息I，得到新时间戳并验证其正确性，验证通过后，客户端与服务端就达到了相互信任，后续的通信都采用SK2加密，就好比建立了一条加密通道，二者即可享受服务与被服务的乐趣了</p></li></ul></blockquote><h3 id="3-前提（环境假设）"><a href="#3-前提（环境假设）" class="headerlink" title="3.前提（环境假设）"></a>3.前提（环境假设）</h3><ul><li>共享密钥：在协议工作前，客户端与KDC，KDC与服务端都确保有了各自的共享密钥。</li><li>防Dos攻击：Kerberos协议本身并没有解决Dos攻击（<a href="https://en.wikipedia.org/wiki/Denial-of-service_attack" target="_blank" rel="noopener">Denial of service</a>，拒绝服务）防范问题，通常是由系统管理员和用户自己去定期探测并解决这样的攻击。</li><li>保障安全个体自身安全：参与到Kerberos协议中的安全个体必须确保其秘钥的安全性，一旦秘钥泄露或被攻击者暴力破解，那么攻击者就能随意地伪装安全个体，做一些不和谐的事情。</li><li>不循环利用Principal的唯一标识：访问控制的常用方式是通过访问控制列表（access control lists，ACLs）来对特定的安全个体进行授权。如果列表中有条记录对应的安全个体<em>A</em>早已被删除，而<em>A</em>的唯一标识却被后来新加的某个个体<em>B</em>再次利用，那么<em>B</em>就会继承之前<em>A</em>对应的权限，这是不安全的。避免这种风险的做法就是不复用Principal的唯一标识。</li><li>时钟同步：参与到协议中的主机必须有个时钟相互之间进行“松散同步”，松散度是可配置的。为什么需要同步各主机的时间呢？实际上从Kerberos的认证过程可以看到，任何人都可以向KDC请求任何服务的TGT，那攻击者就有可能中途截获正常用户的请求包，然后离线解密，就能合法地拿到TGT。为了防止这种重放攻击，票据（Ticket）会包含时间戳信息，即具有一定的有效期，因此如果主机的时钟与Kerberos服务器的时钟不同步，则认证会失败。在实践中，通常用网络时间协议（Network Time Protocol, NTP）软件来同步时钟。</li></ul><h3 id="4-局限性"><a href="#4-局限性" class="headerlink" title="4.局限性"></a>4.局限性</h3><ul><li>单点风险：过度依赖于KDC服务，Kerberos协议运转时需要KDC的持续响应，一旦KDC服务挂了，或者KDC数据库被攻破，那么Kerberos协议将无法运转</li><li>安全个体自身的安全：Kerberos协议之所以能运行在非安全网络之上，关键假设就是主机自身是安全的，一旦主机上的私钥泄露，攻击者将能轻易的伪装该个体实施攻击</li></ul><h2 id="三、Kerberos应用"><a href="#三、Kerberos应用" class="headerlink" title="三、Kerberos应用"></a>三、Kerberos应用</h2><h3 id="1-Hadoop安全机制"><a href="#1-Hadoop安全机制" class="headerlink" title="1.Hadoop安全机制"></a>1.Hadoop安全机制</h3><p>　　Apache Hadoop 最初设计时并没有考虑安全问题，它不对用户或服务进行验证，任何人都可以向集群提交代码并得到执行，使用Hadoop的组织只能把集群隔离到专有网络，确保只有经过授权的用户才能访问，但这也并不能解决Hadoop集群内部的安全问题。为了增强Hadoop的安全机制，从1.0.0版本以后，引入Kerberos认证机制，即用户跟服务通信以及各个服务之间通信均用Kerberos认证，在用户认证后任务执行、访问服务、读写数据等均采用特定服务发起访问token，让需求方凭借token访问相应服务和数据。下面以Yarn中提交MR任务为例：</p><blockquote><p>A、用户先向KDC请求TGT，做初始验证</p><p>B、用户通过TGT向KDC请求访问服务的Ticket</p><p>C、客户端通过ticket向服务认证自己，完成身份认证</p><p>D、完成身份认证后，客户端向服务请求若干token供后续任务执行时认证使用</p><p>F、客户端连同获取的token一并提交任务，后续任务执行使用token与服务进行认证</p></blockquote><h2 id="四、其他安全机制"><a href="#四、其他安全机制" class="headerlink" title="四、其他安全机制"></a>四、其他安全机制</h2><h3 id="1-OAuth认证"><a href="#1-OAuth认证" class="headerlink" title="1.OAuth认证"></a>1.OAuth认证</h3><p>　　OAuth（Open Authorization，开放授权）用于第三方授权服务，现常用的第三方账号登陆都是采用该机制。比如我用github账号登陆LeetCode官网，LeetCode并不需要知道我的github账号、密码，它只需要将登陆请求转给授权方（github），由它进行认证授权，然后把授权信息传回LeetCode实现登陆。</p><h3 id="2-LDAP"><a href="#2-LDAP" class="headerlink" title="2.LDAP"></a>2.LDAP</h3><p>　　LDAP（Lightweight Directory Access Protocol，轻量级目录访问协议）是一种用于访问目录服务的业界标准方法，LDAP目录以树状结构来存储数据，针对读取操作做了特定优化，比从专门为OLTP优化的关系数据库中读取数据快一个量级。LDAP中的安全模型主要通过身份认证、安全通道和访问控制来实现，它可以把整个目录、目录的子树、特定条目、条目属性集火符合某过滤条件的条目作为控制对象进行授权，也可以把特定用户、特定组或所有目录用户作为授权主体进行授权，也可以对特定位置（如IP或DNS名称）进行授权。</p><h3 id="3-SSL"><a href="#3-SSL" class="headerlink" title="3.SSL"></a>3.<a href="SSL/TLS%E5%8D%8F%E8%AE%AE%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E7%9A%84%E6%A6%82%E8%BF%B0">SSL</a></h3><p>SSL（Secure Sockets Layer，安全套接层）是目前广泛应用的加密通信协议，其基本思路是采用公钥加密法，即客户端先向服务器端索要公钥，然后用公钥加密信息，服务端收到密文后用自己的私钥解密。它的安全机制包含如下三点：</p><blockquote><ul><li>连接的私密性：利用会话密钥通过对称加密算法（DES）对传输数据进行加密，并利用RSA对会话密钥本身加密</li><li>身份验证：基于数字证书利用数字签名方法进行身份验证，SSL服务器和客户端通过PKI（Public Key Infrastructure）提供的机制从CA获取证书</li><li>内容可靠：使用基于密钥的MAC（Message Authentication Code，消息验证码）验证消息的完整性，防窜改</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell编程 </tag>
            
            <tag> kerberos </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2017/04/10/common-linux-commands/"/>
      <url>/2017/04/10/common-linux-commands/</url>
      
        <content type="html"><![CDATA[<p>  最近项目中有用到Shell脚本，难免会与一些以前没用到甚至没见过的Linux命令打交道，借此番机会也算是学习一哈，记录在此，以供日后参考。后续若再接触新的命令也会更新到此。</p><a id="more"></a><style> table th:first-of-type { width: 100px; } </style><h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/tee-invocation.html#tee-invocation" target="_blank" rel="noopener">tee</a></h2><table><thead><tr><th align="left">要点</th><th>说明</th></tr></thead><tbody><tr><td align="left">用途</td><td>重定向输出到多个文件或进程</td></tr><tr><td align="left">简介</td><td>该命令读取标准输入，并将内容同时输出到标准输出（屏幕）和多个文件中。</td></tr><tr><td align="left">应用场景</td><td>当我们重定向输出到文件中时，使用常规的“&gt;”符号无法直接从屏幕上看到原输出，使用tee就可在重定向文件的同时将内容输出到标准输出（屏幕）</td></tr><tr><td align="left">用法</td><td>tee [OPTION]…   [FILE]…<br>-a, 追加到给定的文件，没有此选项时默认是覆盖<br>-i, 忽略中断信号</td></tr><tr><td align="left">示例</td><td>ls &amp;#124; tee &amp;#124; out.txt<br>cat 1.txt &amp;#124; tee -a out.txt</td></tr><tr><td align="left">注意</td><td>在使用管道线时，前一个命令的标准错误输出不会被tee读取。</td></tr></tbody></table><h2 id="date"><a href="#date" class="headerlink" title="date"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html#date-invocation" target="_blank" rel="noopener">date</a></h2><table><thead><tr><th align="left">要点</th><th>说明</th></tr></thead><tbody><tr><td align="left">简介</td><td>根据给定格式显示日期时间或设置系统日期时间</td></tr><tr><td align="left">用法</td><td>date [OPTION]… [+FORMAT]<br>date [-u&amp;#124;–utc&amp;#124;–universal][ MMDDhhmm[[CC]YY][.ss] ]<br><br>OPTION: -d -f -r -R -rfc-2822 -s -u –help<br>FORMAT: %% %a %A %b %B %c %C %d %D…</td></tr><tr><td align="left">示例</td><td>date -d now +%Y%m%d   用指定格式显示当前时间<br>date -r text.log   显示文件最后修改时间<br>date -s “2013-09-06 00:00:00”   设置系统时间</td></tr></tbody></table><h2 id="getopts-x2F-getopt"><a href="#getopts-x2F-getopt" class="headerlink" title="getopts&#x2F;getopt"></a>getopts&#x2F;getopt</h2><table><thead><tr><th align="left">要点</th><th>说明</th></tr></thead><tbody><tr><td align="left">简介</td><td>获取并处理命令行参数</td></tr><tr><td align="left">用法</td><td>getopts option_string variable<br>第一个参数<strong>option_string</strong>是字符串，包括字符和”:”，每个字符都是一个有效的选项，若字符后带有”:”，表示这个字符有自己的参数。<br>getopts命令会读取命令行参数，当遇到连字符”-“，会判断”-“后的字符是否出现在option_string定义的选项中，若有匹配，则将其赋给第二个参数<strong>variable</strong>；否则将variable设为”?”。若选项有自己的参数，getopts会从命令行该选项后读取参数值：若该值存在，则将被赋给一个特殊变量<strong>OPTARG</strong>中；否则将在OPTARG中存放一个”?”，并在标准错误上显示一条消息。</td></tr><tr><td align="left">注意项</td><td>1.getopts是shell内置命令，不能处理长选项（如：–prefix&#x3D;..&#x2F;），而getopt是C的库函数，可处理长选项。<br>2.当option_string以”:”开头时，表示区分invalid option错误和miss option argument，对于前者，variable会被设置为”?”，对于后者，variable会被设置为”:”（见示例）；当option_string不以”:”开头时，对于上述两种错误，variable都被设为”?”。</td></tr><tr><td align="left">示例如下：</td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while getopts ':hf:g:s:t:' OPTION</span><br><span class="line">do</span><br><span class="line">case $OPTION</span><br><span class="line">in</span><br><span class="line">h) usage;;#h后面无":"，表示不带参数，usage是打印用法详情</span><br><span class="line">f) FILENAME=$OPTARG;;</span><br><span class="line">g) GROUP=$OPTARG;;</span><br><span class="line">s) START=$OPTARG;;</span><br><span class="line">t) TYPE=$OPTARG;;</span><br><span class="line">:) echo "选项\"-$OPTARG\" 后面缺少对应参数，将使用默认值;;</span><br><span class="line">\?)echo "错误的选项 -$OPTARG,将退出";;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/wc-invocation.html#wc-invocation" target="_blank" rel="noopener">wc</a></h2><table><thead><tr><th>要点</th><th>说明</th></tr></thead><tbody><tr><td>简介</td><td>word count，统计给定文件（可指定多个）或标准输入（没给定文件时）中字节数、字符数、词数（以空白符分割的词数）以及行数。</td></tr><tr><td>用法</td><td><strong>wc</strong> [<em>option</em>]… [<em>file</em>]…<br>option有如下选项：<br>-c, –bytes　　　　打印字节数<br>-m, –chars 　　　　打印字符数<br>-l, –lines　　　　打印行数<br>-L, –max-line-length　　　　打印最长行的长度<br>-w, –words　　　　打印词数，一个词被定义为以空白符分割的字符串<br>    –help　　　　展示帮助信息</td></tr><tr><td>注意</td><td>输出：wc会为每个文件打印一行计数，如果文件是作为参数，则会为每个文件打印两列：统计数 文件名，并在最后追加一行打印总两列：计数 total。<br>wc通常与管道线结合使用，直接打印计数</td></tr><tr><td>示例如下：</td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wc -l readme.txt version.txt        #统计指定的两个文件的行数，输出如下</span><br><span class="line">27readme.txt</span><br><span class="line"> 1version.txt</span><br><span class="line">28total</span><br><span class="line">cat readme.txt | wc -c              #结合管道，只输出统计数，如下</span><br><span class="line">898</span><br><span class="line">ls -l | wc -l                       #统计当前目录下的文件数</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a><a href="http://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html#cp-invocation" target="_blank" rel="noopener">cp</a></h2><table><thead><tr><th>要点</th><th>说明</th></tr></thead><tbody><tr><td>简介</td><td>Copy files and directories，复制一个或多个文件或目录到指定的文件或目录</td></tr><tr><td>用法</td><td>cp [<em>option</em>]… <em>source</em>… <em>dest</em><br>option有如下选项：<br>-f,–force　　　强行复制文件或目录，不论目标文件或目录是否已存在<br>-i,–interactive　　　覆盖既有文件之前先询问用户<br>-r&#x2F;R,–recursive　　　递归地复制目录，该选项<strong>只适用于目录</strong>，不能用于复制文件或符号链接<br>-b,–backup[&#x3D;<em>method</em>]　　　为即将删除或覆盖的目标文件进行备份<br>-s,–symbolic-link　　　对源文件建立符号连接，而非复制文件<br>-S,–suffix&#x3D;<em>suffix</em>　　　备份文件时，用指定后缀”<em>suffix</em>“代替文件的默认后缀<br>-v,–verbose　　　复制每个文件前，打印文件名<br><br>source(源文件)：指定源文件列表。默认情况下，cp不能复制目录，若要复制目录，必须使用-r选项<br>dest(目标文件或目录)：当source为多个文件时，dest必须是目录</td></tr></tbody></table><p>示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp file1 file2                       #将file1复制一份，并命名为file2</span><br><span class="line">cp -f file1 dir2/                    #将file1强行复制到目录dir2下</span><br><span class="line">cp -fr dir1 dir2/                    #递归地复制目录dir1到目录dir2下</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
            <tag> Shell编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务管理</title>
      <link href="/2017/03/22/spring-transaction-management/"/>
      <url>/2017/03/22/spring-transaction-management/</url>
      
        <content type="html"><![CDATA[<p>  对大多数Java开发者来说，Spring事务管理是Spring应用中最常用的功能，使用也比较简单。本文主要从三个方面（基本概述、基于源码的原理分析以及需要注意的细节）来逐步介绍Spring事务管理的相关知识点及原理，作为Spring事务管理的学习总结。</p><a id="more"></a><h1 id="Spring事务管理概述"><a href="#Spring事务管理概述" class="headerlink" title="Spring事务管理概述"></a>Spring事务管理概述</h1><h2 id="一、几个重要概念"><a href="#一、几个重要概念" class="headerlink" title="一、几个重要概念"></a>一、几个重要概念</h2><h3 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1.事务隔离级别"></a>1.事务隔离级别</h3><p>  ANSI&#x2F;ISO SQL92标准定义了4个<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Isolation.html" target="_blank" rel="noopener">隔离级别</a>：<strong>READ UNCOMMITED</strong>、<strong>READ COMMITED</strong>、<strong>REPEATABLE READ</strong>和<strong>SERIALIZABLE</strong>，隔离程度由弱到强。不同的事务隔离级别能够解决数据并发问题的能力不同，它与数据库并发性是对立的，两者此消彼长。</p><h3 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2.事务传播行为"></a>2.事务传播行为</h3><p>  事务传播主要是为了描述两个服务接口方法嵌套调用时，被调用者在调用者有无事务时所采取的事务行为。Spring框架在TransactionDefinition接口中固定了7种事务传播行为：<strong>PROPAGATION_REQUIRED</strong>、 <strong>PROPAGATION_SUPPORTS</strong>、 <strong>PROPAGATION_MANDATORY</strong>、     <strong>PROPAGATION_REQUIRES_NEW</strong>、 <strong>PROPAGATION_NOT_SUPPORTED</strong>、 <strong>PROPAGATION_NEVER</strong>、  <strong>PROPAGATION_NESTED</strong>。前面的6种是从EJB中引入的，而<strong>PROPAGATION_NESTED</strong>是Spring特有的。具体可参见<a href="http://pjoc.pub/shen-ru-qian-chu-shi-wu-4-springshi-wu-de-chuan-bo-xing-wei/" target="_blank" rel="noopener">深入浅出事务(4):Spring事务的传播行为</a>，该文结合具体代码示例，通俗易懂。</p><h3 id="3-事务同步管理器"><a href="#3-事务同步管理器" class="headerlink" title="3.事务同步管理器"></a>3.事务同步管理器</h3><p>  <strong>TransactionSynchronizationManager</strong>——事务管理的基石，主要是为了解决事务管理在多线程环境下资源（如Connection、Session等）的并发访问问题：使用ThreadLocal为不同事务线程维护独立的资源副本，以及事务配置属性和运行状态信息，使各个事务线程互不影响。</p><h3 id="4-事务管理SPI"><a href="#4-事务管理SPI" class="headerlink" title="4.事务管理SPI"></a>4.事务管理SPI</h3><p>  <a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="noopener">SPI</a>（Service Provider Interface）是一个框架开放给第三方的可扩展服务接口，供其具体实现，以支持框架的扩展性和插件式组件。Spring事务管理SPI主要包括3个接口：<strong>PlatformTransactionManager</strong>（进行事务的创建、提交或回滚）、<strong>TransactionDefinition</strong>（定义事务属性，如隔离级别）和<strong>TransactionStatus</strong>（事务运行时状态，如是否已完成）。这三者通过PlatformTransactionManager的如下接口进行关联：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据事务定义创建事务，并由TransactionStatus表示它</span></span><br><span class="line"><span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span></span>;</span><br><span class="line"><span class="comment">// 根据事务运行时状态提交或回滚事务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><p>  三种方式：编程、XML配置和注解。第一方式对应用代码侵入性较大，现已较少使用。后面两种则都属于声明式事务管理的方式，两者的共同点是都提供事务管理信息的元数据，只不过方式不同。前者对代码的侵入性最小，也最为常用，后者则属于较为折衷的方案，有一点侵入性，但相对也较少了配置，各有优劣，<a href="http://jinnianshilongnian.iteye.com/blog/1879910" target="_blank" rel="noopener">依场景需求而定</a>。<strong>声明式事务管理</strong>是Spring的一大亮点，利用AOP技术将事务管理作为切面动态织入到目标业务方法中，让事务管理简单易行。</p><p>  而不管是使用哪种方式，<strong>数据源</strong>、<strong>事务管理器</strong>都是必须的，一般通过XML的Bean配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destory-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.driverClass&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.jdbcUrl&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.maxPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.minPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;initialPoolSize&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定事务管理器标识，可被@Transactional注解引用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"txManagerA"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-编程式事务管理"><a href="#1-编程式事务管理" class="headerlink" title="1.编程式事务管理"></a>1.编程式事务管理</h3><p>  采用与DAO模板类一样的开闭思想，Spring提供了线程安全的<strong>TransactionTemplate</strong>模板类来处理不变的事务管理逻辑，将变化的部分抽象为回调接口<strong>TransactionCallback</strong>供用户自定义数据访问逻辑。使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> DaoA daoA;</span><br><span class="line"><span class="meta">@autowried</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate template;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">final</span> Element ele)</span> </span>&#123;</span><br><span class="line">template.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span></span>&#123;</span><br><span class="line">daoA.addElement(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  TransactionTemplate的配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"txManager"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"isolationLevelName"</span> <span class="attr">value</span>=<span class="string">"ISOLATION_DEFAULT"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propagationBehaviorName"</span> <span class="attr">value</span>=<span class="string">"PROPAGATION_REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  当然，用户也可以不使用TransactionTemplate，而是直接基于原始的<a href="#4-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86SPI">Spring事务管理SPI</a>进行编程式事务管理，只不过这种方式对代码侵入性最大，不推荐使用，这里也就不多做介绍了。</p><h3 id="2-基于XML配置的事务管理"><a href="#2-基于XML配置的事务管理" class="headerlink" title="2.基于XML配置的事务管理"></a>2.基于XML配置的事务管理</h3><p>  Spring早期版本，是通过<strong>TransactionProxyFactoryBean</strong>代理类实施声明式事务配置，由于这种方式的种种弊端，后来引入AOP切面描述语言后，提出一种更简洁的基于Schema的配置方式：<strong>tx&#x2F;aop命名空间</strong>，使声明式事务配置更简洁便利。</p><h4 id="2-1基于Bean的配置"><a href="#2-1基于Bean的配置" class="headerlink" title="2.1基于Bean的配置"></a>2.1基于Bean的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceATarget"</span> <span class="attr">class</span>=<span class="string">"org.sherlocky.book.spring3x.service.ServiceAImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceA"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:transactionManager-ref</span>=<span class="string">"txManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:target-ref</span>=<span class="string">"serviceATarget"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"get*"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"*"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="2-1基于Schema的配置（常用）"><a href="#2-1基于Schema的配置（常用）" class="headerlink" title="2.1基于Schema的配置（常用）"></a>2.1基于Schema的配置（常用）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"300"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.sherlocky.book.spring3x.service.*ServiceA.*(..))"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3基于注解的事务管理"><a href="#2-3基于注解的事务管理" class="headerlink" title="2.3基于注解的事务管理"></a>2.3基于注解的事务管理</h4><p>  通过**@Transactional<strong>对需要事务增强的Bean接口、实现类或方法进行标注，在容器中配置</strong><a href="tx:annotation-driven" target="_blank" rel="noopener">tx:annotation-driven</a>**以启用基于注解的声明式事务。注解所提供的事务属性信息与XML配置中的事务信息基本一致，只不过是另一种形式的元数据而已。使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(<span class="string">"txManagerA"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> DaoA daoA;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">final</span> Element ele)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring事务管理源码分析-spring3-1-0"><a href="#Spring事务管理源码分析-spring3-1-0" class="headerlink" title="Spring事务管理源码分析-(spring3.1.0)"></a>Spring事务管理源码分析-(spring3.1.0)</h1><p>  源码分析一定要有目的性，至少有一条清晰的主线，比如要搞清楚框架的某一个功能点背后的代码组织，前因后果，而不是一头扎进源码里，无的放矢。本文就从Spring事务管理的三种使用方式入手，逐个分析Spring在背后都为我们做了些什么。</p><h2 id="一、编程式"><a href="#一、编程式" class="headerlink" title="一、编程式"></a>一、编程式</h2><h3 id="1-TransactionTemplate"><a href="#1-TransactionTemplate" class="headerlink" title="1.TransactionTemplate"></a>1.TransactionTemplate</h3><p>  TransactionTemplate是编程式事务管理的入口，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTemplate</span> <span class="keyword">extends</span> <span class="title">DefaultTransactionDefinition</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">TransactionOperations</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</span><br><span class="line"><span class="keyword">return</span> ((CallbackPreferringPlatformTransactionManager) <span class="keyword">this</span>.transactionManager).execute(<span class="keyword">this</span>, action);【<span class="number">1</span>】</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">TransactionStatus status = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">this</span>);【<span class="number">2</span>】</span><br><span class="line">T result;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = action.doInTransaction(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;【<span class="number">3</span>】</span><br><span class="line"><span class="comment">// Transactional code threw application exception -&gt; rollback</span></span><br><span class="line">rollbackOnException(status, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;【<span class="number">4</span>】</span><br><span class="line"><span class="comment">// Transactional code threw error -&gt; rollback</span></span><br><span class="line">rollbackOnException(status, err);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;【<span class="number">5</span>】</span><br><span class="line"><span class="comment">// Transactional code threw unexpected exception -&gt; rollback</span></span><br><span class="line">rollbackOnException(status, ex);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex, <span class="string">"TransactionCallback threw undeclared checked exception"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.transactionManager.commit(status);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1整体概述"><a href="#1-1整体概述" class="headerlink" title="1.1整体概述"></a>1.1整体概述</h4><p>  TransactionTemplate提供了唯一的编程入口execute，它接受用于封装业务逻辑的TransactionCallback接口的实例，返回用户自定义的事务操作结果T。具体逻辑：先是判断transactionManager是否是接口CallbackPreferringPlatformTransactionManager的实例，若是则直接委托给该接口的execute方法进行事务管理；否则交给它的核心成员PlatformTransactionManager进行事务的创建、提交或回滚操作。</p><p>  CallbackPreferringPlatformTransactionManger接口扩展自PlatformTransactionManger，根据以下的官方源码注释可知，该接口相当于是把事务的创建、提交和回滚操作都封装起来了，用户只需要传入TransactionCallback接口实例即可，而不是像使用PlatformTransactionManger接口那样，还需要用户自己显示调用getTransaction、rollback或commit进行事务管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implementors of this interface automatically express a preference for</span></span><br><span class="line"><span class="comment">// callbacks over programmatic getTransaction, commit and rollback calls.</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CallbackPreferringPlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title">PlatformTransactionManager</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2具体剖析"><a href="#1-2具体剖析" class="headerlink" title="1.2具体剖析"></a>1.2具体剖析</h4><h5 id="DefaultTransactionDefinition"><a href="#DefaultTransactionDefinition" class="headerlink" title="DefaultTransactionDefinition"></a>DefaultTransactionDefinition</h5><p>  可以看到transactionTemplate直接扩展自DefaultTransactionDefinition，让自身具有默认事务定义功能，【1】和【2】处将<strong>this</strong>作为execute或getTransaction的实参传入，说明该事务管理是采用默认的事务配置，可以看下DefaultTransactionDefinition中定义的默认配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> propagationBehavior = PROPAGATION_REQUIRED; <span class="comment">//常用选择：当前没有事务，则新建；否则加入到该事务中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> isolationLevel = ISOLATION_DEFAULT;         <span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout = TIMEOUT_DEFAULT;                  <span class="comment">//-1，使用数据库的超时设置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> readOnly = <span class="keyword">false</span>;                       <span class="comment">//非只读事务</span></span><br></pre></td></tr></table></figure><h5 id="TransactionOperations和InitializingBean"><a href="#TransactionOperations和InitializingBean" class="headerlink" title="TransactionOperations和InitializingBean"></a>TransactionOperations和InitializingBean</h5><p>而TransactionOperations和InitializingBean接口分别定义了如下单个方法。InitializingBean是Spring在初始化所管理的Bean时常用的接口，以确保某些属性被正确的设置或做一些初始化时的后处理操作，可参考<a href="http://blog.csdn.net/maclaren001/article/details/37039749" target="_blank" rel="noopener">InitializingBean的作用</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span></span>;   <span class="comment">//TransactionTemplate的编程接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span></span>;                      <span class="comment">//Bean初始化时调用：在成员变量装配之后</span></span><br></pre></td></tr></table></figure><p>TransactionTemplate实现InitializingBean接口，主要是确保其核心成员transactionManager是否已初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'transactionManager' is required"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  从【3】【4】【5】可看出，基于TransactionTemplate的事务管理，在发生RuntimeException、Error或Exception时都会回滚，正常时才提交事务。</p><h3 id="2-PlatformTransactionManager"><a href="#2-PlatformTransactionManager" class="headerlink" title="2. PlatformTransactionManager"></a>2. PlatformTransactionManager</h3><p>  该接口在Spring事务管理中扮演着重要角色。看下getTransaction的源码注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Return a currently active transaction or create a new one, according to</span></span><br><span class="line"><span class="comment">// the specified propagation behavior.</span></span><br></pre></td></tr></table></figure><p>该方法的主要作用就是根据TransactionDefinition返回当前有效事务或新建事务，其中就包含了<a href="#2-%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA">事务传播行为</a>的控制逻辑。其<strong>唯一实现</strong>就是该接口对应的抽象类AbstractPlatformTransactionManager，这是典型的接口-&gt;抽象类-&gt;具体实现类三层结构，以<strong>提高代码复用性</strong>。其中抽象类是负责实现一些共有逻辑，而具体子类则是各自实现差异化功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明为final，确保不能再被子类重写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">Object transaction = doGetTransaction();</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;【<span class="number">1</span>】</span><br><span class="line"><span class="keyword">return</span> handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">&#125;</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">    definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">SuspendedResourcesHolder suspendedResources = suspend(<span class="keyword">null</span>);【<span class="number">2</span>】</span><br><span class="line">...</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">resume(<span class="keyword">null</span>, suspendedResources);【<span class="number">3</span>】</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">resume(<span class="keyword">null</span>, suspendedResources);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line"><span class="keyword">return</span> prepareTransactionStatus(definition, <span class="keyword">null</span>, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它会根据【1】处的isExistingTransaction方法判断当前是否有事务而分别作出不同的处理，包括挂起和恢复当前事务等，有兴趣的童鞋可以深入【2】处的supend和【3】处的resume方法，会发现对事务的挂起和恢复操作实际是委托于<strong>TransactionSynchronizationManager</strong>来做的，而该类在前面也提过到，是Spring管理事务资源的，这几个重要接口和类的关系渐渐清晰了，由于篇幅有限，后面打算单独另起一篇细讲。</p><h2 id="2-声明式"><a href="#2-声明式" class="headerlink" title="2.声明式"></a>2.声明式</h2><p>  基于XML和注解的方式都是属于声明式事务管理，只是提供元数据的形式不用，索性就一起讲了。声明式事务的核心实现就是利用AOP技术，将事务逻辑作为环绕增强MethodInterceptor动态织入目标业务方法中。其中的核心类为TransactionInterceptor。从以下代码注释可知，TransactionInterceptor是专用于声明式事务管理的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AOP Alliance MethodInterceptor for declarative transaction</span></span><br><span class="line"><span class="comment">// management using the common Spring transaction infrastructure &#123;PlatformTransactionManager&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="1-TransactionInterceptor"><a href="#1-TransactionInterceptor" class="headerlink" title="1.TransactionInterceptor"></a>1.TransactionInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AOP Alliance MethodInterceptor for declarative transaction</span></span><br><span class="line"><span class="comment">// management using the common Spring transaction infrastructure</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>从上述注释中可知该类是专用于声明式事务管理的，它的核心方法如下invoke：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the transaction attribute is null, the method is non-transactional.</span></span><br><span class="line"><span class="keyword">final</span> TransactionAttribute txAttr =</span><br><span class="line">getTransactionAttributeSource().getTransactionAttribute(invocation.getMethod(), targetClass);【<span class="number">1</span>】</span><br><span class="line"><span class="keyword">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);【<span class="number">2</span>】</span><br><span class="line"><span class="keyword">final</span> String joinpointIdentification = methodIdentification(invocation.getMethod(), targetClass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (txAttr == <span class="keyword">null</span> || !(tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line"><span class="comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></span><br><span class="line">TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);【<span class="number">3</span>】</span><br><span class="line">Object retVal = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// This is an around advice: Invoke the next interceptor in the chain.</span></span><br><span class="line"><span class="comment">// This will normally result in a target object being invoked.</span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// target invocation exception</span></span><br><span class="line">completeTransactionAfterThrowing(txInfo, ex);【<span class="number">4</span>】</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupTransactionInfo(txInfo);</span><br><span class="line">&#125;</span><br><span class="line">commitTransactionAfterReturning(txInfo);【<span class="number">5</span>】</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,</span><br><span class="line"><span class="keyword">new</span> TransactionCallback&lt;Object&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">                ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1整体概述-1"><a href="#1-1整体概述-1" class="headerlink" title="1.1整体概述"></a>1.1整体概述</h4><p>  TransactionInterceptor实现了MethodInterceptor接口，将事务管理的逻辑封装在环绕增强的实现中，而目标业务代码则抽象为MethodInvocation（该接口扩展自Joinpoint，故实际是AOP中的连接点），使得事务管理代码与业务逻辑代码完全分离，可以对任意目标类进行无侵入性的事务织入。具体逻辑：先根据MethodInvocation获取事务属性TransactionAttribute，根据TransactionAttribute得到对应的PlatformTransactionManager，再根据其是否是CallbackPreferringPlatformTransactionManager的实例分别做不同的处理，整体上跟<a href="#1-TransactionTemplate">TransactionTemplate</a>中大相径庭，后面主要是介绍几点不同的地方。</p><h4 id="1-2具体剖析-1"><a href="#1-2具体剖析-1" class="headerlink" title="1.2具体剖析"></a>1.2具体剖析</h4><h5 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h5><p>  MethodInterceptor是AOP中的环绕增强接口，同一个连接点可以有多个增强，而TransactionInterceptor扩展自该接口，说明事务管理只是众多横切逻辑中的一种，还有很多其他的，比如像日志记录、性能监控等，对于AOP而言并无区别，它会按照增强的顺序统一处理。关于AOP，后期会单独一篇详细介绍。</p><h5 id="TransactionAttribute和TransactionAttributeSource"><a href="#TransactionAttribute和TransactionAttributeSource" class="headerlink" title="TransactionAttribute和TransactionAttributeSource"></a>TransactionAttribute和TransactionAttributeSource</h5><p>  在代码【1】处，委托给TransactionAttributeSource根据MethodInvocation获取对应的事务属性TransactionAttribute，先来看下TransactionAttribute：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttribute</span> <span class="keyword">extends</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a qualifier value associated with this transaction attribute.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This may be used for choosing a corresponding transaction manager</span></span><br><span class="line"><span class="comment"> * to process this specific transaction.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getQualifier</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Should we roll back on the given exception?</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex the exception to evaluate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> whether to perform a rollback or not</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable ex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在TransactionDefinition的基础上增加了两个可定制属性，使用过XML配置和注解方式的童鞋应该都对qualifier和rollback-for再熟悉不过了，那两个新增属性就是为了支持这两个配置项的。再来看下TransactionAttributeSource：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface used by TransactionInterceptor. Implementations know</span></span><br><span class="line"><span class="comment"> * how to source transaction attributes, whether from configuration,</span></span><br><span class="line"><span class="comment"> * metadata attributes at source level, or anywhere else.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionInterceptor#setTransactionAttributeSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionProxyFactoryBean#setTransactionAttributeSource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttributeSource</span> </span>&#123;</span><br><span class="line"><span class="function">TransactionAttribute <span class="title">getTransactionAttribute</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以有这个接口，是因为Spring提供了XML配置、注解等不同的事务元数据形式，即事务属性的来源多样，该接口正是将事务配置的来源进行抽象，不同的来源有对应不同的实现类，接口单一职责，巧妙精简的设计！类图如下，AnnotationTransactionAttributeSource是注解相关，而NameMatchTransactionAttributeSource、MatchAlwaysTransactionAttributeSource等是XML配置相关。</p><p><img src="/2017/03/22/spring-transaction-management/TransactionAttribute.png" alt="TransactionAttribute类图"></p><h5 id="TransactionAspectSupport"><a href="#TransactionAspectSupport" class="headerlink" title="TransactionAspectSupport"></a>TransactionAspectSupport</h5><p>该抽象父类是事务切面的基本处理类，实现了一些共有方法，如代码【2】处determineTransactionManager(..)根据TransactionAttribute得到对应的PlatformTransactionManager，以及【3】处createTransactionIfNecessary创建事务，【4】处completeTransactionAfterThrowing回滚事务，【5】处commitTransactionAfterReturning提交事务等基本操作，底层同样是委托PlatformTransactionManager进行处理的。这里主要看下事务的回滚操作，跟TransactionTemplate是有区别的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">completeTransactionAfterThrowing</span><span class="params">(TransactionInfo txInfo, Throwable ex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (txInfo != <span class="keyword">null</span> &amp;&amp; txInfo.hasTransaction()) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (txInfo.transactionAttribute.rollbackOn(ex)) &#123;【<span class="number">1</span>】</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TransactionSystemException ex2) &#123;</span><br><span class="line">logger.error(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</span><br><span class="line">ex2.initApplicationException(ex);</span><br><span class="line"><span class="keyword">throw</span> ex2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex2) &#123;</span><br><span class="line">logger.error(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> ex2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">logger.error(<span class="string">"Application exception overridden by rollback error"</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从【1】处的transactionAttribute.rollbackon(ex)可看出，事务属性中的rollbackOn是在这里生效的，在发生指定异常时选择回滚或提交，是用户可配置的，而不像TransactionTemplate是固定的全部回滚。</p><h3 id="2-TransactionProxyFactoryBean"><a href="#2-TransactionProxyFactoryBean" class="headerlink" title="2.TransactionProxyFactoryBean"></a>2.TransactionProxyFactoryBean</h3><p>该类是早期<a href="#2-1%E5%9F%BA%E4%BA%8EBean%E7%9A%84%E9%85%8D%E7%BD%AE">基于Bean的XML配置方式</a>实现声明式事务的核心类，之所以放在后面讲，是因为该方式已不被推荐使用，先来看下定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Proxy factory bean for simplified declarative transaction handling.</span></span><br><span class="line"><span class="comment"> * This is a convenient alternative to a standard AOP</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125;</span></span><br><span class="line"><span class="comment"> * with a separate &#123;<span class="doctag">@link</span> TransactionInterceptor&#125; definition.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;HISTORICAL <span class="doctag">NOTE:</span>&lt;/strong&gt; This class was originally designed to cover the</span></span><br><span class="line"><span class="comment"> * typical case of declarative transaction demarcation: namely, wrapping a singleton</span></span><br><span class="line"><span class="comment"> * target object with a transactional proxy, proxying all the interfaces that the target</span></span><br><span class="line"><span class="comment"> * implements. However, in Spring versions 2.0 and beyond, the functionality provided here</span></span><br><span class="line"><span class="comment"> * is superseded by the more convenient &#123;<span class="doctag">@code</span> tx:&#125; XML namespace. See the &lt;a</span></span><br><span class="line"><span class="comment"> * href="http://bit.ly/qUwvwz"&gt;declarative transaction management&lt;/a&gt; section of the</span></span><br><span class="line"><span class="comment"> * Spring reference documentation to understand the modern options for managing</span></span><br><span class="line"><span class="comment"> * transactions in Spring applications.</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractSingletonProxyFactoryBean</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TransactionInterceptor transactionInterceptor = <span class="keyword">new</span> TransactionInterceptor();</span><br><span class="line"><span class="keyword">private</span> Pointcut pointcut;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createMainInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.transactionInterceptor.afterPropertiesSet();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.pointcut != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(<span class="keyword">this</span>.pointcut, <span class="keyword">this</span>.transactionInterceptor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Rely on default pointcut.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TransactionAttributeSourceAdvisor(<span class="keyword">this</span>.transactionInterceptor);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码的声明已经相当清晰，大致说明了该类的来龙去脉，忍不住直接贴上来了，感兴趣可自行阅读。这里主要是看下其实现思路：事务处理逻辑是委托给其成员TransactionInterceptor，而将事务逻辑织入目标类的工作则交由AbstractSingletonProxyFactoryBean来处理。FactoryBean是Spring中广泛使用的用来定制一些较复杂Bean的实例化逻辑，因此从类名上就可看出，AbstractSingletonProxyFactoryBean的主要工作则是实例化并返回一个单例的Proxy对象。有了Proxy对象，织入的工作就轻而易举了，此时TransactionInterceptor只是Proxy的众多Advisor中的一个，最后由Proxy创建拥有了事务增强的代理对象即可。</p><p>  以下是AbstractSingletonProxyFactoryBean中Proxy的实例化过程，全部在afterPropertiesSet中完成。其中的createMainInterceptor()是在其子类TransactionProxyFactoryBean中实现的，对应事务增强逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSingletonProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">ProxyConfig</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Object</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.target == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'target' is required"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.target <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"'target' needs to be a bean reference, not a bean name as value"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.proxyClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.proxyClassLoader = ClassUtils.getDefaultClassLoader();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();【<span class="number">1</span>】</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.preInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.preInterceptors) &#123;</span><br><span class="line">proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the main interceptor (typically an Advisor).</span></span><br><span class="line">proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(createMainInterceptor()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.postInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.postInterceptors) &#123;</span><br><span class="line">proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">TargetSource targetSource = createTargetSource(<span class="keyword">this</span>.target);</span><br><span class="line">proxyFactory.setTargetSource(targetSource);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.proxyInterfaces != <span class="keyword">null</span>) &#123;</span><br><span class="line">proxyFactory.setInterfaces(<span class="keyword">this</span>.proxyInterfaces);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!isProxyTargetClass()) &#123;</span><br><span class="line"><span class="comment">// Rely on AOP infrastructure to tell us what interfaces to proxy.</span></span><br><span class="line">proxyFactory.setInterfaces(</span><br><span class="line">ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), <span class="keyword">this</span>.proxyClassLoader));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.proxy = proxyFactory.getProxy(<span class="keyword">this</span>.proxyClassLoader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码【1】处可以看到，ProxyFactory是创建Proxy对象的关键类，感兴趣的童鞋可以跟进ProxyFactory的代码，可发现最终创建Proxy对象的是DefaultAopProxyFactory，细节如下：根据config配置，选择创建我们所熟知的两种AopProxy：JDK的JdkDynamicAopProxy和Cglib的Cglib2AopProxy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class targetClass = config.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line"><span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cglibAvailable) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(</span><br><span class="line"><span class="string">"Cannot proxy target class because CGLIB2 is not available. "</span> +</span><br><span class="line"><span class="string">"Add CGLIB to the class path or specify proxy interfaces."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> CglibProxyFactory.createCglibProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h1><h2 id="一、PROPAGATION-TESTED（嵌套事务）"><a href="#一、PROPAGATION-TESTED（嵌套事务）" class="headerlink" title="一、PROPAGATION_TESTED（嵌套事务）"></a>一、PROPAGATION_TESTED（嵌套事务）</h2><p>  当使用PROPAGATION_NESTED时，<strong>底层的数据源必须基于JDBC3.0</strong>。因为Spring所支持的嵌套事务，是基于事务保存点实现的（<strong>JTA除外</strong>），而保存点机制是从JDBC3.0才开始出现的。直接看AbstractPlatformTransactionManager中的处理代码。对于通常的嵌套事务，会在当前所处父事务中创建保存点，然后进行子事务处理；对于JTA事务环境，则是采用嵌套的begin和commit&#x2F;rollback调用来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TransactionStatus <span class="title">handleExistingTransaction</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> debugEnabled)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isNestedTransactionAllowed()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NestedTransactionNotSupportedException(</span><br><span class="line"><span class="string">"Transaction manager does not allow nested transactions by default - "</span> +</span><br><span class="line"><span class="string">"specify 'nestedTransactionAllowed' property with value 'true'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Creating nested transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (useSavepointForNestedTransaction()) &#123;</span><br><span class="line"><span class="comment">// Create savepoint within existing Spring-managed transaction,</span></span><br><span class="line"><span class="comment">// through the SavepointManager API implemented by TransactionStatus.</span></span><br><span class="line"><span class="comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span></span><br><span class="line">DefaultTransactionStatus status =</span><br><span class="line">prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, <span class="keyword">false</span>, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">status.createAndHoldSavepoint();</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Nested transaction through nested begin and commit/rollback calls.</span></span><br><span class="line"><span class="comment">// Usually only for JTA: Spring synchronization might get activated here</span></span><br><span class="line"><span class="comment">// in case of a pre-existing JTA transaction.</span></span><br><span class="line"><span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">doBegin(transaction, definition);</span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、获取数据连接资源"><a href="#二、获取数据连接资源" class="headerlink" title="二、获取数据连接资源"></a>二、获取数据连接资源</h2><p>  当脱离模板类，直接操作底层持久技术的原生API时，就需要通过Spring提供的资源工具类获取线程绑定的资源，而不应该直接从DataSource或SessionFactory中获取，否则容易造成<a href="https://my.oschina.net/jiangtao1314/blog/38993" target="_blank" rel="noopener">数据连接泄露</a>的问题。Spring为不同的持久化技术提供了一套从TransactionSynchronizationManager中获取对应线程绑定资源的工具类：DataSourceUtils（Spring JDBC或iBatis）、SessionFactoryUtils（Hibernate 3.0）等。</p><h2 id="三、如何标注-Transactional注解"><a href="#三、如何标注-Transactional注解" class="headerlink" title="三、如何标注@Transactional注解"></a>三、如何标注@Transactional注解</h2><p>  虽然@Transactional注解可被应用于接口、接口方法、类及类的public方法，但建议在具体实现类上使用@Transactional注解，因为<strong>接口上的注解不能被继承</strong>，这样会有隐患（关于注解的继承，可参考<a href="http://elf8848.iteye.com/blog/1621392" target="_blank" rel="noopener">这里</a>）。当事务配置按如下方式，使用的是子类代理（CGLib）而非接口代理（JDK）时，对应目标类不会添加事务增强！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Source Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
            <tag> 事务管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
